[
  {
    "objectID": "research/overview.html",
    "href": "research/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Overview\n\nMy research interests: an elevator pitch1\n\n\n\n\n\n\nKeywords: algorithms and complexity • graphs • computational social choice • combinatorial games • constraint satisfaction\n\n\n\n\n \n\nMy broad research interest lies in theoretical aspects of computer science. I am specifically interested in understanding the potential and the limitations of computational power. To this end, we use abstractions that model what computers do, as opposed to, say, analyzing a specific configuration or engineering faster hardware. While this approach does not directly advance state of the art computing tech, it does help with understanding what we can and cannot do with the increasing amounts of computing power at our disposal in a tech-agnostic fashion. This means that most lessons will remain relevant even after you’ve upgraded your systems to use the next generation of hardware, and after that too.\nMost of my work concerns the design and analysis of algorithms for computational problems. The problems I work with are usually inspired from applications that someone cares about, for example:\n\nFinding patterns in large networks (e.g, discovering closely-knit communities in friendship networks).\nDetermining who should win an election given a set of votes.\nDistributing resources among people (who may value them differently) in a way that makes everyone happy.\nComing up with strategies to win a game of solo chess.\nFiguring out how to contain the spread of a fire by deploying as few firefighters as possible.\n\nFor some of these scenarios, it may not be immediately obvious what the computational problem is. For example, consider the issue of who must win an election: you would like to create a reasonable mechanism to build a consensus from a set of votes. What would be considered reasonable?\nWell, you could list out some natural properties that you would want your mechanism to satisfy (for instance, if all voters have the same favorite candidate, it would be very unreasonable for the mechanism to not pick such a candidate as a winner). And then you could seek out a mechanism that satisfies all of these properties. This is the so-called axiomatic approach to voting, and the approach has even led to the discovery of some fascinating impossibility results, indicating that some combinations of properties cannot be achieved by any mechanism, no matter how clever. Now, among other aspects, one would hope that mechanisms we come up with can be efficiently implemented. It turns out that many mechanisms that have a lot of appealing properties are complex to implement, and some of my work involves finding ways of making them more accessible.\nWhile some computational problems admit elegant solutions that have fast implementations in the real world, for several others we have substantial theoretical evidence suggesting that such solutions are going to be elusive. This means that for all practical purposes we have to work our way through trade-offs.\n\n\n\nFig. Exploring tradeoffs between the demands of accuracy, speed, and coverage.\n\n\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nOne approach that tackles all of these tradeoffs at once is to take what is now called a “multivariate approach” to the analysis of running times, which essentially involves appreciating that to describe a problem instance just in terms of its size is like describing a movie by a rating, which is unfortunate because there’s so much more nuance. And yet we report — and think about — worst-case running times in only terms of the sizes of the instances. Consider, for example, how much more informative it is to think of the running time of BFS as O(n+m) rather than O(n^2), also a valid upper bound2. Notice how the latter fails to convey the fact that the running time of BFS is as good as linear on sparse graphs.\nSo the parameterized approach takes into account problem structure by addressing “secondary” measurements (parameters), apart from the primary measurement of overall input size, that significantly affect problem computational complexity. The central notion of fixed parameter tractability (FPT) is a generalization of polynomial-time based on confining any non-polynomial complexity costs to a function only of these secondary measurements. For instance, if you have an algorithm for vertex cover whose running time is O(2^{\\Delta(G)}) \\cdot n^{O(1)}, where \\Delta(G) is the maximum degree of the input graph3, then notice that you would have solved vertex cover in polynomial time on all graphs whose maximum degree is, say, O(\\log n). Sadly, since we know vertex cover to be NP-complete even when restricted to cubic graphs, this specific goal is a bit of a pipedream, but hopefully you see the potential4 in the process.\nTo illustrate how useful this approach can be, consider the typechecking problem for ML, a programming language for which relatively efficient compilers exist. One of the problems the compiler must solve is the checking of the compatibility of type declarations. This problem is known to be EXP-complete (Henglein and Mairson 1994): let’s just say intractable in the classical world. However, the implementations work well in practice because the ML Type Checking problem admits an algorithm (Lichtenstein and Pnueli 1985) with a running time of O(2^kn), where n is the size of the program and k is the maximum nesting depth of the type declarations. Since normally k is a small constant5, the algorithm is clearly practical on inputs one would expect to encounter in practice.\nBack to why this approach captures algorithmic tradeoffs in the regime of hard problems beautifully. You can think of an algorithm that is FPT in some parameter k as giving you efficient algorithms for that subclass of instances where k is small enough for the algorithm to be efficient. You could also think of it as giving you full coverage but giving up on efficiency as your parameter values loom larger. Finally, you can also devise randomized and/or approximate FPT algorithms, to have the FPT efficiency gains while giving up on accuracy, which may be necessary either for speedups or when working with problems that would not have FPT algorithms otherwise (like we just saw for vertex cover parameterized by maximum degree).\nParameterized (aka multivariate) algorithmics are a wonderfully flexible framework that allows you to dabble in various algorithmic tradeoffs. Once you start thinking in terms of restraining the combinatorial blowups to certain parameters of interest, you’ll probably find that the approach leads you to new ways of looking at the problem! To stay true to the motivations of the field: which is to find ways of “coping with NP-hardness” when said NP-hard problems are ones we need to solve in the real world — one must remember to sanity checck the relevance of the parameters we are working with. An ideal set of parameters would be small for most instances in real-world distributions, but also give you enough flex to devise efficient algorithms.\nFor a delightful history of the field, I recommend (Bodlaender et al. 2012). Also, (Cygan et al. 2015) is a very accessible introduction to the field, only assuming a background in undergraduate algorithms. The FPT Wiki is a community-maintained resource that documents developments in the field as they happen.\nThis framework has been my default way of thinking about algorithms for a while now. In the following, I delve a little further into the specifics of the kinds of problems I have been working on.\n\n\n\n\n\n\nComing Soon\n\n\n\nGames on graphs ⸱ Voting ⸱ Fair Division ⸱ Combinatorial Games ⸱ Backdoors to SAT ⸱ Eliminating Forbidden Subgraphs\n\n\nIncidentally, I am also interested in issues of CS education, mostly from the perspective of a poorly performing practitioner.\n\n\n\n\n\n\n\nReferences\n\nBodlaender, Hans L., Rod Downey, Fedor V. Fomin, and Dániel Marx, eds. 2012. The Multivariate Algorithmic Revolution and Beyond: Essays Dedicated to Michael R. Fellows on the Occasion of His 60th Birthday. Berlin, Heidelberg: Springer-Verlag.\n\n\nCygan, Marek, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh. 2015. Parameterized Algorithms. Springer.\n\n\nHenglein, F., and H. Mairson. 1994. “The Complexity of Type Inference for Higher-Order Typed Lambda Calculi.” J. Functional Programming 4 (4): 435–78.\n\n\nLichtenstein, O., and A. Pnueli. 1985. “Checking That Finite State Concurrent Programs Satisfy Their Linear Specifications.” In Conference Record of the Twelfth Annual ACM Symposium on Principles of Programming Languages, 97–107. ACM; ACM.\n\nFootnotes\n\n\nfor a suitably long elevator ride — assume skyscraper.↩︎\nHere, I am using n and m to denote the number of vertices and edges in the input graph G.↩︎\nOnce again, n denotes the number of vertices in the input graph G.↩︎\nIt would remiss to not point out that several algorithms for vertex cover turn out to be efficient from the parameterized perspective and useful in practice!↩︎\nindeed, if k is not a small constant, you probably have bigger problems anyway↩︎"
  },
  {
    "objectID": "research/publications-arxiv.html",
    "href": "research/publications-arxiv.html",
    "title": "Publications",
    "section": "",
    "text": "Publications on the ArXiV\nDBLP ⸱ Conferences ⸱ Journals ⸱ ArXiV ⸱ Other\n\n \n\n\n\nAgrawal, Akanksha, Sathish Govindarajan, and Neeldhara Misra. 2014. “Vertex Cover Gets Faster and Harder on Low Degree Graphs.” CoRR abs/1404.5566.\n\n\nAravind, N. R., Neeldhara Misra, and Harshil Mittal. 2022. “Chess Is Hard Even for a Single Player.” CoRR abs/2203.14864.\n\n\nChoudhari, Jayesh, Anirban Dasgupta, Neeldhara Misra, and M. S. Ramanujan. 2017. “Saving Critical Nodes with Firefighters Is FPT.” CoRR abs/1705.10923.\n\n\nDas, Bireswar, Murali Krishna Enduri, Neeldhara Misra, and I. Vinod Reddy. 2017. “On Structural Parameterizations of Firefighting.” CoRR abs/1711.10227.\n\n\nDayal, Pratyush, and Neeldhara Misra. 2019. “Deleting to Structured Trees.” CoRR abs/1912.12765.\n\n\nDey, Palash, and Neeldhara Misra. 2016a. “Elicitation for Preferences Single Peaked on Trees.” CoRR abs/1604.04403.\n\n\n———. 2016b. “On the Exact Amount of Missing Information That Makes Finding Possible Winners Hard.” CoRR abs/1610.08407.\n\n\n———. 2016c. “Preference Elicitation for Single Crossing Domain.” CoRR abs/1604.05194.\n\n\nDey, Palash, Neeldhara Misra, and Y. Narahari. 2014a. “Complexity of Kernelization in the Possible Winner Problem.” CoRR abs/1405.3865.\n\n\n———. 2014b. “Detecting Possible Manipulators in Elections.” CoRR abs/1404.2367.\n\n\n———. 2015a. “Frugal Bribery in Voting.” CoRR abs/1504.08248.\n\n\n———. 2015b. “Manipulation Is Harder with Incomplete Votes.” CoRR abs/1504.08256.\n\n\n———. 2015c. “On Choosing Committees Based on Approval Votes in the Presence of Outliers.” CoRR abs/1511.04190.\n\n\n———. 2016. “Complexity of Manipulation with Partial Information in Voting.” CoRR abs/1604.04359.\n\n\nDey, Palash, Neeldhara Misra, Swaprava Nath, and Garima Shakya. 2019. “A Parameterized Perspective on Protecting Elections.” CoRR abs/1905.11838.\n\n\nFomin, Fedor V., Daniel Lokshtanov, Neeldhara Misra, Geevarghese Philip, and Saket Saurabh. 2010. “Hitting Forbidden Minors: Approximation and Kernelization.” CoRR abs/1010.1365.\n\n\nFomin, Fedor V., Daniel Lokshtanov, Neeldhara Misra, and Saket Saurabh. 2012. “Planar f-Deletion: Approximation and Optimal FPT Algorithms.” CoRR abs/1204.4230.\n\n\nGaspers, Serge, Neeldhara Misra, Sebastian Ordyniak, Stefan Szeider, and Stanislav Zivný. 2015. “Backdoors into Heterogeneous Classes of SAT and CSP.” CoRR abs/1509.05725.\n\n\nGowda, Kishen N., Neeldhara Misra, and Vraj Patel. 2020. “A Parameterized Perspective on Attacking and Defending Elections.” CoRR abs/2005.03176.\n\n\nGoyal, Prachi, Vikram Kamat, and Neeldhara Misra. 2013. “On the Parameterized Complexity of the Maximum Edge Coloring Problem.” CoRR abs/1306.2931.\n\n\nKamat, Vikram, and Neeldhara Misra. 2013. “An Erdős–Ko–Rado Theorem for Matchings in the Complete Graph.” CoRR abs/1303.4061.\n\n\nMisra, Neeldhara, and Harshil Mittal. 2020. “Imbalance Parameterized by Twin Cover Revisited.” CoRR abs/2005.03800.\n\n\nMisra, Neeldhara, Harshil Mittal, and Aditi Sethia. 2020. “Red-Blue Point Separation for Points on a Circle.” CoRR abs/2005.06046.\n\n\nMisra, Neeldhara, Manas Mulpuri, Prafullkumar Tale, and Gaurav Viramgami. 2022. “Romeo and Juliet Meeting in Forest Like Regions.” CoRR abs/2210.02582.\n\n\nMisra, Neeldhara, and Saraswati Nanoti. 2022. “Eternal Vertex Cover on Bipartite and Co-Bipartite Graphs.” CoRR abs/2201.03820.\n\n\nMisra, Neeldhara, and Debanuj Nayak. 2021. “On Fair Division with Binary Valuations Respecting Social Networks.” CoRR abs/2111.11528.\n\n\nMisra, Neeldhara, Sebastian Ordyniak, Venkatesh Raman, and Stefan Szeider. 2013. “Upper and Lower Bounds for Weak Backdoor Set Detection.” CoRR abs/1304.5518.\n\n\nMisra, Neeldhara, Geevarghese Philip, Venkatesh Raman, Saket Saurabh, and Somnath Sikdar. 2009. “FPT Algorithms for Connected Feedback Vertex Set.” CoRR abs/0909.3180.\n\n\nMisra, Neeldhara, and I. Vinod Reddy. 2017. “The Parameterized Complexity of Happy Colorings.” CoRR abs/1708.03853.\n\n\nMisra, Neeldhara, Chinmay Sonar, P. R. Vaidyanathan, and Rohit Vaish. 2021. “Equitable Division of a Path.” CoRR abs/2101.09794.\n\n\nRoy, Aniket Basu, Anil Maheshwari, Sathish Govindarajan, Neeldhara Misra, Subhas C. Nandy, and Shreyas Shetty. 2016. “The Runaway Rectangle Escape Problem.” CoRR abs/1603.04210.\n\n\nSonar, Chinmay, Palash Dey, and Neeldhara Misra. 2020. “On the Complexity of Winner Verification and Candidate Winner for Multiwinner Voting Rules.” CoRR abs/2004.13933."
  },
  {
    "objectID": "research/overview-fairdivision.html",
    "href": "research/overview-fairdivision.html",
    "title": "Overview",
    "section": "",
    "text": "Studies of fair division aim to find ways of allocating resources among people (aka agents) — who have preferences over said resources — in such a way that makes everyone happy.\nThat was a loaded statement, and as we will see, there are a number of ways in which it can be made precise.\n The language in this short essay is deliberately informal. Please take a look at some of the references for proper definitions, notation, and etiquette. The goal here is to just convey, briefly, the major lines of inquiry in fair division research.\n\n\nResources, broadly speaking, refer to the thing(s) we want to allocate. It might refer to discrete items (e.g, cars) that are typically infeasible to “break” further, or a continuous object (e.g, a piece of land). In the former setting, one simply models the resources as a finite set, while in the latter, it is convenient to think of the resource as the interval [0,1]. These scenarios are usually called the settings of indivisible goods and cake cutting, respectively.\nAlthough it doesn’t sound like it, a resource may also refer to something not entirely empowering, such as a (usually tiresome) task that needs to be done. Such resources are often called chores.\nIn short: resources are thing(s) that need to be handed out or assigned.\n\n\n\nAgents lie the heart of the problem: to keep things meanigful we assume there’s more than one, and rest assured, things already get interesting with just two of them, although we often have more of them to worry about. These are the folks who are eyeing (or avoiding, depending on the situation) a large share of the resources.\n\n\n\nOur agents have… opinions. They all come with their own perspectives on resources. These preferences can be expressed with a valuation function v, which takes as input a subset of resources and a choice of agent, and reports the value that said agent has for said resources.\nFor instance, in the indivisible setting: if S is a subset of items and a is an agent, we could probe v(S,a) to appreciate the utility that the agent derives if s/he were to be given all the items in S (and nothing else).\n\n\n\n\n\n\nAdditive Valuations\n\n\n\nFor indivisible items, it’s common to assume that valuations are additive, i.e, the value that an agent has for a bundle of items S is the same as the sum of the values that it has for each of the individual items, i.e: v(S,a) = \\sum_{x \\in S}v(\\{x\\},a).\n\n\n\n\n\n\n\n\nNormalized Valuations\n\n\n\nTo make apples-to-apples comparisons between agents, it is common to assume that the values themselves are normalized: imagine that every agent has 100 points that they must use fully to express their desires.\nIn other words, if R is the set of all resources, we have: v(R,a) = 100 for all agents a.\n\n\n\n\n\nAn allocation is simply a partition of our resources into n labeled parts, where the labels correspond to agents. As you might guess, this is to say that the agent a “recieves” the part labeled a. Note that our choice of the word partition implies two important things:\n\nEvery resource is allocated to some agent.\nNo resource is allocated to more than one agent.\n\nThe first point implies that no resources are thrown away, while the second point implies that there is no sharing. Sometimes, we may want to relax these aspects of the definition: this is nonetheless a good place to start.\n\n\n\nAh well. This, as you might have guessed, is: (a) the hard part, and (b) not always possible, depending on your definition. \nThere are several notions of “happiness” proposed in the fair division literature. Suppose we are trying to divide R1 among a set of n agents A whose valuations are given by v, and we have come up with an allocation D. For an agent a, we use D_a to denote the part labeled a in D.\nHere are a few notions suggestive that D is a “desirable” allocation, making everyone in A happy.\n\n\n\n\n\n\n Proportional Division\n\n\n\nThe allocation D is proportional if every agent gets at least their “due” share according to his own value function. In particular, each of the n agents gets a subset of R which they value as at least 1/n of the total value:\n V(D_a,a)\\geqslant V_{a}(R)/n ~~~ \\forall a \\in A.\n\n\n\n\n\n\n\n\n Envy-Freeness\n\n\n\nThe allocation D is envy-free if no agent values someone else’s bundle more than their own: i.e, if an agent a considers agent b’s bundle, they find that they value their own bundle at least as much as they value b’s:\nv(D_a,a) \\geqslant v(D_b,a) ~~~ \\forall a,b \\in A.\n\n\n\n\n\n\n\n\n Equitability\n\n\n\nThe allocation D is equitable if all agents have the same value for their bundles:\nv(D_a,a) = v(D_b,b) ~~~ \\forall a,b \\in A.\n\n\nNotice that if we didn’t insist on D allocating every item to some agent, then we could resort to the happiness-by-Zen approach: in particular, the trivial allocation that gives nobody anything would vacuously satisfy most definitions of happiness. Implicitly, our demand for a “complete” allocation can be thought of as an efficiency requirement, and one could also push the bar on this front. For example, a common efficiency notion, borrowed from economics, is Pareto optimality.\n\n\n\n\n\n\n Pareto Optimality\n\n\n\nThe allocation D is Pareto optimal if no other allocation would make someone better off without making someone else worse off. In other words, for any allocation D^\\prime \\neq D, if there exists an agent a for whom:\n v(D^\\prime_a,a) > v(D_a,a), \nthen there is also an agent b for whom:  v(D^\\prime_b,b) < v(D_b,b). \n\n\nFix any notion of happiness2 — say P, and efficiency — say Q. Two questions are of immediate interest:\n\nDo allocations that satisfy P and Q always exist?\nFor instances that admit allocations that satisfy P and Q, can such allocations be computed efficiently? And can we quickly determine if such allocations do not exist for a given instance?\n\nFor example, notice that allocations in the sense that we defined them (with an implicit requirement of completeness) that are envy-free need not always exist: consider the situation where you have two agents and one item, and both agents value said item at 100. Any complete allocation will assign this item to one of these two agents, making the other envious. The same example shows that we cannot guarantee the existence of complete equitable allocations.\nNon-existence of nice allocations is always a bit of a bummer, so much research has been devoted to reasonable workarounds, for example:\n\nWhat if3 the allocations could be approximately envy-free/equitable?\nWhat if4 the valuations were not completely arbitrary?\nWhat if5 we could introduce some dummy items or money into the systsem to make things work?\nWhat if6 we didn’t have to allocate everything?\nWhat if7 the parts were allowed to overlap?\n\nApart from making sense of reasonable workarounds, research on fair division also aims to understand tradeoffs between fairness and efficiency. Given an allocation, there are ways in which you can measure its welfare — it’s usually a function of the utilities that all agents derive from the allocation. The “gap” between the maximum welfare you can generate if you were not restricted by fairness requirements v/s the best welfare attainable subject to fairness constraints — known as the price of fairness — is also the topic of much research.\nIf any of this piqued your interest, here’s a non-exhaustive list of pointers that I hope will help with finding out more!\n\n\n\n\n\n\n Credits. Many thanks to Rohit Vaish for inputs and pointers!\n\n\n\n\n\n\n\nPart II in the Handbook of Computational Social Choice (Brandt et al. 2016) is a great place to start (the handbook can be downloaded from here).\nFor indivisible goods, (Amanatidis et al. 2022) is an excellent and — at least at the time of this writing — recent survey covering the state of the art and highlighting major open problems.\nSeveral talks in the COMSOC Seminar Series are focused on problems in fair division. Watch out for (among others):\n\nAyumi Igarashi (NII Tokyo): Fair Division of House Chores\nWarut Suksompong (Singapore): Picking Sequences and Monotonicity in Weighted Fair Division\nErel Segal-Halevi (Ariel): Fair Division of Electricity\nMaria Kyropoulou (Essex): On Interim Envy-Free Allocation Lotteries\nAnna Bogomolnaia (Glasgow): Guarantees in Fair Division\nFrancis Su (Harvey Mudd): Multilabeled Versions of Sperner’s and Fan’s Lemmas and Applications\nXiaohui Bei (Nanyang Technological University): Fair Division of Mixed Divisible and Indivisible Goods\nJérôme Lang (Paris): Collective Decision Making under Incomplete Knowledge: Possible and Necessary Solutions\n\nRohit Vaish taught an excellent mini-course on Fair Division at IIT Gandhinagar in 2018:\n\nIntroduction to Cake Cutting \nIntroduction to the setting of Indivisible Goods \nCake Cutting Revisited \nAlgorithms for Indivisible Goods \nOpen Problems \n\nSeveral lectures in the ACM Summer School on Game Theory (by Siddarth Barman and Nidhi Rathi) were on themes related to Fair Division:\n\nAn Introduction to Cake-Cutting \nTwo Algorithms for Finding Proportional Allocations \nEnvy-Freenes and Approximate EF \nSperner’s Lemma and Applications \nCake Cutting with a Secret Agent \nFairness Notions for Indivisible Goods \nComputing EF1 Allocations: Cycle Trading and Round Robin \nAn Introduction to Rent Division \nRent Division and Maximum Weight Matchings \nHall’s Theorem and Maximin Share \n\nCheck out the talks on Algorithms for Fair Division and Collective Welfare by Siddharth Barman (Part 1, Part 2) at Recent Trends in Algorithms, 2022.\nVisualize several fair division algorithms at MatchU, a project by Hadi Hosseini.\nThis is a lovely popular lecture on Cake Cutting by Francis Su."
  },
  {
    "objectID": "research/phdthesis.html",
    "href": "research/phdthesis.html",
    "title": "Overview",
    "section": "",
    "text": "PhD Thesis"
  },
  {
    "objectID": "research/publications-other.html",
    "href": "research/publications-other.html",
    "title": "Publications",
    "section": "",
    "text": "Miscellaneous Publications\nDBLP ⸱ Conferences ⸱ Journals ⸱ ArXiV ⸱ Other\n\n \n\n\n\nMisra, Neeldhara. 2016a. “Alternate Parameterizations.” In Encyclopedia of Algorithms, 64–67.\n\n\n———. 2016b. “Kernelization, Planar f-Deletion.” In Encyclopedia of Algorithms, 1033–36."
  },
  {
    "objectID": "research/publications.html",
    "href": "research/publications.html",
    "title": "Publications",
    "section": "",
    "text": "Publications\nDBLP ⸱ Conferences ⸱ Journals ⸱ ArXiV ⸱ Other\n\n \n\n\n\n\n\n\n\nThese pages are currently work in progress: I hope to add pointers to slides, blogs, and videos associated with these papers in due course!"
  },
  {
    "objectID": "research/people.html",
    "href": "research/people.html",
    "title": "People",
    "section": "",
    "text": "People\n\n \n\n\nPostDocPhDMastersProject StudentsInternsJRFs\n\n\n\n\n\n    \n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Jayakrishnan Madathil\n        \n                \n        IITGN Early Career Research Fellow\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2020 — 2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Suman Banerjee\n        \n                \n        IITGN PostDoctoral Fellow\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019 — 2020\n    \n\n\n\n\nNo matching items\n\n\n\n\n\n \n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Apeksha Srivastava\n        \n                \n        PhD (Humanities and Social Sciences)\n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021 — present\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Harshil Mittal\n        \n                \n        PhD (Computer Science & Engineering)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2020 — present\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Saraswati Nanoti\n        \n                \n        PhD (Mathematics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2020 — present\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Aditi Sethia\n        \n                \n        PhD (Computer Science & Engineering)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019 — present\n    \n\n\n\n\nNo matching items\n\n\n\n\n\n \n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Harshit Chauhan\n        \n                \n        MSc Mathematics\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021 -- 2023\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Argha Sardar\n        \n                \n        MSc Mathematics\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021 -- 2023\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Rasika Ramakrishna\n        \n                \n        MSc Mathematics\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019 -- 2021\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Aashima Kaushal\n        \n                \n        MSc Mathematics\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019 -- 2020\n    \n\n        \n        \n        \n        \n        \n                        \n        \n        \n        \n        \n        \n        Chinmay Sonar\n        \n                \n        Dual Degree BTech (ME) & MTech (CSE)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2018 -- 2019\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Tanisha\n        \n                \n        MSc Mathematics\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017 -- 2019\n    \n\n        \n        \n        \n        \n        \n                        \n        \n        \n        \n        \n        \n        Chamanvir Kaur\n        \n                \n        MTech Computer Science & Engineering\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017 -- 2019\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Piyush Rathi\n        \n                \n        MTech Computer Science & Engineering\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017 -- 2019\n    \n\n        \n        \n        \n        \n        \n                        \n        \n        \n        \n        \n        \n        Aditi Sethia\n        \n                \n        MSc Mathematics\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017 -- 2019\n    \n\n        \n        \n        \n        \n        \n                        \n        \n        \n        \n        \n        \n        Arshed Nabeel\n        \n                \n        MTech Computer Science (CSA, IISc)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2013 -- 2015\n    \n\n\n\n\nNo matching items\n\n\n\n\n\n \n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Yash More\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2023\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Binita Maity\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2023\n    \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        Shrutimoy Das\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2023\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Shivangi Yadav\n        \n                \n        Independent Project (PG, Mathematics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Divya Sharma\n        \n                \n        Independent Project (PG, Electrical Engineering)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Sukruta Midigeshi\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Hrushti Naik\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Yash More\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Guru Sharan N\n        \n                \n        Independent Project (PG, Mathematics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Amey Kulkarni\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Aditya Pusalkar\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Aditi Sethia\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Akash Pareek\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Manas Mulpuri\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Viramgami Gaurav\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Anant Kumar\n        \n                \n        Independent Project (PG, Mathematics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Dhara Thakkar\n        \n                \n        Independent Project (PG, Mathematics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Dipan Dey\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Manas Mulpuri\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Viramgami Gaurav\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Nipun Mahajan\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Mahika Jaguste\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Jayesh Malaviya\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2021\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Chris Francis\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2020\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Amey Kulkarni\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2020\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Ritik Dutta\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2020\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Kousik Loho\n        \n                \n        Independent Project (PG, Physics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Aditiben Savalia\n        \n                \n        Independent Project (PG, Mathematics)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Vraj Patel\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Kishen Gowda\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Ritik Dutta\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Debanuj Nayak\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Chinmay Sonar\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        P R Vaidyanathan\n        \n                \n        Independent Project (UG)\n        \n        \n                            \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Ankita Shah\n        \n                \n        Independent Project (PG, HSS)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Aparna Nampoothiri\n        \n                \n        Independent Project (PG, HSS)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Akash Pallath\n        \n                \n        Independent Project (UG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Gagan Kanojia\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Shivdutt Sharma\n        \n                \n        Independent Project (PG)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n\n\n\nNo matching items\n\n\n\n\n\n \n\n\n\n\n    \n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Subhajit Pramanik\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Elizabeth Mary Mathew\n        \n                \n        Google Explore CSR Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Vaishnavi Gaurav\n        \n                \n        Google Explore CSR Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Tanushree Shetty\n        \n                \n        Google Explore CSR Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2022\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Rutvik Rahul Page\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Varad Pimpalkhute\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Shivam Mishra\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Kavel Baruah\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Radhika Vyas\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Dhruvesh Asnani\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Sarath Chandra\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Prudhvi Raj\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Hitesh Kumar\n        \n                \n        Research Intern\n        \n        \n                            \n        \n        \n        \n        \n        \n    \n    \n        2018\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Foram Lakhani\n        \n                \n        Research Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Raj Rajvir\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Anurag Sanyal\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2017\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Aashay Sandansing\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Akash Pallath\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Chinmay Sonar\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Purvil Jani\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Sneha Garuda\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Jainil Vachhani\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n        \n        \n        \n        \n        \n        Paritosh Yadav\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Tushar Anchan\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        P R Vaidyanathan\n        \n                \n        SRIP Intern\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2016\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Harman Singh\n        \n                \n        Research Intern (CSA, IISc)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2014\n    \n\n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Shreyas Shetty\n        \n                \n        Project Assistant (CSA, IISc)\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2014\n    \n\n\n\n\nNo matching items\n\n\n\n\n\n \n\n\n\n\n    \n        \n        \n            \n        \n        \n                        \n        \n        \n        \n        \n        \n        Harshil Mittal\n        \n                \n        Junior Research Fellow\n        \n        \n        \n        \n        \n        \n        \n    \n    \n        2019\n    \n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nJayakrishnan Madathil\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nSuman Banerjee\n\n\n\n \n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n×\n\n \n\n\nApeksha Srivastava\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nHarshil Mittal\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nSaraswati Nanoti\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAditi Sethia\n\n\n\n \n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n×\n\n \n\n\nHarshit Chauhan\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nArgha Sardar\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nRasika Ramakrishna\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAashima Kaushal\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nChinmay Sonar\n\n\n\n \n\n\nGraduate Student  University of California, Santa Barbara\n\n\n                   \n\n\n\n\n\n\n\n×\n\n \n\n\nTanisha\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nChamanvir Kaur\n\n\n\n \n\n\nFull-Stack Developer  TOMIA\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nPiyush Rathi\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAditi Sethia\n\n\n\n \n\n\nGraduate Student  Indian Institute of Technology, Gandhinagar\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nArshed Nabeel\n\n\n\n \n\n\nResearch Engineer  Netradyne\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n×\n\n \n\n\nYash More\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nBinita Maity\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nShrutimoy Das\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nShivangi Yadav\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nDivya Sharma\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nSukruta Midigeshi\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nHrushti Naik\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nYash More\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nGuru Sharan N\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAmey Kulkarni\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAditya Pusalkar\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAditi Sethia\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAkash Pareek\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nManas Mulpuri\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nViramgami Gaurav\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAnant Kumar\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nDhara Thakkar\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nDipan Dey\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nManas Mulpuri\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nViramgami Gaurav\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nNipun Mahajan\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nMahika Jaguste\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nJayesh Malaviya\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nChris Francis\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAmey Kulkarni\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nRitik Dutta\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nKousik Loho\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAditiben Savalia\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nVraj Patel\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nKishen Gowda\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nRitik Dutta\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nDebanuj Nayak\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nChinmay Sonar\n\n\n\n \n\n\nGraduate Student  University of California, Santa Barbara\n\n\n                   \n\n\n\n\n\n\n\n×\n\n \n\n\nP R Vaidyanathan\n\n\n\n \n\n\nGraduate Student  TU Wien\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAnkita Shah\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAparna Nampoothiri\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAkash Pallath\n\n\n\n \n\n\nGraduate Student  University of Pennsylvania\n\n\n                   \n\n\n\n\n\n\n\n×\n\n \n\n\nGagan Kanojia\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nShivdutt Sharma\n\n\n\n \n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n×\n\n \n\n\nSubhajit Pramanik\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nElizabeth Mary Mathew\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nVaishnavi Gaurav\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nTanushree Shetty\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nRutvik Rahul Page\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nVarad Pimpalkhute\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nShivam Mishra\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nKavel Baruah\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nRadhika Vyas\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nDhruvesh Asnani\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nSarath Chandra\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nPrudhvi Raj\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nHitesh Kumar\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nForam Lakhani\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nRaj Rajvir\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAnurag Sanyal\n\n\n\n \n\n\nMasters Student  Simon Fraser University\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAashay Sandansing\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nAkash Pallath\n\n\n\n \n\n\nGraduate Student  University of Pennsylvania\n\n\n                   \n\n\n\n\n\n\n\n×\n\n \n\n\nChinmay Sonar\n\n\n\n \n\n\nGraduate Student  University of California, Santa Barbara\n\n\n                   \n\n\n\n\n\n\n\n×\n\n \n\n\nPurvil Jani\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nSneha Garuda\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nJainil Vachhani\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nParitosh Yadav\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nTushar Anchan\n\n\n\n \n\n\nSoftware Engineer  Expedia Group\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nP R Vaidyanathan\n\n\n\n \n\n\nGraduate Student  TU Wien\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nHarman Singh\n\n\n\n \n\n\nProduct Fellow  Razorpay\n\n\n\n\n\n\n\n\n\n×\n\n \n\n\nShreyas Shetty\n\n\n\n \n\n\nData Scientist  Flipkart\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n×\n\n \n\n\nHarshil Mittal\n\n\n\n \n\n\nGraduate Student  Indian Institute of Technology, Gandhinagar\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "research/publications-journal.html",
    "href": "research/publications-journal.html",
    "title": "Publications",
    "section": "",
    "text": "Journal Publications\nDBLP ⸱ Conferences ⸱ Journals ⸱ ArXiV ⸱ Other\n\n \n\n\n\nAgrawal, A., N. R. Aravind, S. Kalyanasundaram, A. S. Kare, J. Lauri, N. Misra, and I. V. Reddy. (2020): “Parameterized complexity of happy coloring problems,” Theor. Comput. Sci., 835, 58–81.\n\n\nAshok, P., S. Kolay, N. Misra, and S. Saurabh. (2022): “Exact multi-covering problems with geometric sets,” Theory Comput. Syst., 66, 89–113.\n\n\nBanerjee, S., N. Misra, and S. C. Nandy. (2020): “Color spanning objects: Algorithms and hardness results,” Discret. Appl. Math., 280, 14–22.\n\n\nDas, B., M. K. Enduri, M. Kiyomi, N. Misra, Y. Otachi, I. V. Reddy, and S. Yoshimura. (2019): “On structural parameterizations of firefighting,” Theor. Comput. Sci., 782, 79–90.\n\n\nDey, P., N. Misra, and Y. Narahari. (2016): “Kernelization complexity of possible winner and coalitional manipulation problems in voting,” Theor. Comput. Sci., 616, 111–25.\n\n\n---. (2017): “Frugal bribery in voting,” Theor. Comput. Sci., 676, 15–32.\n\n\n---. (2018): “Complexity of manipulation with partial information in voting,” Theor. Comput. Sci., 726, 78–99.\n\n\n---. (2019): “Parameterized dichotomy of choosing committees based on approval votes in the presence of outliers,” Theor. Comput. Sci., 783, 53–70.\n\n\nDey, P., N. Misra, S. Nath, and G. Shakya. (2021): “A parameterized perspective on protecting elections,” Theor. Comput. Sci., 874, 15–31.\n\n\nFellows, M. R., D. Lokshtanov, N. Misra, M. Mnich, F. A. Rosamond, and S. Saurabh. (2009): “The complexity ecology of parameters: An illustration using bounded max leaf number,” Theory Comput. Syst., 45, 822–48.\n\n\nFomin, F. V., D. Lokshtanov, N. Misra, G. Philip, and S. Saurabh. (2013): “Quadratic upper bounds on the erdős-pósa property for a generalization of packing and covering cycles,” J. Graph Theory, 74, 417–24.\n\n\n---. (2016): “Hitting forbidden minors: Approximation and kernelization,” SIAM J. Discret. Math., 30, 383–410.\n\n\nGaspers, S., N. Misra, S. Ordyniak, S. Szeider, and S. Zivný. (2017): “Backdoors into heterogeneous classes of SAT and CSP,” J. Comput. Syst. Sci., 85, 38–56.\n\n\nGoyal, P., N. Misra, F. Panolan, and M. Zehavi. (2015): “Deterministic algorithms for matching and packing problems based on representative sets,” SIAM J. Discret. Math., 29, 1815–36.\n\n\nHeggernes, P., P. van ’t Hof, D. Marx, N. Misra, and Y. Villanger. (2015): “On the parameterized complexity of finding separators with non-hereditary properties,” Algorithmica, 72, 687–713.\n\n\nLokshtanov, D., N. Misra, and S. Saurabh. (2013): “Imbalance is fixed parameter tractable,” Inf. Process. Lett., 113, 714–18.\n\n\nMisra, N., and H. Mittal. (2021): “Imbalance parameterized by twin cover revisited,” Theor. Comput. Sci., 895, 1–15.\n\n\nMisra, N., H. Moser, V. Raman, S. Saurabh, and S. Sikdar. (2013): “The parameterized complexity of unique coverage and its variants,” Algorithmica, 65, 517–44.\n\n\nMisra, N., N. S. Narayanaswamy, V. Raman, and B. S. Shankar. (2013): “Solving min ones 2-sat as fast as vertex cover,” Theor. Comput. Sci., 506, 115–21.\n\n\nMisra, N., F. Panolan, A. Rai, V. Raman, and S. Saurabh. (2019): “Parameterized algorithms for max colorable induced subgraph problem on perfect graphs,” Algorithmica, 81, 26–46.\n\n\nMisra, N., F. Panolan, and S. Saurabh. (2020): “Subexponential algorithm for d-cluster edge deletion: Exception or rule?” J. Comput. Syst. Sci., 113, 150–62.\n\n\nMisra, N., G. Philip, V. Raman, and S. Saurabh. (2012): “On parameterized independent feedback vertex set,” Theor. Comput. Sci., 461, 65–75.\n\n\n---. (2014): “The kernelization complexity of connected domination in graphs with (no) small cycles,” Algorithmica, 68, 504–30.\n\n\nMisra, N., G. Philip, V. Raman, S. Saurabh, and S. Sikdar. (2012): “FPT algorithms for connected feedback vertex set,” J. Comb. Optim., 24, 131–46.\n\n\nMisra, N., V. Raman, and S. Saurabh. (2011): “Lower bounds on kernelization,” Discret. Optim., 8, 110–28.\n\n\nMisra, N., F. A. Rosamond, and M. Zehavi. (2020): “Special issue \"new frontiers in parameterized complexity and algorithms\": Foreward by the guest editors,” Algorithms, 13, 236."
  },
  {
    "objectID": "research/surveys/index.html",
    "href": "research/surveys/index.html",
    "title": "Searchable Surveys",
    "section": "",
    "text": "Searchable Surveys\n\n \n\nI am working on surveys which are formatted as searchable lists of results. Coming soon, hopefully!"
  },
  {
    "objectID": "research/publications-conference.html",
    "href": "research/publications-conference.html",
    "title": "Publications",
    "section": "",
    "text": "Conference Publications\nDBLP ⸱ Conferences ⸱ Journals ⸱ ArXiV ⸱ Other\n\n \n\n\n\nAgrawal, Akanksha, Sathish Govindarajan, and Neeldhara Misra. 2014. “Vertex Cover Gets Faster and Harder on Low Degree Graphs.” In Computing and Combinatorics - 20th International Conference, COCOON 2014, Atlanta, GA, USA, August 4-6, 2014. Proceedings, edited by Zhipeng Cai, Alex Zelikovsky, and Anu G. Bourgeois, 8591:179–90. Lecture Notes in Computer Science. Springer.\n\n\nAmbalath, Abhimanyu M., Radheshyam Balasundaram, Chintan Rao H., Venkata Koppula, Neeldhara Misra, Geevarghese Philip, and M. S. Ramanujan. 2010. “On the Kernelization Complexity of Colorful Motifs.” In Parameterized and Exact Computation - 5th International Symposium, IPEC 2010, Chennai, India, December 13-15, 2010. Proceedings, edited by Venkatesh Raman and Saket Saurabh, 6478:14–25. Lecture Notes in Computer Science. Springer.\n\n\nAravind, N. R., Neeldhara Misra, and Harshil Mittal. 2022. “Chess Is Hard Even for a Single Player.” In 11th International Conference on Fun with Algorithms, FUN 2022, May 30 to June 3, 2022, Island of Favignana, Sicily, Italy, edited by Pierre Fraigniaud and Yushi Uno, 226:5:1–20. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\nArumugam, S., K. Raja Chandrasekar, Neeldhara Misra, Geevarghese Philip, and Saket Saurabh. 2011. “Algorithmic Aspects of Dominator Colorings in Graphs.” In Combinatorial Algorithms - 22nd International Workshop, IWOCA 2011, Victoria, BC, Canada, July 20-22, 2011, Revised Selected Papers, edited by Costas S. Iliopoulos and William F. Smyth, 7056:19–30. Lecture Notes in Computer Science. Springer.\n\n\nAshok, Pradeesha, Sudeshna Kolay, Neeldhara Misra, and Saket Saurabh. 2015. “Unique Covering Problems with Geometric Sets.” In Computing and Combinatorics - 21st International Conference, COCOON 2015, Beijing, China, August 4-6, 2015, Proceedings, edited by Dachuan Xu, Donglei Du, and Ding-Zhu Du, 9198:548–58. Lecture Notes in Computer Science. Springer.\n\n\nBanerjee, Sandip, Neeldhara Misra, and Subhas C. Nandy. 2016. “Color Spanning Objects: Algorithms and Hardness Results.” In Algorithms and Discrete Applied Mathematics - Second International Conference, CALDAM 2016, Thiruvananthapuram, India, February 18-20, 2016, Proceedings, edited by Sathish Govindarajan and Anil Maheshwari, 9602:37–48. Lecture Notes in Computer Science. Springer.\n\n\nBilò, Davide, Luciano Gualà, Stefano Leucci, and Neeldhara Misra. 2018. “On the Complexity of Two Dots for Narrow Boards and Few Colors.” In 9th International Conference on Fun with Algorithms, FUN 2018, June 13-15, 2018, La Maddalena, Italy, edited by Hiro Ito, Stefano Leonardi, Linda Pagli, and Giuseppe Prencipe, 100:7:1–15. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\nChoudhari, Jayesh, Anirban Dasgupta, Neeldhara Misra, and M. S. Ramanujan. 2017. “Saving Critical Nodes with Firefighters Is FPT.” In 44th International Colloquium on Automata, Languages, and Programming, ICALP 2017, July 10-14, 2017, Warsaw, Poland, edited by Ioannis Chatzigiannakis, Piotr Indyk, Fabian Kuhn, and Anca Muscholl, 80:135:1–13. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\nDas, Bireswar, Murali Krishna Enduri, Neeldhara Misra, and I. Vinod Reddy. 2017. “On Structural Parameterizations of Graph Motif and Chromatic Number.” In Algorithms and Discrete Applied Mathematics - Third International Conference, CALDAM 2017, Sancoale, Goa, India, February 16-18, 2017, Proceedings, edited by Daya Ram Gaur and N. S. Narayanaswamy, 10156:118–29. Lecture Notes in Computer Science. Springer.\n\n\n———. 2018. “On Structural Parameterizations of Firefighting.” In Algorithms and Discrete Applied Mathematics - 4th International Conference, CALDAM 2018, Guwahati, India, February 15-17, 2018, Proceedings, edited by B. S. Panda and Partha P. Goswami, 10743:221–34. Lecture Notes in Computer Science. Springer.\n\n\nDayal, Pratyush, and Neeldhara Misra. 2019. “Deleting to Structured Trees.” In Computing and Combinatorics - 25th International Conference, COCOON 2019, Xi’an, China, July 29-31, 2019, Proceedings, edited by Ding-Zhu Du, Zhenhua Duan, and Cong Tian, 11653:128–39. Lecture Notes in Computer Science. Springer.\n\n\nDey, Palash, Prachi Goyal, and Neeldhara Misra. 2014. “UNO Gets Easier for a Single Player.” In Fun with Algorithms - 7th International Conference, FUN 2014, Lipari Island, Sicily, Italy, July 1-3, 2014. Proceedings, edited by Alfredo Ferro, Fabrizio Luccio, and Peter Widmayer, 8496:147–57. Lecture Notes in Computer Science. Springer.\n\n\nDey, Palash, and Neeldhara Misra. 2016a. “Elicitation for Preferences Single Peaked on Trees.” In Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence, IJCAI 2016, New York, NY, USA, 9-15 July 2016, edited by Subbarao Kambhampati, 215–21. IJCAI/AAAI Press.\n\n\n———. 2016b. “Preference Elicitation for Single Crossing Domain.” In Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence, IJCAI 2016, New York, NY, USA, 9-15 July 2016, edited by Subbarao Kambhampati, 222–28. IJCAI/AAAI Press.\n\n\n———. 2017. “On the Exact Amount of Missing Information That Makes Finding Possible Winners Hard.” In 42nd International Symposium on Mathematical Foundations of Computer Science, MFCS 2017, August 21-25, 2017 - Aalborg, Denmark, edited by Kim G. Larsen, Hans L. Bodlaender, and Jean-François Raskin, 83:57:1–14. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\nDey, Palash, Neeldhara Misra, and Y. Narahari. 2015a. “Detecting Possible Manipulators in Elections.” In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems, AAMAS 2015, Istanbul, Turkey, May 4-8, 2015, edited by Gerhard Weiss, Pinar Yolum, Rafael H. Bordini, and Edith Elkind, 1441–50. ACM.\n\n\n———. 2015b. “Kernelization Complexity of Possible Winner and Coalitional Manipulation Problems in Voting.” In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems, AAMAS 2015, Istanbul, Turkey, May 4-8, 2015, edited by Gerhard Weiss, Pinar Yolum, Rafael H. Bordini, and Edith Elkind, 87–96. ACM.\n\n\n———. 2016a. “Complexity of Manipulation with Partial Information in Voting.” In Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence, IJCAI 2016, New York, NY, USA, 9-15 July 2016, edited by Subbarao Kambhampati, 229–35. IJCAI/AAAI Press.\n\n\n———. 2016b. “Frugal Bribery in Voting.” In Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence, February 12-17, 2016, Phoenix, Arizona, USA, edited by Dale Schuurmans and Michael P. Wellman, 2466–72. AAAI Press.\n\n\n———. 2017. “Parameterized Dichotomy of Choosing Committees Based on Approval Votes in the Presence of Outliers.” In Proceedings of the 16th Conference on Autonomous Agents and MultiAgent Systems, AAMAS 2017, são Paulo, Brazil, May 8-12, 2017, edited by Kate Larson, Michael Winikoff, Sanmay Das, and Edmund H. Durfee, 42–50. ACM.\n\n\nDey, Palash, Neeldhara Misra, Swaprava Nath, and Garima Shakya. 2019. “A Parameterized Perspective on Protecting Elections.” In Proceedings of the Twenty-Eighth International Joint Conference on Artificial Intelligence, IJCAI 2019, Macao, China, August 10-16, 2019, edited by Sarit Kraus, 238–44. ijcai.org.\n\n\nFellows, Michael R., Daniel Lokshtanov, Neeldhara Misra, Frances A. Rosamond, and Saket Saurabh. 2008. “Graph Layout Problems Parameterized by Vertex Cover.” In Algorithms and Computation, 19th International Symposium, ISAAC 2008, Gold Coast, Australia, December 15-17, 2008. Proceedings, edited by Seok-Hee Hong, Hiroshi Nagamochi, and Takuro Fukunaga, 5369:294–305. Lecture Notes in Computer Science. Springer.\n\n\nFomin, Fedor V., Daniel Lokshtanov, Neeldhara Misra, Geevarghese Philip, and Saket Saurabh. 2011. “Hitting Forbidden Minors: Approximation and Kernelization.” In 28th International Symposium on Theoretical Aspects of Computer Science, STACS 2011, March 10-12, 2011, Dortmund, Germany, edited by Thomas Schwentick and Christoph Dürr, 9:189–200. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\nFomin, Fedor V., Daniel Lokshtanov, Neeldhara Misra, M. S. Ramanujan, and Saket Saurabh. 2015. “Solving d-SAT via Backdoors to Small Treewidth.” In Proceedings of the Twenty-Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2015, San Diego, CA, USA, January 4-6, 2015, edited by Piotr Indyk, 630–41. SIAM.\n\n\nFomin, Fedor V., Daniel Lokshtanov, Neeldhara Misra, and Saket Saurabh. 2012. “Planar f-Deletion: Approximation, Kernelization and Optimal FPT Algorithms.” In 53rd Annual IEEE Symposium on Foundations of Computer Science, FOCS 2012, New Brunswick, NJ, USA, October 20-23, 2012, 470–79. IEEE Computer Society.\n\n\nFomin, Fedor V., Saket Saurabh, and Neeldhara Misra. 2015. “Graph Modification Problems: A Modern Perspective.” In Frontiers in Algorithmics - 9th International Workshop, FAW 2015, Guilin, China, July 3-5, 2015, Proceedings, edited by Jianxin Wang and Chee-Keng Yap, 9130:3–6. Lecture Notes in Computer Science. Springer.\n\n\nGaspers, Serge, Neeldhara Misra, Sebastian Ordyniak, Stefan Szeider, and Stanislav Zivný. 2014. “Backdoors into Heterogeneous Classes of SAT and CSP.” In Proceedings of the Twenty-Eighth AAAI Conference on Artificial Intelligence, July 27 -31, 2014, Québec City, Québec, Canada, edited by Carla E. Brodley and Peter Stone, 2652–58. AAAI Press.\n\n\nGowda, Kishen N., Neeldhara Misra, and Vraj Patel. 2020. “A Parameterized Perspective on Attacking and Defending Elections.” In Combinatorial Algorithms - 31st International Workshop, IWOCA 2020, Bordeaux, France, June 8-10, 2020, Proceedings, edited by Leszek Gasieniec, Ralf Klasing, and Tomasz Radzik, 12126:277–88. Lecture Notes in Computer Science. Springer.\n\n\nGoyal, Prachi, Vikram Kamat, and Neeldhara Misra. 2013. “On the Parameterized Complexity of the Maximum Edge 2-Coloring Problem.” In Mathematical Foundations of Computer Science 2013 - 38th International Symposium, MFCS 2013, Klosterneuburg, Austria, August 26-30, 2013. Proceedings, edited by Krishnendu Chatterjee and Jirı́ Sgall, 8087:492–503. Lecture Notes in Computer Science. Springer.\n\n\nGoyal, Prachi, Neeldhara Misra, and Fahad Panolan. 2013. “Faster Deterministic Algorithms for r-Dimensional Matching Using Representative Sets.” In IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science, FSTTCS 2013, December 12-14, 2013, Guwahati, India, edited by Anil Seth and Nisheeth K. Vishnoi, 24:237–48. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\nGupta, Manoj, Hitesh Kumar, and Neeldhara Misra. 2019. “On the Complexity of Optimal Matching Reconfiguration.” In SOFSEM 2019: Theory and Practice of Computer Science - 45th International Conference on Current Trends in Theory and Practice of Computer Science, Nový Smokovec, Slovakia, January 27-30, 2019, Proceedings, edited by Barbara Catania, Rastislav Královic, Jerzy R. Nawrocki, and Giovanni Pighizzini, 11376:221–33. Lecture Notes in Computer Science. Springer.\n\n\nHeggernes, Pinar, Pim van ’t Hof, Dániel Marx, Neeldhara Misra, and Yngve Villanger. 2012. “On the Parameterized Complexity of Finding Separators with Non-Hereditary Properties.” In Graph-Theoretic Concepts in Computer Science - 38th International Workshop, WG 2012, Jerusalem, Israel, June 26-28, 2012, Revised Selcted Papers, edited by Martin Charles Golumbic, Michal Stern, Avivit Levy, and Gila Morgenstern, 7551:332–43. Lecture Notes in Computer Science. Springer.\n\n\nKalyanakrishnan, Shivaram, Neeldhara Misra, and Aditya Gopalan. 2016. “Randomised Procedures for Initialising and Switching Actions in Policy Iteration.” In Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence, February 12-17, 2016, Phoenix, Arizona, USA, edited by Dale Schuurmans and Michael P. Wellman, 3145–51. AAAI Press.\n\n\nKamat, Vikram, and Neeldhara Misra. 2015. “Parameterized Algorithms and Kernels for 3-Hitting Set with Parity Constraints.” In Algorithms and Complexity - 9th International Conference, CIAC 2015, Paris, France, May 20-22, 2015. Proceedings, edited by Vangelis Th. Paschos and Peter Widmayer, 9079:249–60. Lecture Notes in Computer Science. Springer.\n\n\nKaur, Chamanvir, and Neeldhara Misra. 2020. “On the Parameterized Complexity of Spanning Trees with Small Vertex Covers.” In Algorithms and Discrete Applied Mathematics - 6th International Conference, CALDAM 2020, Hyderabad, India, February 13-15, 2020, Proceedings, edited by Manoj Changat and Sandip Das, 12016:427–38. Lecture Notes in Computer Science. Springer.\n\n\nLokshtanov, Daniel, Neeldhara Misra, Geevarghese Philip, M. S. Ramanujan, and Saket Saurabh. 2013. “Hardness of r-Dominating Set on Graphs of Diameter (r + 1).” In Parameterized and Exact Computation - 8th International Symposium, IPEC 2013, Sophia Antipolis, France, September 4-6, 2013, Revised Selected Papers, edited by Gregory Z. Gutin and Stefan Szeider, 8246:255–67. Lecture Notes in Computer Science. Springer.\n\n\nLokshtanov, Daniel, Neeldhara Misra, and Saket Saurabh. 2010. “Imbalance Is Fixed Parameter Tractable.” In Computing and Combinatorics, 16th Annual International Conference, COCOON 2010, Nha Trang, Vietnam, July 19-21, 2010. Proceedings, edited by My T. Thai and Sartaj Sahni, 6196:199–208. Lecture Notes in Computer Science. Springer.\n\n\n———. 2012. “Kernelization - Preprocessing with a Guarantee.” In The Multivariate Algorithmic Revolution and Beyond - Essays Dedicated to Michael r. Fellows on the Occasion of His 60th Birthday, edited by Hans L. Bodlaender, Rod Downey, Fedor V. Fomin, and Dániel Marx, 7370:129–61. Lecture Notes in Computer Science. Springer.\n\n\n———. 2013. “On the Hardness of Eliminating Small Induced Subgraphs by Contracting Edges.” In Parameterized and Exact Computation - 8th International Symposium, IPEC 2013, Sophia Antipolis, France, September 4-6, 2013, Revised Selected Papers, edited by Gregory Z. Gutin and Stefan Szeider, 8246:243–54. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara. 2016. “Two Dots Is NP-Complete.” In 8th International Conference on Fun with Algorithms, FUN 2016, June 8-10, 2016, La Maddalena, Italy, edited by Erik D. Demaine and Fabrizio Grandoni, 49:24:1–12. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\n———. 2018. “On the Parameterized Complexity of Colorful Components and Related Problems.” In Combinatorial Algorithms - 29th International Workshop, IWOCA 2018, Singapore, July 16-19, 2018, Proceedings, edited by Costas S. Iliopoulos, Hon Wai Leong, and Wing-Kin Sung, 10979:237–49. Lecture Notes in Computer Science. Springer.\n\n\n———. 2019. “On the Parameterized Complexity of Party Nominations.” In Algorithmic Decision Theory - 6th International Conference, ADT 2019, Durham, NC, USA, October 25-27, 2019, Proceedings, edited by Sasa Pekec and Kristen Brent Venable, 11834:112–25. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, and Harshil Mittal. 2020. “Imbalance Parameterized by Twin Cover Revisited.” In Computing and Combinatorics - 26th International Conference, COCOON 2020, Atlanta, GA, USA, August 29-31, 2020, Proceedings, edited by Donghyun Kim, R. N. Uma, Zhipeng Cai, and Dong Hoon Lee, 12273:162–73. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Harshil Mittal, and Aditi Sethia. 2020. “Red-Blue Point Separation for Points on a Circle.” In Proceedings of the 32nd Canadian Conference on Computational Geometry, CCCG 2020, August 5-7, 2020, University of Saskatchewan, Saskatoon, Saskatchewan, Canada, edited by J. Mark Keil and Debajyoti Mondal, 266–72.\n\n\nMisra, Neeldhara, Arshed Nabeel, and Harman Singh. 2015. “On the Parameterized Complexity of Minimax Approval Voting.” In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems, AAMAS 2015, Istanbul, Turkey, May 4-8, 2015, edited by Gerhard Weiss, Pinar Yolum, Rafael H. Bordini, and Edith Elkind, 97–105. ACM.\n\n\nMisra, Neeldhara, N. S. Narayanaswamy, Venkatesh Raman, and Bal Sri Shankar. 2010. “Solving Minones-2-Sat as Fast as Vertex Cover.” In Mathematical Foundations of Computer Science 2010, 35th International Symposium, MFCS 2010, Brno, Czech Republic, August 23-27, 2010. Proceedings, edited by Petr Hlinený and Antonı́n Kucera, 6281:549–55. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, and Debanuj Nayak. 2022. “On Fair Division with Binary Valuations Respecting Social Networks.” In Algorithms and Discrete Applied Mathematics - 8th International Conference, CALDAM 2022, Puducherry, India, February 10-12, 2022, Proceedings, edited by Niranjan Balachandran and R. Inkulu, 13179:265–78. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Sebastian Ordyniak, Venkatesh Raman, and Stefan Szeider. 2013. “Upper and Lower Bounds for Weak Backdoor Set Detection.” In Theory and Applications of Satisfiability Testing - SAT 2013 - 16th International Conference, Helsinki, Finland, July 8-12, 2013. Proceedings, edited by Matti Järvisalo and Allen Van Gelder, 7962:394–402. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Fahad Panolan, Ashutosh Rai, Venkatesh Raman, and Saket Saurabh. 2013. “Parameterized Algorithms for Max Colorable Induced Subgraph Problem on Perfect Graphs.” In Graph-Theoretic Concepts in Computer Science - 39th International Workshop, WG 2013, lübeck, Germany, June 19-21, 2013, Revised Papers, edited by Andreas Brandstädt, Klaus Jansen, and Rüdiger Reischuk, 8165:370–81. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Fahad Panolan, and Saket Saurabh. 2013. “Subexponential Algorithm for d-Cluster Edge Deletion: Exception or Rule?” In Mathematical Foundations of Computer Science 2013 - 38th International Symposium, MFCS 2013, Klosterneuburg, Austria, August 26-30, 2013. Proceedings, edited by Krishnendu Chatterjee and Jirı́ Sgall, 8087:679–90. Lecture Notes in Computer Science. Springer.\n\n\n———. 2019. “On the Parameterized Complexity of Edge-Linked Paths.” In Computer Science - Theory and Applications - 14th International Computer Science Symposium in Russia, CSR 2019, Novosibirsk, Russia, July 1-5, 2019, Proceedings, edited by René van Bevern and Gregory Kucherov, 11532:286–98. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Geevarghese Philip, Venkatesh Raman, and Saket Saurabh. 2010. “The Effect of Girth on the Kernelization Complexity of Connected Dominating Set.” In IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science, FSTTCS 2010, December 15-18, 2010, Chennai, India, edited by Kamal Lodaya and Meena Mahajan, 8:96–107. LIPIcs. Schloss Dagstuhl - Leibniz-Zentrum für Informatik.\n\n\n———. 2011. “On Parameterized Independent Feedback Vertex Set.” In Computing and Combinatorics - 17th Annual International Conference, COCOON 2011, Dallas, TX, USA, August 14-16, 2011. Proceedings, edited by Bin Fu and Ding-Zhu Du, 6842:98–109. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Geevarghese Philip, Venkatesh Raman, Saket Saurabh, and Somnath Sikdar. 2010. “FPT Algorithms for Connected Feedback Vertex Set.” In WALCOM: Algorithms and Computation, 4th International Workshop, WALCOM 2010, Dhaka, Bangladesh, February 10-12, 2010. Proceedings, edited by Md. Saidur Rahman and Satoshi Fujita, 5942:269–80. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Venkatesh Raman, Saket Saurabh, and Somnath Sikdar. 2009. “The Budgeted Unique Coverage Problem and Color-Coding.” In Computer Science - Theory and Applications, Fourth International Computer Science Symposium in Russia, CSR 2009, Novosibirsk, Russia, August 18-23, 2009. Proceedings, edited by Anna E. Frid, Andrey Morozov, Andrey Rybalchenko, and Klaus W. Wagner, 5675:310–21. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, and Piyush Rathi. 2019. “The Parameterized Complexity of Dominating Set and Friends Revisited for Structured Graphs.” In Computer Science - Theory and Applications - 14th International Computer Science Symposium in Russia, CSR 2019, Novosibirsk, Russia, July 1-5, 2019, Proceedings, edited by René van Bevern and Gregory Kucherov, 11532:299–310. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, and I. Vinod Reddy. 2017. “The Parameterized Complexity of Happy Colorings.” In Combinatorial Algorithms - 28th International Workshop, IWOCA 2017, Newcastle, NSW, Australia, July 17-21, 2017, Revised Selected Papers, edited by Ljiljana Brankovic, Joe Ryan, and William F. Smyth, 10765:142–53. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, and Aditi Sethia. 2020. “Fair Division Is Hard Even for Amicable Agents.” In Proceedings of the 21st Italian Conference on Theoretical Computer Science, Ischia, Italy, September 14-16, 2020, edited by Gennaro Cordasco, Luisa Gargano, and Adele A. Rescigno, 2756:202–7. CEUR Workshop Proceedings. CEUR-WS.org.\n\n\n———. 2021. “Fair Division Is Hard Even for Amicable Agents.” In SOFSEM 2021: Theory and Practice of Computer Science - 47th International Conference on Current Trends in Theory and Practice of Computer Science, SOFSEM 2021, Bolzano-Bozen, Italy, January 25-29, 2021, Proceedings, edited by Tomás Bures, Riccardo Dondi, Johann Gamper, Giovanna Guerrini, Tomasz Jurdzinski, Claus Pahl, Florian Sikora, and Prudence W. H. Wong, 12607:421–30. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, and Chinmay Sonar. 2019. “Robustness Radius for Chamberlin-Courant on Restricted Domains.” In SOFSEM 2019: Theory and Practice of Computer Science - 45th International Conference on Current Trends in Theory and Practice of Computer Science, Nový Smokovec, Slovakia, January 27-30, 2019, Proceedings, edited by Barbara Catania, Rastislav Královic, Jerzy R. Nawrocki, and Giovanni Pighizzini, 11376:341–53. Lecture Notes in Computer Science. Springer.\n\n\nMisra, Neeldhara, Chinmay Sonar, and P. R. Vaidyanathan. 2017. “On the Complexity of Chamberlin-Courant on Almost Structured Profiles.” In Algorithmic Decision Theory - 5th International Conference, ADT 2017, Luxembourg, Luxembourg, October 25-27, 2017, Proceedings, edited by Jörg Rothe, 10576:124–38. Lecture Notes in Computer Science. Springer.\n\n\nRajgopal, Ninad, Pradeesha Ashok, Sathish Govindarajan, Abhijit Khopkar, and Neeldhara Misra. 2013. “Hitting and Piercing Rectangles Induced by a Point Set.” In Computing and Combinatorics, 19th International Conference, COCOON 2013, Hangzhou, China, June 21-23, 2013. Proceedings, edited by Ding-Zhu Du and Guochuan Zhang, 7936:221–32. Lecture Notes in Computer Science. Springer.\n\n\nRoy, Aniket Basu, Sathish Govindarajan, Neeldhara Misra, and Shreyas Shetty. 2014. “On the d-Runaway Rectangle Escape Problem.” In Proceedings of the 26th Canadian Conference on Computational Geometry, CCCG 2014, Halifax, Nova Scotia, Canada, 2014. Carleton University, Ottawa, Canada.\n\n\nSonar, Chinmay, Palash Dey, and Neeldhara Misra. 2020. “On the Complexity of Winner Verification and Candidate Winner for Multiwinner Voting Rules.” In Proceedings of the Twenty-Ninth International Joint Conference on Artificial Intelligence, IJCAI 2020, edited by Christian Bessiere, 89–95. ijcai.org.\n\n\nVaish, Rohit, Neeldhara Misra, Shivani Agarwal, and Avrim Blum. 2016. “On the Computational Hardness of Manipulating Pairwise Voting Rules.” In Proceedings of the 2016 International Conference on Autonomous Agents & Multiagent Systems, Singapore, May 9-13, 2016, edited by Catholijn M. Jonker, Stacy Marsella, John Thangarajah, and Karl Tuyls, 358–67. ACM."
  },
  {
    "objectID": "poems.html",
    "href": "poems.html",
    "title": "Poems",
    "section": "",
    "text": "This page collects a small number of attempts at what I thought was poetry at the time I wrote it. This was done when I was even more of a kid than I am now. You can subscribe to a feed for this series by clicking here, although I don’t expect to add much :)\nI put these up thanks to being in a foolish inspired mood, having read How to Write One Song (c.f a related podcast).\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nOn the Fence\n\n\n\n\n\n\n\n\n\nApr 23, 2012\n\n\n0 min\n\n\n\n\n\n\n\n\nSprinkles of the Sky\n\n\n\n\n\n\n\n\n\nJan 5, 2011\n\n\n0 min\n\n\n\n\n\n\n\n\nSeek\n\n\n\n\n\n\n\n\n\nApr 3, 2007\n\n\n0 min\n\n\n\n\n\n\n\n\nBloom\n\n\n\n\n\n\n\n\n\nFeb 3, 2005\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "materials/cpnotes/index.html",
    "href": "materials/cpnotes/index.html",
    "title": "Getting Started with Competitive Programming",
    "section": "",
    "text": "Lecture notes coming soon!"
  },
  {
    "objectID": "materials/dsanotes/introduction/index.html",
    "href": "materials/dsanotes/introduction/index.html",
    "title": "Data Structures and Structured Data",
    "section": "",
    "text": "Link to Slides"
  },
  {
    "objectID": "materials/dsanotes/introduction/index.html#wdym-data-structures",
    "href": "materials/dsanotes/introduction/index.html#wdym-data-structures",
    "title": "Data Structures and Structured Data",
    "section": "WDYM, data structures?",
    "text": "WDYM, data structures?\nWe will keep it casual and skip formal definitions for now. 👀\nData structures give us principled ways to stow away information. It’s important to do this nicely based on what you want to do with the information.\nFor example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\n\n\n\n\n\n\nThroughout this course, we will try to make sense of trade-offs.\n\n\n\nWe’ll equip ourselves with ideas that will ultimately help you decide questions like: how do you organise the clothes in your cupboard?\n\n\n\n\n\n\n\n\n\nThrow ’em in, nobody’s looking\nKeep it where you can find it later\n\n\n\n\nTime to process\nNegligible\nForever\n\n\nTime to retrieve\nForever\nNegligible\n\n\n\nTable 1. No free lunches.\n\n\n\n\n\n\n\n\nThis is in fact a useful framing!\n\n\n\n\n\n\n\n\nTable 1 Revisited. No Free Lunches"
  },
  {
    "objectID": "materials/dsanotes/introduction/index.html#representing-polynomials",
    "href": "materials/dsanotes/introduction/index.html#representing-polynomials",
    "title": "Data Structures and Structured Data",
    "section": "Representing Polynomials",
    "text": "Representing Polynomials\nLet’s say that you are spending a fine evening watching the #LockdownMath playlist from 3blue1brown. The first episode happens to be all about solving quadratics:\n\n\n\nA screenshot from #LockdownMath showing Grant Sanderson solving quadratics.\n\n\nNow, it’s quite natural to want to “write a program”, so to speak, that can take a quadratic equation such as x^2 - 7x + 12 as input and output its two roots.\nGiven that programs running on your phone are able to make suggestions, even if dubious, for what series to binge-watch next on Netflix, finding roots of quadratics should be a fairly benign exercise.\nYou might recall that most programs let you declare variables that can hold on to specific types of information, for instance: numbers, strings, and so forth. Our input doesn’t “look” like a number, so it would be a fair take to simply store it as a string:\npx = \"x^2 - 7x + 12\";\n\n\n\n\n\n\nNow…\n\n\n\n\n\n\n\n\n\nWhile this is a perfectly faithful representation, you can imagine that it would be slightly painful to work with. You would have to write some code that can “pull out” the parts of the string that represent the numbers you care about (in this example, b = -7 and c = 12), so that you can move on to your calculation, which is an expression involving numbers.\nGiven that a quadratic with the leading coefficient normalized to one is uniquely determined by two numbers, it seems a lot simpler to directly represent the polynomial as two integers instead:\npx_b = -7\npx_c = 12\nYou might appreciate that this saves us quite some circus and we can quite directly get to the computation we’re interested in. What if you cared about higher order polynomials? You may want to solve them (even if you run out of expressions for solutions pretty quickly, you might be interested in other ways of getting to the roots), or manipulate them in other ways (for example, by adding or multiplying them).\n\n\n\n\n\n\nFood for thought.\n\n\n\nHow would you represent higher-order polynomials? What about multivariate polynomials? Is there a way that you might be able to capture an algebraic expression for a polynomial without either using strings or just the coefficients?"
  },
  {
    "objectID": "materials/dsanotes/introduction/index.html#representing-a-game---i",
    "href": "materials/dsanotes/introduction/index.html#representing-a-game---i",
    "title": "Data Structures and Structured Data",
    "section": "Representing a Game - I",
    "text": "Representing a Game - I\nThe game of 100 goes like this: I pick a number between 1 and 10, and then you pick one within the next ten numbers, and on and on. The first person to reach 100 wins.\n\n\n\n\n\n\nRecall from class and/or figure out that…\n\n\n\n\n\n\n\n\n\n\n\nSPOILER ALERT\n\n\n\n\n\n...whoever starts has a way of winning the game:\n\n    0. To begin with, I say 1.\n    1. No matter what number you pick, I can say 12.\n    2. No matter what number you pick, I can say 23.\n    3. No matter what number you pick, I can say 34.\n    4. No matter what number you pick, I can say 45.\n    5. No matter what number you pick, I can say 56.\n    6. No matter what number you pick, I can say 67.\n    7. No matter what number you pick, I can say 78.\n    8. No matter what number you pick, I can say 89.\n    9. No matter what number you pick, I can say 100.\n\n\n\n\n\n\nWhat if you want to write a program that mimics the winning strategy?\nNote that this game can go on for at most a 100 steps, and in fact exactly 20 steps (or ten rounds) when you employ said winning strategy. So one way to go about this is to declare 20 variables to track the 20 numbers exchanged between the players. But a moment’s reflection may reveal that you don’t need to store anything at all.\n\n\n\n\n\n\nExercise\n\n\n\nCan you write a program that makes the first move, prompts the user for their moves on their turn, uses the winning strategy discussed above, and uses no variables for explicit storage?"
  },
  {
    "objectID": "materials/dsanotes/introduction/index.html#representing-a-game---ii",
    "href": "materials/dsanotes/introduction/index.html#representing-a-game---ii",
    "title": "Data Structures and Structured Data",
    "section": "Representing a Game - II",
    "text": "Representing a Game - II\nIf you missed the first class you haven’t played the Game of Trust, you are welcome to take a break and experience it now. Let’s recollect the setup:\n\n\n\n\n\nIllustration from an implementation by Nicky Case.\n\n\nSuppose you want to implement your own version of this game, where the program responds to inputs from the user and plays according to a specific, pre-meditated strategy. Remember you have seen some strategies already:\n\n\n\n\n\nA second illustration from the same implementation by Nicky Case.\n\n\nWe reproduce these strategies below:\n\n\n\n\n\n\nPlayer Strategies\n\n\n\n\nCOPYCAT: Hello! I start with Cooperate, and afterwards, I just copy whatever you did in the last round. Meow.\nALWAYS CHEAT: The strong shall eat the weak.\nALWAYS COOPERATE: Let’s be best friends <3\nGRUDGER: Listen, pardner. I’ll start cooperatin’, and keep cooperatin’, but if y’all ever cheat me, I’LL CHEAT YOU BACK TIL THE END OF TARNATION.\nDETECTIVE: First: I analyze you. start: Cooperate, Cheat, Cooperate, Cooperate. If you cheat back, I’ll act like Copycat. If you never cheat back, I’ll act like Always Cheat, to exploit you. Elementary, my dear Watson.\n\n\n\nLet’s say that your program is designed to play 5 rounds and that your program is playing the copycat strategy. To begin with, you might want to declare a couple of variables to keep track of the scores of the players, and ten variables to track the moves of both players in each round. With this, your code may start out looking like this:\nmy_points = 0\nuser_points = 0\n\nuser_move_1 = input(\"Input 1 for Cooperate and 0 for Cheat.\")\n\n//Sanity check input:\nif(user_move_1 != 1 and user_move_1 != 0):\n    express disappointment and abort\n// My first move is to cooperate:\nmy_points += -1\nuser_points += 3\n\nif(user_move_1):\n    my_points += 3\n    user_points -= 1\nNow your next move is determined by the value of user_move_1, so you might proceed as follows.\nuser_move_2 = input(\"Input 1 for Cooperate and 0 for Cheat.\")\n\n//Sanity check input:\nif(user_move_2 != 1 and user_move_2 != 0):\n    express disappointment and abort\n// My next move is based on the user's first:\nif(user_move_1):\n    my_points += -1\n    user_points += 3\n\nif(user_move_2):\n    my_points += 3\n    user_points -= 1\n…and so on and on, you get the drift.\n\n\n\n\n\n\nFood for thought.\n\n\n\nDo you really need ten variables to track the game? If you were instead implementing the always cheat or always cooperate strategy, how many variables would you need? What about the strategies of the grudger and the detective?\n\n\nNow, suppose we come up with our own player, whom we call the majority mover. This player looks at your entire game history, and cooperates if you have cooperated more than you have cheated, and cheats if you have cheated more than you have cooperated, and acts randomly otherwise.\nIt seems like implementing the majority mover strategy would really require keeping track of everything. Or would it? You might observe at this point that it’s enough to keep track of two counts: the number of rounds and the number of moves where the user has cheated: note that it does not matter when the cheats happened in the history of the game.\n\n\n\n\n\n\nYou could also…\n\n\n\n\n\n…track the number of cooperate moves along with the number of rounds; or the number of cheat moves and the number of cooperate moves.\nAt this point it’s a matter of taste :)\n\n\n\nHow about a completely random player? This one chooses a number K between 1 and N uniformly at random (let’s not worry about how this is done for now, because that would be a story for another day), where N is the number of rounds played so far; and mimics the other player’s Kth move. To implement this strategy, you really would need to keep track of the user’s entire game history with the five variables, and also assume that you have a way of picking a number at random.\nFinally, consider that instead of fixing your program to play five rounds — 🥱 — you want to politely ask the user how many rounds they want to play.\n\n\n\n\n\n\nAfter all…\n\n\n\n\n\n\n\n\n\nWell, for the first few players, this is just a matter of upgrading your for loop (which you should have switched to already when you realised that you don’t need all. those. variables.) to use N: and you are done.\n\n\n\n\n\n\nFood for thought.\n\n\n\nHow will you implement this version if you are working with our latest player? If you happen to have a very enthusiastic user who asks for half a million rounds, would you be able to declare that many variables all at once, while your program is running? Notably, you don’t know what the user is going to say ahead of time!"
  },
  {
    "objectID": "materials/dsanotes/introduction/index.html#representing-a-subset-of-a-deck-of-cards",
    "href": "materials/dsanotes/introduction/index.html#representing-a-subset-of-a-deck-of-cards",
    "title": "Data Structures and Structured Data",
    "section": "Representing a subset of a deck of cards",
    "text": "Representing a subset of a deck of cards\nIf you are implementing a card1 game, you might need a mechanism for keeping track of “hands”, or various subsets of cards. Let’s say a hand is a subset of cards. For many games, you would need the ability to be able to quickly:\n\ntell if a particular card belongs to a hand or not,\nadd a card to a hand,\nremove a card from a hand, and\nreplace a card in a hand with another one.\n\nOne way to meet these requirements is to declare a collection of 52 boolean (i.e, true/false or 0/1) variables to represent the hand: the cards in the hand are set to true while cards that don’t belong are set to false.\n\n\n\n\n\n\nFood for thought.\n\n\n\nWhat do you like about this method? What don’t you like about it?\n\n\nHere’a another way, though: you could agree on a notation for the cards in the deck: e.g, a standard one is to use a number, A/J/Q/K to denote the value, and S/C/D/H to denote the suit, so every card can be represented as a pair of characters. For example the Ace of Diamonds would be AD, the five of spades would be 5S and the King of Hearts would be KH. With this in place, you could represent a hand also by simply concatenating these string representations of the cards in the hand.\n\n\n\n\n\n\nFood for thought.\n\n\n\nWhat do you like about this method? What don’t you like about it?\n\n\nNow for this toy example, if you were to implement both methods and clock the time taken to implement the four operations above, you may not notice a major difference. However, for actual applications, you may be in a situation where your subsets (here, the “hands”) may be coming from a large universe (here, the “deck”). On the other hand, you may have a very large number of operations to take care of efficiently.\n\n\n\n\n\n\nFood for thought.\n\n\n\nAre there other ways that you might want to store this kind of information, given the things you want to do are as enlisted above?\n\n\nYour choice of method will again be driven by the requirements: the one thing to keep in mind is that you cannot have it all, but we can usually get pretty damn close!"
  },
  {
    "objectID": "materials/dsanotes/23-trees/index.html",
    "href": "materials/dsanotes/23-trees/index.html",
    "title": "Balanced BSTs",
    "section": "",
    "text": "Suppose we want to store a collection of distinct integers (henceforth, we call them keys, for no good reason except that I can refer to them with the 🔑 emoji) with support for:\n\ninsert(x) insert x into the collection if it is not there already\ndelete(x) deleting x from the collection if it is present\nsearch(x) determine if x belongs to the collection\n\nThe motivation for building binary search trees is to capture a happy middle-ground between the following extremes:\n\nif I store my data fully sorted, then it is hard to insert and delete1, but easy to search2, but\nif I store my data in chaos-mode, then it is easy to insert and delete3, but hard to search4.\n\nBinary search trees are the natural answer to the question:\n\nIf binary search was a data structure, what would it look like?\n\nTo achieve O(\\log n) complexity for search and insertion (and deletion), we want a relatively “loose” sense of structure on the data: it should be fluid enough for insertion and deletion to be manageable, but meaningful enough for searches to be fast.\nOne way to do this is to store everything in a binary tree where every node u stores a key k_u with the assurance that:\n\nall nodes that belong to the subtree rooted at the right child of u have keys whose values are greater than k_u;\nall nodes that belong to the subtree rooted at the left child of u have keys whose values are smaller than k_u.\n\nWith this structure in place, search(x) works exactly as you would expect: if the binary search tree is rooted at r, check if x equals k_r: if yes, then we’ve found what we are looking for, so abort and celebrate; on the other hand, if not, then repeat the following until you’ve either found x or have run out of elements in the tree:\n\nif x is greater than k_r, continue searching in the 🌳 rooted at the right child of r\nif x is smaller than k_r, continue searching in the 🌳 rooted at the left child of r\n\nNotice that if you hit a leaf without a match, you can safely conclude that x does not belong to the collection. Also notice that the complexity of search is proportional to the length of the longest root-to-leaf path in the tree5 in the worst case.\nTo insert(x), first search(x): if x is found, there’s nothing to do; if x is not found, then make note of the leaf where the search stopped — say \\ell: then if x is greater than k_\\ell, introduce a right child of \\ell and assign to it the key value x; on the other hand if x is less than k_\\ell, introduce a left child of \\ell and assign to it the key value x. Notice the tree with the newly added node is still a valid binary search tree.\nWhat about delete(x)? If x is not in the collection, there’s nothing to do. If x does belong to the collection and is associated with a leaf node, then the node can simply be knocked out, no further action required. However, what if the node whose key value is x — say v — is an serious one, with a left and a right child? One possibility is to swap x with an appropriate value ascribed to some leaf node, and then knock out the leaf: which now carries the value of x. Which leaf should we swap with? It’s clear that it can’t be just any leaf: but you could pick the smallest value in the right subtree or the largest value in the left subtree — both of these reside and leaves, and the swaps with them would leave you with a valid BST after the deed is done.\nTo find the smallest value in the right subtree, you can take the right turn from v and then go left until you are stuck. If you prefer the largest value in left subtree instead, take the left turn from v and go right until you are stuck. Either of these should work fine. You can find some examples of deletions in a BST here.\nNotice that the complexity of all three operations are proportional to the height of the tree: so if we can control the height, we control the complexity of these operations! Notice also that the height of a BST — if built by implementing the algorithms above — can be as bad as linear in the number of keys6, which is no good. Play around with this visualization of BSTs to get a feel!"
  },
  {
    "objectID": "materials/dsanotes/23-trees/index.html#trees",
    "href": "materials/dsanotes/23-trees/index.html#trees",
    "title": "Balanced BSTs",
    "section": "(2,3) Trees",
    "text": "(2,3) Trees\nOne way of controlling the height of a BST is to simply demand it: this is called solving a problem by definition :) What if we could insist on having BSTs where the underlying tree structure must have the following additional property:\n\n\nall nodes have either 0 or two children\nall leaves are at the same distance from the root.\n\n\nThis would automatically force the structure of the underlying tree to be complete i.e, if the tree has height h, any node whose distance from the root is less than h must be a branching node (indeed, if not, then it is a leaf by property (1), but then we will have a violation of property (2)). Why is this great? Because if you have n nodes packed into a complete tree of height h, then the height must, in fact, be O(\\log n) — which is what we wanted.\nThere is, however, a small catch with this: such trees may not exist for some values of n, the total number of keys that we are trying to accommodate :( We can fix this in two ways: add some dummy keys with values that either duplicate existing values till we have a feasible number of keys to work with (ugh), or make room for multi-ary search trees (cool!).\nSince we want the elegant approach, let’s push our definition further:\n\n\nall nodes have either 0, two, or three children\nnodes that have two children store one key value and satisfy the standard BST property\nnodes with three children store two key values, say a and b; and further:\n\n\nthe subtree rooted at the left-most child only hosts values smaller than a\nthe subtree rooted at the right-most child only hosts values larger than b\nthe subtree rooted at the middle child only hosts values strictly between a and b\n\n\nall leaves are at the same distance from the root.\n\n\nAdapting search(x) to multi-ary trees is extremely natural.\nIf the tree is rooted at r and r is a node with two children, proceed as before.\nOtherwise, suppose r hosts the values a_r and b_r. Then check if x equals either a_r or b_r: if yes, then we’ve found what we are looking for, so abort and celebrate; on the other hand, if not, then repeat the following until you’ve either found x or have run out of elements in the tree:\n\nif x is greater than b_r, continue searching in the 🌳 rooted at the right-most child of r\nif x is smaller than a_r, continue searching in the 🌳 rooted at the left-mostt child of r\notherwise, continue searching in the 🌳 rooted at the middle child of r\n\nWhat about insert(x)? We search for x as before. If found, there’s nothing to be done. If not, there are two scenarios:\n\nThe search terminates at a leaf that has one key value.\nThe search terminates at a leaf that has two key values.\n\n Note that unlike before, we cannot just have the leaf sprout a child to accommodate the new key value (remember that all leaves have to be at the same distance from the root). So our algorithm pushes upwards, and works as follows:\n\nIf there’s room in the current node (i.e, the node is one with two children or a leaf with one key value), accommodate the new value into that node, reorganizing as necessary. In particular, when a node with two children + one value transforms into one with three children + two values, then the subtrees have to be appropriately reorganized.\nIf there’s no room in the current node, then move up to the parent. If there’s no parent: then you’ve hit the root! If the root turns out to be crowded too, then you’ll have to split the root (note that this causes the height of the tree to increase, but does not happen too often), but if the root has room then follow the procedure in the previous step.\n\n\n\n\n\n\n\nPractice!\n\n\n\nWork through some examples in this (2,3)-tree visualizer and go through the questions here to validate your understanding of the structure of (2,3)-trees."
  },
  {
    "objectID": "materials/dsanotes/debruijn/index.html",
    "href": "materials/dsanotes/debruijn/index.html",
    "title": "On Cards and Graphs",
    "section": "",
    "text": "Link to slides\nLink to a Tweet thread summarizing these notes\nBefore we talk about exploring graphs, we will take a small detour to throw in some motivation. In our discussion here we will establish that knowing how to go around a graph can meaningfully help us pull off a spectacular card trick. I trust that this should leave us sufficiently interested in finding out how we can actually find those Euler tours, which is our next stop.\n\n\n\nA deck with 32 cards is given to someone in the audience.\nAny number of cut shuffles1 are done.\nOnce the audience is satisfied that the deck is suitably shuffled, it is passed to someone, say P, from where the following happens:\nP takes the top card and passes the deck to the next person (Q).\nQ takes the top card and passes the deck to the next person (R).\nR takes the top card and passes the deck to the next person (S).\nS takes the top card and passes the deck to the next person (T).\nAll five people look at their cards without revealing them to anyone else.\nThose who got red cards are requested to stand up.\nAll cards are identified.\n\n\n\n\nInterpreting reds as 1’s and blacks as 0’s, any sequence of five cards is a signal: a bitstring of length 5. This is — at least in principle — enough to ID one of the cards in a 32-card deck, for sure. But to ID the next five cards too? Wow!\nSo to begin with, let’s just focus on ID-ing card. The deck, of course, is setup: the cards appear in a specific order, one whose relevant properties are unperturbed by cut shuffles. Note that we have no control over how many times the deck is cut, so the top card could be effectively anywhere in from the original sequence. So what we need is a sequence of 32 bits:\nb_0, b_1, \\ldots, b_i, \\ldots, b_{31}\nwith the following property. For any i \\in \\{0,\\ldots,31\\}, if B_i denotes2 the substring:\nb_{i}, b_{i+1}, b_{i+2}, b_{i+3}, b_{i+4},\nthen we would very much like that b_i \\neq b_j whenever i \\neq j. This ensures that no matter how many times the deck is cut, when the members of the audience with the red cards stand up, we have a clean and unambiguous signal, which we can pre-relate by our powers of rote memory to the card at position i in said sequence. Because subscripts are read mod 32, note that this is really all we need. For example, here’s a seuquence that does happen to have the property we are after:\n\n00000100101100111110001101110101\n\nThe diagram below shows why cut shuffles still result in sequences where the signal from any location continues to be unique, and in some sense, invariant across shuffles: suppose a position x corresponds to a certain signal S_x before a cut shuffle, then after a cut shuffle, if position x shifts to y, then S_y = S_x. Note that this would not be true if someone, say, enthusiastically riffle shuffled the pack — so do make sure to prevent this at all cost.\n\n\n\nExamples of cut shuffles and why they don’t affect the addressing technique. The first column shows the original sequence, the second shows the proposed cut, and the last shows the final sequence after the cut shuffle is excecuted.\n\n\nThis property makes the sequence a robust device for card discovery: we simply associate a specific card with every 5-length bit string, and position the card corresponding to b_i at location i. By knowing the signature corresponding to the top five cards after any number of cut shuffles, you know where this signal appeared in the original sequence, and by turdging further along in the sequence, you also know the signals for the next five cards.\n\n\n\n\n\n\nYou perhaps see now how you can perform the entire trick:\n\n\n\n\nmemorize the sequence 00000100101100111110001101110101\nassociate† a card with each bit-string of length 5\nmemorize said association\nplace cards as dictated by the sequence and given by the association\nprofit and/or impress\n\n† Note that the association has to respect the semantics of the bitstring: so the 1-positions get red cards and the 0-positions get black (or the other way round if you please, so long as you are consistent in your conventions throughout).\n\n\nNotice that once you can read off one card, having committed the seuqence and the association to memory, you can also read off any of the cards after that. This does seem like a lot of memorizing, but it’s worth it for the impact.\n\n\n\nIf you want to make your life easier, you could use an association that is easy to remember:\n\n\n\nA useful dictionary between 5-bit strings and cards from a standard deck of cards\n\n\nSo getting to the first card is quite straightforward already:\n\nIf the first person is seated, they have a black card, and otherwise they have a red card. But this is immediate anyway from the convention, so not particularly impressive to point out.\n\nWhen the card is black: if the second person is seated, it is a ♣, otherwise a ♠.\nWhen the card is red: if the second person is seated, it is a ⬥, otherwise a ♥.\n\nFinally, the value of the card is just translating the last three bits to their value in decimal (remembering to map all zeroes to eight).\n\nIf you want to really impress with the next four, you could just memorize the whole sequence, but to avoid visible murmuring, you can also exploit a handy feature of this particular sequence that helps you navigate it with only a little bit of mental math.\nIt turns out that if you know b_i (which you do based on who stands up), you can obtain the next bit (i.e, the sixth bit relative to the start of b_i) in the sequence by simply adding the first and third bits from b_i. In other words, the sequence has the following nice pattern: standing anywhere, you can obtain the next bit by taking the sum (mod 2) of the bits that are three and five bits behind wherever you are standing. Go on, verify this for yourself!3\n\n\n\nSo how does this lovely self-working card-trick fit, even if as a detour, into our discussion about graphs?\nLet’s step back for a bit. We pulled out the driver of this whole setup, the sequence:\n\n00000100101100111110001101110101\n\nmuch like a real magician pulls out a real rabbit from a real hat. You very likely raised an eyebrow and wondered about where this sequence came from. It’s a useful exercise to experiment with coming up with one, even if by means of ad-hoc scribbling. As a warmup, it’s worth trying to find one of length eight, where every 3-bit string occurs exactly once4.\nIt turns out that such sequences are in fact rather well-studied, and one way of generating them involves taking a walk in an appropriate graph! In particular, let us go back to our original task of generating a 32-bit sequence like the one shown above, except that we are on our own this time. Consider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex u is denoted by b_u; and\nan edge from u to v if the corresponding bit strings are all but the same: i.e, the 3-length suffix of u is the same as the 3-length prefix of v.\n\n\n\n\n\n\n\nIf you want to take a look at the graph, it’s right here…\n\n\n\n\n\n…although a bit of a monstrosity!\n\n\n\nThe de Bruijn graph of order 4\n\n\n\n\n\nThe following properties are worth thinking about:\n\n\n\n\n\n\nthe total number of vertices is _____\n\n\n\n\n\nOne for every bit string of length four, so sixteen.\n\n\n\n\n\n\n\n\n\nevery vertex has indegree and outdegree _____\n\n\n\n\n\nFix a vertex v and let s_v denote the last three bits of v. The only outgoing edges are to vertices that represent the bit strings s_v0 and s_v1.\nFix a vertex v and let p_v denote the first three bits of v. The only incoming edges are from vertices that represent the bit strings 0p_v and 1p_v.\n\n\n\n\n\n\n\n\n\nthe total number of edges is _____\n\n\n\n\n\nThere are sixteen vertices and each of them has outdegree two, so the total number of edges is 32. Does that ring a bell yet?\n\n\n\n\n\n\n\n\n\nthere are exactly _____ self-loops\n\n\n\n\n\nConsider a vertex v. Let the bit string associated with v be denoted by WXYZ. For v to be adjacent to itself, we will need XYZ = WXY, which implies that W = X, X = Y, Y = Z.\nSo if W = 1, then we have that WXYZ = 1111 and if W = 0 then we have WXYZ = 0000.\nThese are the only two possible scenarios, so our graph has exactly two self-loops.\n\n\n\nIf you were to take an Euler tour in this graph, i.e, walk around visiting every edge exactly once, then it very naturally spells out a sequence as follows. Start with an empty string. Now as you move around, going from the vertex u to v along the edge (u,v) amounts to essentially “seeing one new bit”: recall that the suffix of u almost fully eats up the prefix of v, leaving one new bit to observe, which is what we tag on to our sequence. Once you have traveled along every edge exactly once, you’ve collected exactly 32 bits, so we have written out a sequence of length 32 by the time we are done5.\nNow: our somewhat outrageous claim is that this infact is a valid de Bruijn sequence! Given that we have written out exactly 32 bits, it is enough to show that any bit sequence of length 5 shows up as a substring in this sequence starting from some position. The main intuition here is the following: suppose you want to “see” the bitstring PQRST in your sequence. Well, at some point in our walk on the graph, we moved from the vertex representing PQRS to the one representing QRST6. This made us add T to whatever sequence we had so far. Let’s rewind our walk a bit and see what happened in the last few steps too:\nLMNO → MNOP → NOPQ → OPQR → PQRS → QRST\nRetracing our steps, here are the bits that would have been triggered by this walk: PQRST, and thus we are almost done. You might say: perhaps the edge from the vertex representing PQRS to the one representing QRST was taken very early on, at the start of the tour, so we don’t have these many steps to retrace: but here’s the thing — we are on a tour, so you can continue walking back past your starting point and the sequence would still have this overall form: it’s just that a few of those bits would be written at the end, rather than at the start, and that just means that we can find our substring wrapped around the end, which is a perfectly valid place to discover it.\nNotice that there was nothing special about this whole process and the numbers four and five: you can generate so-called “de Bruijn sequences of order k”, which are bitstrings of length 2^k with the property that every k-bit string appears exactly once in the sequence as a substring (including wraparoudns), using exactly the same idea.\nSo you should be convinced by now — perhaps after reflecting for a moment or two — that de Bruijn sequences of any order in fact exist, which is not obvious at all from the definition. It turns out that there are actually quite a few of them: 2^{2^{k-1}-k}, to be precise, a formula we know thanks to de Bruijn, after whom the sequences are named.\nYou might wonder if there are other ways of coming up with these sequences, or possibly even enumerating them. These discussions are unfortunately out of scope, but there are several excellent resources for the curious. Much of these notes are based on the third chapter of the book Magical Mathematics: The Mathematical Ideas That Animate Great Magic Tricks which is a treasure of a book. Paraphrasing from this chapter, here is a little about the people behind this trick:\n\nThe origins of this trick go back to Charles T. Jordan in 1919, and the original version required a color pattern of length 6 to identify all the cards. Later William Larson and T. Page Wright came up with another variant involving 52 cards, and 3 people revealing the suits being enough for the magician to pick up the values. In the 1960s, Karl Fulves and, separately, P. Diaconis working with the chemist Ronald Wohl, derived dozens of tricks based on variations and extensions of Jordan’s idea."
  },
  {
    "objectID": "materials/dsanotes/stable-matchings/index.html",
    "href": "materials/dsanotes/stable-matchings/index.html",
    "title": "Stable Matchings",
    "section": "",
    "text": "The problem of pairing up people and/or resources shows up a lot:\nWe are going to look at one particular abstraction that captures many of the scenarios above (among others). Suppose we have a set V = \\{m_1, \\ldots, m_n\\} of n men and W = \\{w_1, \\ldots, w_n\\} of n women, where each man (respectively, woman) has a strict and complete ranking over the women (respectively, men). Our goal is to find a matching between the men and the women, which is to say, a bijection between V and W.\nNow, a natural question at this point is: what kind of matchings do we want to find? Unconstrained, there are plenty of matchings that we can choose from. Which one is the “best”?\nUpon a moment’s reflection you might come up with several ideas. We are going to focus on a fundamental game-theoretic approach to identifying what we desire from the matchings we seek. What we will demand of the matching M that we seek is that there is no man and woman who are unmatched in M who prefer each other over their matched partners. To this end, we first define the notion of a blocking pair with respect to M:\nThe presence of a blocking pair (a,b) implies that the matching M is unlikely to “sustain”: a and b both have an incentive to break off the alliances suggested by the matching M and “elope” with each other instead. Thus, matchings that have blocking pairs are called unstable.\nA matching without blocking pairs is called stable.\nIt’s easy to verify if a given matching M is stable: for all men m we look up all women w that m ranks higher than M(m), and check if w also ranks m higher than M(w): if yes, then we can declare M unstable since (m,w) is a blocking pair. If we find no blocking pairs after having checked all men m, then we can declare that M is stable.\nThis takes at most O(n^2) time, assuming that ranks can be retrieved in constant time. Thus we have the following.\nThe next natural questions are:\nIt turns out that (somewhat surprisingly!) stable matchings indeed always exist!\nThe algorithm for finding a stable matching works as follows. To begin with, we say that all men and women are single, i.e, unmatched to anyone so far.\nAnticipating our need for stability, we take a greedy approach: the men attempt to match up to their best option by proposing to them. But notice that this may not be immediately workable: possibly multiple men have the same choice for their top option. This puts the ball in the woman’s court, so to speak, and again in the interest of being eventually stable, it’s intuitive that the woman will choose to align with the best offer she has among the proposals she’s recieved.\nAlso, since we finally want everyone to be matched, we will also ensure that proposals are not rejected simply because they seem unattractive in absolute terms: if a woman who’s single recieves one or more proposals, she will accept the best among them, no matter how good or bad they are.\nAfter one round of proposals, the situation is as follows:\nIf W_0 = \\emptyset, that’s… well, that’s awesome, because what that means is all men had distinct choices for their top preference, and so V_0 = \\emptyset as well and we already have a matching where everyone has their best possible match: so this is clearly very stable and we are done.\nOn the other hand, it’s possible that W_0 \\neq \\emptyset, which is to say that some women are still single, and therefore there are some single men as well. Now, to make progress, single men go back to the drawing board and propose again. Now, a natural question at this point is the following:\nWell, since they were rejected for good reason (said women had better offers), and the reason has not gone away, it is clearly a waste of time for men to go back to women who’ve rejected them. So what they do instead is to propose to the next best option. Now: what if their next best option is not a single woman? Well, suppose m decides to not approach w because w is matched to some m^\\star in the first round. Then m will eventually be matched to someone who’s worse than w, and if w happened to prefer m over m^\\star, then (m,w) will eventually be a blocking pair.\nHowever, recall that this is exactly the situation we want to avoid. So we’re going to have m propose to their next best option irrespective of whether they are single or not. From the woman’s perspective, they are going to recieve proposals again, and we’ll let them pick the best offer, even if it means breaking off their current engagement.\nAfter this second round of proposals we again have some single men and women, and some engagements. Note that the following invariant is true:\nMen, on the other hand, may become single again. At this point, we simply continue as before: at the end of every round, the single men continue to propose to their current best option, and the women continue to accept the best offer that they have. We continue this until there are no\nHere’s pseudocode (borrowed from Wikipedia) summarizing the algorithm, which is due to Gale and Shapley. The version below is morally equivalent to our description above, except that all proposals happen one by one, and it turns out that this way of looking at it simplifies the analysis.\nIt turns out that this procedure:\nThe first property follows from the fact that men never propose twice to the same woman, so the number of proposals made is \\leqslant n^2 . Also note that no man m is rejected by all women: this can only happen if all the women have found better engagements (which are necessarily distinct — notice that the set of engagments at any stage of the algorithm always forms a valid matching), but there are only n-1 men other than w: so this is not feasible.\nSo we know that the while loop terminates, and that once it does we have a matching M.\nIt remains to show that M is stable. But if M has a blocking pair (m,w), then w was proposed to by m before m proposed to M(w), and since (m,w) are not matched in M, it must be the case that w prefers M(w) over m, so (m,w) cannot be a blocking pair after all.\nThis brings us to the following claim:\nThe output of the Gale-Shapley algorithm has a couple of interesting properties. First off, it turns out that the output is not just stable, but also qualitatively very good. Let us define, for a man m, their optimal match as the best woman that m can be matched to in any stable matching. It turns out that M matches all men to their optimal matches!\nAlso, the output of GS is weakly Pareto optimal, which is to say that there is no matching (stable or otherwise), where all the men are better off.\nWe state these claims above without proof. The interested reader should look them up!"
  },
  {
    "objectID": "materials/dsanotes/stable-matchings/index.html#references",
    "href": "materials/dsanotes/stable-matchings/index.html#references",
    "title": "Stable Matchings",
    "section": "References",
    "text": "References\nNumberphile video about the algorithm\nNumberphile video about the proof\nNotes on implementation details"
  },
  {
    "objectID": "materials/dsanotes/index.html",
    "href": "materials/dsanotes/index.html",
    "title": "Data Structures and Algorithms",
    "section": "",
    "text": "Lecture Notes\n\n\non Data Structures and Algorithms\n\n\n \n\nThese are running notes on selected topics in Data Structures and Algorithms.\nI have been developing these as a part of my course on Data Structures and Algorithms at IIT Gandhinagar. Please see the course website for additional materials (e.g, problems and programming challenges).\nAt the time of this writing these notes are largely raw and informal. They certainly do not substitute — but hopefully do supplement — an actual textbook :)\nIf you have any general comments or questions, please leave them below. Thanks!"
  },
  {
    "objectID": "materials/dsanotes/sequences/index.html",
    "href": "materials/dsanotes/sequences/index.html",
    "title": "Representing Sequences",
    "section": "",
    "text": "Link to Slides\nSo far, we have worked with atomic types, which is to say variables that can hold a “single kind of data” for us — like integers, characters, strings, booleans, and so on. Often, however, we need to work with compound types, which is to say, a bunch of these things taken together. For example, you may have sensed that when we spoke of maintaining a set of cards earlier with 52 booleans, it may have been nicer if they could be strung together into a single, unified structure: for one, it saves you having to keep track of a large number of variables, and further, it might be easier — as we will find out — to manipulate the data in response to operations that we may want to support.\nWhen you speak of a bunch of objects, it is useful to agree on whether you interpret the collection as an ordered or unordered set. Consider the following examples:\n\nYour playlist of happy songs\nA stack of cards\nPeople living in a house\nTeams that played in the Asia Cup 2022\nChess pieces on a board mid-game\nPreferences of men and women in the stable marriage problem\nList of marks obtained in all the assessments of a course\n\nWhile some people play their happy songs in shuffle mode, for some the playlist is carefully organized, and the order matters. A stack of cards and chess pieces on a board are clearly collections with a natural sense of order, and one that is very likely to be important. On the other hand, people who live in a particular house or the set of teams that participated in the Asia cup in 2022 can be thought of as sets with no underlying order: of course, if you had to impose one you could cook something up1 (e.g, alphabetical, favorites, and so on). We will focus on storing ordered lists for now and return to sets in due course.\nThere are a few different ways that you can store a list of things in a computer’s memory. Imagine that you are real estate agent and you want to book some houses in a complex for your current and future clients. Stretching your imagination a little bit further, say all houses are numbered from 1 to 1000 and are positioned on a straight line in the natural order (i.e, 2 after 1, 3 after 2, and so on). Some houses are occupied and others are not. If you reserve k houses, management will find some contiguous block of k unoccupied houses and give you the number of the first house in the block. For instance, if you ask for 50 houses, you would get a letter from the management saying 50 houses starting from #420 are yours. If you need 20 more houses later, you would get a letter from the management saying 70 houses starting from #777 are yours. That’s right: they are not obiligied to give you houses #470 to #489, indeed, these may not be avaiailable. They could just give you an additional chunk of 20 houses somewhere else, but sadly that’s not how they roll: them management, them rules. There are also no refunds: you can’t give back reserved houses.\nNow here comes our first dilemma: how many houses do we reserve? Say we have 20 clients: it is clear that we need to reserve at least 20 houses, but should we reserve a few more? Reservations are not free, so we don’t want to reserve a very large number of houses either: remember, there are no refunds. But on the other hand, if we reserve too few, and we end up with more clients than the number of houses we’ve reserved, we will be in a sticky situation — worst case some clients may have to move, which is not ideal. You will have to work on coming up with a reasonable estimate of how many clients you will eventually have, and hope for the best.\n\n\n\nExpanding your reservations can get tricky\n\n\nOver time you find that this business of estimating the number of clients you have is an unpleasant one: both under and overestimates lead to losses, which makes you wonder if there are apartments that have more flexible options. You look around, and why yes, you find a different apartment complex — again a thousand houses on a line neatly numbered 1 to 1000 from left to right, but this time, management reserves one house at a time. You want a new house, you simply ask for one. But there’s a catch: the paperwork here requires you to submit the client’s information, and they directly get their house number. So this is actually quite efficient: the management does all the work and you can reserve exactly what you need. All is well until it’s time for Diwali and you realize you don’t know where your clients are housed, and you can’t send them postcards, sweets, and advertisements.\nYou could, of course, just call your clients and ask them for their house numbers, but then this requires you to maintain some kind of register, and let us just say that you are not good with that kind of thing. So here’s what you do instead: you only keep the first client’s address, because that’s just one thing that’s easy to remember. Then you ask your i-th client to remember the address of the (i+1)-th client: they are slightly bewildered but you tell them it’s for insurance. Now if you want to pay a visit to your \\ell-th client, you just start from your first one, and follow the trail. Peculiar, but works.\n\n\n\nWalking around to find your clients with new management.\n\n\nNote that with the previous maangement this was never a problem: you had a contiguous block of houses that you allocated sequentially, so your i-th client’s house address was always at hand if you were good with arithmetic or had a calculator: simply add (i-1) to the house number of the first client.\nAs analogies go this was both unrealistic and imprefect, but I hope it gives you a sense of the main trade-offs involved in the two ways we have to store sequential data — very roughly speaking:\n\nin contiguous blocks, access is easy, flexibility is hard;\nwith elements all over the place, access is indirect but the structure is relatively flexible.\n\n\n\nQuoting Wikipedia:\n\nAn array is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index tuple by a mathematical formula.\n\n\nFor example, an array of 10 32-bit (4-byte) integer variables, with indices 0 through 9, may be stored as 10 words at memory addresses 2000, 2004, 2008, …, 2036, (in hexadecimal: 0x7D0, 0x7D4, 0x7D8, …, 0x7F4) so that the element with index i has the address 2000 + (i × 4).\n\nArrays are usually static, which is to say that their sizes are fixed upfront:\n\nAs an example consider the C declaration int anArrayName[10]; which declares a one-dimensional array of ten integers. Here, the array can store ten elements of type int . This array has indices starting from zero through nine. For example, the expressions anArrayName[0] and anArrayName[9] are the first and last elements respectively.\n\nNow if you decide to add an eleventh element to anArrayName, the default situation is that you have an array overflow and the operation is not permitted. However, you could work around this by copying everything in anArrayName to a new array of larger size: this is going to be expensive, but it allows you to expand the size as you go along.\n\n\n\nQuoting Wikipedia:\n\nA linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence. This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration.\n\n\nMore complex variants add additional links, allowing more efficient insertion or removal of nodes at arbitrary positions. A drawback of linked lists is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible. Arrays have better cache locality compared to linked lists.\n\n\n\n\nGiven a fully occupied array with n elements v/s a linked list with n elements, here are the costs of some operations that you might want to perform:\n\n\n\n\n\n\n\n\nOperations\nArrays\nSingly Linked List\n\n\n\n\nLooking up the i-th element\ninstant\n\\approx i\n\n\nAdding a new element at the start\n\\approx n2\ninstant\n\n\nAdding a new element at the end\n\\approx n3\ninstant4\n\n\nAdding a new element at the i-th location\n\\approx n\n\\approx min(i,n-i)5\n\n\nRemoving the i-th element\n\\approx n-i\n\\approx min(i,n-i)6\n\n\n\n\n\n\nIn a bid to get the best of both worlds, one often resorts to dynamic arrays — which are resizable arrays that have an average constant expense of insertion and instant lookups always. The way this works is the following: start out with a modest-sized array with room for k elements7, and whenever you overflow, you book a new array which is double the size of the original, which buys you free insert operations for another n steps, where n is the current array size. This way, you can think of every copy operation as “paying forward” for an insert operation, and since the total number of insertions is n, the total number of operations overall is at most 2n, amounting to a total cost that is constant per insertion (by averaging). This is called an amortized analysis. Every insertion is one of two kinds:\n\nlucky: an operation that costs one unit of time, because the array has free space;\nunlucky: an operation that costs n+1 units of time, because the array has overflown and we need to copy n elements before we can perform the insert.\n\nNote that the unlucky operations are few and far between: if we have an unlucky operation of cost n+1, then the next n inserts are going to be lucky. So while the worst-case insertion time can be as bad as the size of the array, the average time is, in fact, constant.\nNote that deleting arbitrary elements remains expensive, we have to clean up the empty spaces created by the deletions.\n\n\n\nThe correct answer is: it depends. If you expect your lists to be heavily manipulated, then linked lists are likely to be the better choice. On the other hand, if yuo are working with a list of a predictable size (or you at least have a known and reasonable upper bound on the size), and direct access is important to you, then arrays are the way to go. If you are dissatisfied with both methods, then consider transforming your unhappiness into motivation for discovering more sophisticated options!"
  },
  {
    "objectID": "materials/dsanotes/graphs/index.html",
    "href": "materials/dsanotes/graphs/index.html",
    "title": "Representing Graphs",
    "section": "",
    "text": "At some point of time in your life, you have likely been challenged to draw a kite-like figure:\n\n\n\nA common drawing challenge.\n\n\nwithout ever lifting your pencil/pen/quill off the paper. You may have noticed that there are figures that are particularly elusive to this persistent style of drawing, while others are pleasingly possible to draw in this fashion.\n\n\n\n\n\n\n(Spoiler) Beth Thomas demonstrating what drawing challenges are doable\n\n\n\n\n\n\n\n\n\n\nThe city of Königsberg in Prussia (now Kaliningrad, Russia) was set on both sides of the Pregel River, and included two large islands—Kneiphof and Lomse—which were connected to each other, and to the two mainland portions of the city, by seven bridges.\n\n\n\n\n\n\nThe Problem\n\n\n\nDevise a walk through the city that would cross each of those bridges once and only once. Try this yourself on a few different maps at Mathigon!\n\n\n\n\n\nKonigsberg Classic: Map of Königsberg in Euler’s time showing the actual layout of the seven bridges, highlighting the river Pregel and the bridges. Image by Bogdan Giuşcă, in the public domain (CC BY-SA 3.0) and sourced from Wikipedia.\n\n\n\n\n\n\n\n\n(Spoiler) Numberphile commentary on the bridges of Königsberg\n\n\n\n\n\n\n\n\n\n\nThe question was addressed and answered by Euler (1736). He did not solve this by “messing around” with all possible ways of walking around the city and checking if any of the walks satisfied the desired criteria. His more systematic approach involved modeling the problem abstractly, and making some key observations that ultimately led to the solution — not just for this problem, but for all problems with a similar framing!\n\n\n\n\n\n\nClassroom Activity with Eulerian Paths\n\n\n\nThe picture below shows a few popular actors, with edges connecting pairs of those who have worked together in a movie together1. The example is designed so that there are exactly two actors who participate in an odd number of pairings.\nWe can work through the “bridges puzzle” on this graph. In the classroom, we all started with the vertex representing Juhi Chawla, “walked around” using every connection exactly once, and the fun effect is that everyone ends up at the vertex representing Rishi Kapoor (or solves the puzzle incorrectly). From here, you can probably begin to guess the role of the two special vertices in the puzzle.\n\n\n\nAn actor collaboration graph\n\n\nThis activity is an adaptation of the example from the Intro to Algorithms course at Udacity, where it appears in the first chapter with the title “A Social Network Magic Trick”.\n\n\nHere’s another similar-sounding and classic problem involving a chessboard, also posed to Euler:\n\n“I found myself one day in a company where, on the occasion of a game of chess, someone proposed this question: To move with a knight through all the squares of a chess board, without ever moving two times to the same square, and beginning with a given square.”\n\nThe origins of this problem — the so-called “Knight’s Tour” — goes all the way back to the 9th century AD, where it is described in Rudraṭa’s Kavyalankara. Here’s an example of a knight’s tour, as seen on Wikipedia:\n\n\n\nAn animated example of a knight’s tour.\n\n\nAlthough deceptively similar to the problem of the bridges, this is a different problem with two important contrasts:\n\nwe were previously not allowed to reuse bridges, here we are not allowed to reuse squares, and\nwe were previously obliged to use every bridge, here we are not required to make every possible move that exists.\n\nGeneralizing from the 8x8 chessboard, you could ask yourself what (n \\times n) boards admit such tours.\n\n\n\n\n\n\n(Spoiler) Numberphile commentary on the knight’s tour"
  },
  {
    "objectID": "materials/dsanotes/graphs/index.html#abstractions-via-graphs",
    "href": "materials/dsanotes/graphs/index.html#abstractions-via-graphs",
    "title": "Representing Graphs",
    "section": "Abstractions via Graphs",
    "text": "Abstractions via Graphs\nIt’s useful to model such problems using graphs (aka networks). And we’re not talking sine curves here — a graph in our context is a structure that represents relationships between entities.\nUsually these relationships are between two entities at a time. Indeed, this is typically already quite a bit to keep track of, hence graphs that do more are said to be hyper. That is to say, graphs that model relationships involving more than two entities in one go are generally called hypergraphs, and they will be a story for another day.\nFor now, we will variously refer to entities as vertices or nodes, and relationships as edges or connections. Come to think of it, graphs are everywhere:\n\n\n\nEntities\nTwo entitites are in a relationship if…\n\n\n\n\nPeople\nthey are in a relationship.\n\n\nCats\nthey have fought each other.\n\n\nActors\nthey have been in a movie together.\n\n\nAirports\nthere is a direct flight between them.\n\n\nLandmasses\nthere is a bridge connecting them.\n\n\nSongs\none of the tunes was copied from the other.\n\n\nSubsets of [42]\none is contained in another.\n\n\nIngredients\nthere is a recipe that uses them together.\n\n\nWebpages\none of them has a link leading to the other.\n\n\nTwitter Users\none of them follows the other2\n\n\nLocations on a Chessboard3\none of them is reachable from the other via a knight move.\n\n\n\nWe usually like to distinguish between graphs where the relationships are potentially one-sided (such as people in a relationship), and those where they are mutual (such as ingredients in a recipe). Edges like these are called directed and undirected, respectively.\nDepending on what the graph is modeling, we may not allow for entities to entertain relationships with themselves (e.g, flights don’t come back to airports they took off from). In other contexts, it makes sense to allow for this (e.g, a set always contains itself). An edge that connects a vertex to itself is called a self-loop4.\nSometimes, it is reasonable that there are multiple edges between a fixed pair of vertices (for example, consider that there are several recipies that use salt and potatoes). Multiple edges are useful to model a multitude of relationships, and are often called multiedges when used.\nA simple graph is one that does not have either self-loops or multiedges.\nFinally, it is worth mentioning that some relationships naturally connect more two entities. For example, in an actor collaboration graph, you would find edges between Amitabh Bachchan, Juhi Chawla, and Shah Rukh Khan. You would also find edges between Akshay Kumar, Dhanush, and Sonam Kapoor. In the first example, there happens to be one film that all three actors feature in together, while this is not the case in the latter, at least at the time of this writing. As such, the graph does not have enough structure to reveal this distinction: it looks exactly the same in both cases!\nFor an actor-collaboration graph, allowing for n-way relationships would make room for accurately capturing information about both actors and movies. Indeed, every movie could be represented by an ‘edge’ — the subset of actors who belonged to the cast. Such graphs are called hypergraphs or set systems.\nWhile hypergraphs are a very useful generalization of graphs, they will be largely out of scope for our discussions in this course. To make up for that, here is a different workaround to capture all the information we have in the actor-collaboration graph example. Instead of having a vertex for every actor, we introduce a vertex for every actor and for every movie. Now, an actor a and a movie m are connected by an edge if a belongs to the cast of m. Observe that this approach can be used to “convert” any hypergraph into a graph.\nA little more terminology before we move on: I promise that we’re almost done introducing new words!\nFor an undirected graph, a vertex u is called a neighbor of a vertex v if (u,v) is an edge. For a directed graph, the presence of the edge (u,v) would make v an out-neighbor of u and u an in-neighbor of v.\nFor an undirected graph, the degree of a vertex v is the number of neighbors of v. For a directed graph, the in-degree and out-degree of v is the number of in-neighbors and out-neighbors of v, respectively."
  },
  {
    "objectID": "materials/dsanotes/graphs/index.html#representing-graphs",
    "href": "materials/dsanotes/graphs/index.html#representing-graphs",
    "title": "Representing Graphs",
    "section": "Representing Graphs",
    "text": "Representing Graphs\nIf you wanted to tell your program about a graph, there are a few different ways you could go about it. Let’s assume that we’re trying to represent a graph G on n nodes, labeled 1 through n, and m edges.\n\n\n\n\n\n\nHow would you do it?\n\n\n\nBefore reading further, it would be worth spending some time thinking about how you would represent a graph. Based on our discussions so far, you might counter this with the question: “Well, what do you need it for?” — and that’s a fair reaction!\nListed below are some fairly common operations that come up when dealing with graphs.\n1. add edge u v\n2. remove edge u v\n3. add vertex v\n4. remove vertex v\n5. is u a neighbor of v?\n6. find degree v\n\n\nEdge Lists. The most natural way is to perhaps just braindump the full list of edges. This gives us all we need to know about G.\nSince this is just a plain list, you could implement it either as an array or as a linked list.\nAdjacency Matrix. The other way is to block off a n \\times n array A of integers. You could then have:\n \\begin{equation*}\n   A[i][j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\n\nAdjacency Lists. Finally, you could have an array A of size n, with A[i] pointing to a list of the neighbors of the vertex i if the graph is undirected, and out-neighbors if the graph is directed.\nAgain, since these are just lists, they could be, in principle, implemented either as arrays or linked lists. We will follow the traditional choice of implementing them as lists.\nIt should be no surprise at this point that there is no “right” answer to the choice of representation. You might have noticed, for instance, that an adjacency matrix always reserves n^2 units of space to store G, while the amount of space consumed by the other two representations is proportional to m. Notice that the number of edges in a graph can be as large as \\approx n^2 for simple graphs, so there certainly are graphs for which the space consumption looks the same for all representations. However, for graphs where there aren’t as many edges, then the matrix representation is likely wasteful in terms of space, although you may have other good reasons for sticking to it.\nLet’s classify expenses incurred as follows.\n\nBrilliant. When the procedure only needs constant time.\nDecent. When the procedure always wraps up in, and sometimes needs, time proportional to the maximum degree of the graph.\n(n/m)-tolerable. When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph.\n(n/m)-painful. When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph squared.\n\nHere’s a run down of how the representations above fare with respect to some of the common operations mentioned in the opening exercise.\n\n\n\nOperations\nAdj. Matrix\nAdj. List\nEdge List\n\n\n\n\nAdding a vertex\nn-Painful\nn-Tolerable\nDecent\n\n\nDeleting a vertex\nn-Painful\nn-Tolerable\nm-Tolerable\n\n\nAdding an edge\nBrilliant\nBrilliant\nBrilliant\n\n\nDeleting an edge\nBrilliant\nDecent\nm-Tolerable\n\n\nFinding degree(v)\nn-Tolerable\nDecent\nm-Tolerable\n\n\nCheck if (u,v) is an edge\nBrilliant\nDecent\nm-Tolerable\n\n\n\nIt would be a good exercise to validate that these claims indeed make sense.\nNow that we’re comfortable with storing graphs, next up, we’ll talk about exploring them."
  },
  {
    "objectID": "materials/dsanotes/eulertours/index.html",
    "href": "materials/dsanotes/eulertours/index.html",
    "title": "Walking Around via Euler Tours",
    "section": "",
    "text": "We revisit the following problem from our introduction to graphs:\nWe also found such traversals useful for computing de Bruijn sequences, so between success on city exploration challenges and impressing with card tricks, there is plenty of motivation to take an Euler tour in a graph.\nIn general, we are given a directed or undirected graph G = (V,E) and we want to know if there is a sequence of edges:\nW := e_0 = (u_0,v_0), \\ldots, e_{m-1} = (u_{m-1},v_{m-1})\nsuch that v_i = u_{i+1 \\mod m} for all i \\in \\{0,1,\\ldots,m-1\\}, and every edge in E features exactly once in this sequence."
  },
  {
    "objectID": "materials/dsanotes/eulertours/index.html#necessary-and-sufficient-conditions",
    "href": "materials/dsanotes/eulertours/index.html#necessary-and-sufficient-conditions",
    "title": "Walking Around via Euler Tours",
    "section": "Necessary and sufficient conditions",
    "text": "Necessary and sufficient conditions\nNote that if such a sequence does exist for a directed graph G, then the indegree of every vertex must equal its outdegree, i.e:\n\nindegree(v) = outdegree(v) for all v \\in V.\n\nLikewise, if such a sequence exists for an undirected graph G, then every vertex must have even degree:\n\ndegree(v) = 2k_v for all v \\in V and some integer k_v.\n\nYou can observe this based on simulating the sequence on the graph and imagining it from the perspective of your favorite vertex v in it. In particular, assume you are walking around in G as dictated by W. Fix your attention on v: every time you “enter” v, via, say the edge e_i, then you must “exit” v via the edge e_{i+1}. If G is directed, e_i is an incoming edge and e_{i+1} is an outgoing edge, and if G is undirected, these are simply two edges incident on v that can be naturally “paired off”. So any successful walk witnesses the claims above.\n\n\n\n\n\n\nThese conditions are necessary, but are they sufficient?\n\n\n\n\n\nIt turns out that you could have graphs where these conditions are true, but there are no Euler tours. This happens when the graph is “disconnected”, i.e, when there is a pair of vertices u and v such that there is no path from u to v. The following are good exercises to work through:\n\nCome up with an example of a graph where the degree conditions are met but there is no Euler tour.\nConvince yourself that if G is connected and satisfies the degree conditions indicated above, you can always find an Euler tour."
  },
  {
    "objectID": "materials/dsanotes/eulertours/index.html#a-naive-algorithm",
    "href": "materials/dsanotes/eulertours/index.html#a-naive-algorithm",
    "title": "Walking Around via Euler Tours",
    "section": "A naive algorithm",
    "text": "A naive algorithm\nNow we turn to the procedural question: knowing what it takes to find an Euler tour, how do we actually find one? First, we get the simple degree-based sanity check out of the way. For undirected graphs we have:\nfor v in V(G):\n    if deg[v] % 2 != 0:\n        return False\nand for directed graphs we have:\nfor v in V(G):\n    if indeg[v] != outdeg[v]:\n        return False\nAssuming we pass these sanity checks, we want to embark on an actual tour. Here’s a reasonable starting point, which essentially amounts to saying that you get to start anywhere, and keep going while you can:\nfind_tour(G,v):\n    // G is the graph\n    // and v is our favorite vertex\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u) which is not in S:\n        add e to S\n        set curr := u\n    return S\nThis is basically a “keep going until stuck” process. By the very nature of the process, the sequence S that we come up with is walkable and does not repeat edges, but it is unclear if this list is exhaustive. Indeed, you should be able to come up with examples of graphs G where G has an Euler tour but find_tour(G) does not output one."
  },
  {
    "objectID": "materials/dsanotes/eulertours/index.html#fixing-the-naive-approach",
    "href": "materials/dsanotes/eulertours/index.html#fixing-the-naive-approach",
    "title": "Walking Around via Euler Tours",
    "section": "Fixing the naive approach",
    "text": "Fixing the naive approach\nHow do we fix this? For one, we need to know if we are done or not: if an edge is missing from S, then that’s a bad sign, and we need to do something about it. How do we know if every edge is enlisted in the output? One way is to compute the length of S: if it falls short of m, we are not done yet.\nBut we also need to know what the missing edges are. We could in principle go through our edge list and ask ourselves if the edge made it to S or not, but that sounds mildly painstaking. Let’s save ourselves the pain with some additional bookkeeping — let’s track the “residual degree” of the vertices: this is the number of edges incident on v that are not yet listed in S. Any vertex with non-zero residual degree gives us concrete hints about missing edges.\nSo for directed graphs we have:\nfind_tour(G,v):\n    init res_deg[v] = outdeg[v]\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u) which is not in S:\n        add e to S\n        res_deg[curr] = res_deg[curr]-1\n        set curr := u\n    return S\nand for undirected graphs we have:\nfind_tour(G,v):\n    init res_deg[v] = deg[v]\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u) which is not in S:\n        add e to S\n        res_deg[curr] = res_deg[curr]-1\n        res_deg[u] = res_deg[u]-1\n        set curr := u\n    return S\nSo now we know when our algorithm is a fail. What’s the fix? Well, let’s approach vertices who are not done yet as per our intel from their res_deg value. We use these vertices to trigger more happy-go-lucky tours:\nfind_tour_fr(G):\n    i := 0\n    marked := emptyset\n    res_deg[v] := outdeg[v]\n    S := list of lists\n    while there is some v with res_deg[v] > 0:\n        let S[i] := find_tour(G,v,marked)\n        add every edge in S_i to marked\n        i = i+1\nSince we need to track visited edges across multiple runs now, we actually inform the find_tour function about the edges already visited from past lives. This is tracked with the marked set.\nSo our updated find_tour function looks like this:\nfind_tour(G,v,marked):\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u)\n    which is not in S or marked:\n        add e to S\n        res_deg[curr] = res_deg[curr]-1\n        set curr := u\n    return S\n(The change is analogous for the version dealing with undirected graphs.)\nWhat we have now is a bunch of fragments, each of which is essentially a walk that begins and ends at the same vertex. Because of our relentless and careful pursuit (c.f. the while condition and the marked set), every edge in G features in exactly one of these fragments. Now it’s just a matter of putting everything together.\nStart with the first fragment S_0. If this is the only fragment we have, that means that our first happy-go-lucky tour was in fact also a lucky one! So we have nothing left to do. Otherwise, there are at least two fragments. Let us look at the set of vertices involved in S_0. The crucial observation is that there must be at least one other fragment, say S_i, that also features some vertex that appears in S_0. Indeed, if this is not the case, then you can argue that S_0 is a sad isolated fragment, and we can actually report that G has no Euler tour.\nOtherwise, find the common vertex between S_0 and S_i, and extend one of them using the other: for example, if v is the common vertex, take a walk in S_0 until you encounter v, and then instead of following along on S_0, take a detour as specified by S_i. Remember if you start on S_i at v, then you will eventurally exhaust S_i by coming back to v: and at this point you can “resume” your walk on S_0. Note that this process welds two fragments at the vertex v thereby reducing the total number of fragments by one. This should count as a sure sign of progress: repeating for as long as possible, we have to do this at most (f-1) many times, where f \\leq \\frac{m}{2} is the total number of fragments.\npatchup():\n    Let S[i] for i in 1, 2, ..., f denote the set of all fragments\n    while f > 1:\n        look for a fragment S[i] that intersects S[0]\n        if S[i] does not exist:\n            return false\n        else:\n            expand S[0] along S[i]\n            remove S[i] from the set of all fragments"
  },
  {
    "objectID": "materials/dsanotes/eulertours/index.html#expenses",
    "href": "materials/dsanotes/eulertours/index.html#expenses",
    "title": "Walking Around via Euler Tours",
    "section": "Expenses",
    "text": "Expenses\nAlthough arguably a naive algorithm, the cool thing about this procedure is that it is guaranteed to work, and the number of steps involved is not terribly bad either. Here’s a naive back-of-the-envelope analysis, assuming G is stored as an adjacency list:\n\nThe degree-based sanity checks are \\approx m since G is stored as an adjacency list.\nConsider find_tour_fr(G):\n\nThe outer while loop runs at most m times since each iteration decreases the residual degree of at least two vertices and the sum of residual degrees is 2m at the start (an analogous argument applies for directed graphs).\nThe inner while loop in find_tour(G,v,marked) is executed at most m times. To find an appropriate edge, we have to go through the negibors of curr and check if the associated edge is already in S or marked. This takes at most (nm) iterations in the worse case, if implemented directly.\nAssuming that S is a linked list and res_deg is an array, the innermost operations are all constant time.\nThe overall cost of a direct implementation is therefore nm^3.\n\nThe patchup procedure involves a outer while loop that runs at most f times if we have f fragments. The looking business to merge fragments will take no more than m units of time: worst case we have to scan all remaining fragments to find a suitable match, and the merger involves updating a few pointers — noting again that the fragments are stored as lists. This is of course a conservative estimate, but it will do. The overall time here is therefore no worse than \\approx m^2 since f \\leq \\frac{m}{2}.\n\nThis gives us m + nm^3 + m^2 in total damages. However, notice that a more careful analysis helps us do better without doing anything substantially different. If you think about find_tour_fr(G) think about how often the instructions:\nadd e to S\nres_deg[curr] = res_deg[curr]-1\nset curr := u\nfrom find_tour(G,v,marked) are actually executed. Every time we execute this set of instructions, we effectively add one edge to the set of marked edges, and since this happens exactly once per edge, these instructions only execute m times overall. Recall that what it takes to enter this loop is the discovery of an unused edge:\nwhile there is an outgoing edge e = (curr,u)\nwhich is not in S or marked\nThis is the bit that took us a while, because we assumed we have to examine all possible edges that go out of curr and then also tally up against S and marked. One way to speed this up is to always commit to pulling out the first element in the adjacency list of the vertex u and then in fact deleting this element from the list. If you are paranoid about subjecting your input to this kind of annihilation, then you can just make a working copy upfront. This way, you can be sure that you can find what you want in constant time, a good case in point to show how the way you store your data can impact the performance of your algorithm.\nBased on the hints above, convince yourself that find_tour_fr(G) in fact has a total expense amounting to \\approx m, modulo constants. With this, our overall cost comes down to \\approx 2m + m^2."
  },
  {
    "objectID": "materials/dsanotes/eulertours/index.html#afterthoughts",
    "href": "materials/dsanotes/eulertours/index.html#afterthoughts",
    "title": "Walking Around via Euler Tours",
    "section": "Afterthoughts",
    "text": "Afterthoughts\nCan we do better? Indeed, it turns out that with a slightly more careful implementation, the business of merging fragments can also be done with an expense proportional to the number of edges. The careful version goes by Hierholzer’s algorithm, and you can read up about this on Wikipedia or watch the video below."
  },
  {
    "objectID": "materials/index.html",
    "href": "materials/index.html",
    "title": "Neeldhara",
    "section": "",
    "text": "Materials\n\n\nLecture Notes for Data Structures and Algorithms  (work in progress)\nLecture Notes for Advanced Algorithms  (coming soon)\nLecture Notes for Getting Started with Competitive Programming  (coming soon)"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Contact\n\n\nAddress\n\nNeeldhara Misra AB 4/305,  IIT Gandhinagar Palaj,  Gandhinagar 382055  India\n\nEmail\n\nneeldhara.misra@gmail.com • neeldhara.m@iitgn.ac.in\n\nIn case you have emailed me and have not heard back: it is typically my bad!\n\n\nI tend to respond either immediately or eventually, so don’t hesitate to send a (n|gr)udging reminder if I have not responded to your email and your context is time-sensitive. My apologies!\n\n\nPhone\n\n+91 79 2395 2490 (Off)"
  },
  {
    "objectID": "news.html",
    "href": "news.html",
    "title": "All News",
    "section": "",
    "text": "All News\n\n \n\n\n\n    \n        \n        \n        \n        \n        \n        Finding Perfect Matching Cuts Faster |  Mar 27, 2023\n        \n        \n        \n        \n        \n        Joint work with Yash More ⸱ To Appear at IWOCA 2023 ⸱ Preprint coming soon!\nA cut (X,Y) is a perfect matching cut if and only if each vertex in X has exactly one neighbor in Y and each vertex in Y has exactly one neighbor in X. The computational problem of determining if a graph admits a perfect matching cut is NP-complete, even when restricted to the class of bipartite graphs of maximum degree 3 and arbitrarily large girth. We demonstrate a faster exact exponential time algorithm on general graphs and an even faster algorithm on graphs of maximum degree three that have girth six.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        CompEd 2023 Dates Announced |  Mar 24, 2023\n        \n        \n        \n        \n        \n        CompEd will be held between December 7-9, 2023, at Hyderabad, India. Check out the call for participation! The deadline for submitting abstracts is Sunday, 7 May.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        IPEC 2023 Dates Announced |  Mar 20, 2023\n        \n        \n        \n        \n        \n        The International Symposium on Parameterized and Exact Computation (IPEC) is an annual conference covering all aspects of parameterized and exact algorithms and complexity. Its 18th edition will be part of ALGO 2023, which also hosts ESA 2023 and other specialized conferences and workshops. We are excited that ALGO 2023 is planned as an in-person conference and we look forward to seeing you there! ALGO will be held between September 4-8, 2023, at Amsterdam, the Netherlands.\nDo submit your best work to IPEC 2023 --- the abstract submission deadline is June 27th (23:59 AoE).\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        NASI Platinum Jubilee Young Scientist Award |  Jan 5, 2023\n        \n        \n        \n        \n        \n        Recieved the NASI Platinum Jubilee Young Scientist Award. Most grateful to all collaborators and mentors who make this recognition possible.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        INYAS Membership |  Jan 1, 2023\n        \n        \n        \n        \n        \n        INYAS is the Young Science Academy established by Indian National Science Academy (INSA). Their work in science outreach and popularization has been wide-ranging and very inspiring over the years. It is wonderful and humbling to have been selected as a member this year. Looking forward to pitching in!\n\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        ACM-India CSEd Workshop |  Dec 25, 2022\n        \n        \n        \n        \n        \n        We recently concluded the CSEd Workshop with support from ACM India, NPTEL, and the discipline of CSE at IIT Gandhinagar. The workshop featured talks by Sonia Garcha, Viraj Kumar, Venkatesh Choppella, and N S Kumar. The talks covered various themes, including CSPathshala, refute questions, mapcode, and key takeaways to convey in a data structures course.\nThe materials from the course (including video recordings and slides) can be accessed from here.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        A Proud Carmelite! |  Dec 15, 2022\n        \n        \n        \n        \n        \n        Mount Carmel College (in Bangalore), my alma mater, is celebrating its Platinum Jubilee this year. A part of this celebration is HERSTORY: \"75 years of scripting success stories of Confident, Competent, & Compassionate Carmelites\".\nI was honored to be among the 75 Carmelites invited for the HERSTORY event today. It was very nostalgic to be back on campus, and the organizers put together an impeccable event that made all of us feel very special. It was humbling to be in inspiring company. I can't thank MCC enough for providing an empowering and fun environment at a crucial stage of my life!\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        GIAN Course on Randomized Methods for Parameterized Algorithms |  Dec 9, 2022\n        \n        \n        \n        \n        \n        We recently concluded the GIAN course on Randomized Methods for Parameterized Algorithms by Daniel Lokshtanov, Professor, Dept of Computer Science, University of California Santa Barbara, between Dec 5—9, 2022. The course consisted of over ten hours of lectures covering modern techniques in randomized algorithms, and five interactive tutorial sessions.\nThe materials from the course (including video recordings and slides) can be accessed from here.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        NPTEL Registration is Live |  Nov 16, 2022\n        \n        \n        \n        \n        \n        My course on Getting Started with Competitive Programming will run from 23 Jan 2023 to 14 Apr 2023. The deadline to register is 30th January 2023. I hope you have a chance to check it out if it is of interest to you!\n(More generally, the NPTEL Jan 2023 semester is open with courses across engineering, humanities and social sciences. You can enrol in these courses at no cost here and get a certification by taking up a proctored exam for a nominal fee of Rs 1,000 per course.)\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Romeo and Juliet Meeting in Forest Like Regions |  Sep 20, 2022\n        \n        \n        \n        \n        \n        Joint work with Manas Mulpuri, Prafullkumar Tale, and Gaurav Viramgami ⸱ To Appear at FSTTCS 2022 ⸱ Preprint available from ArXiV\nThe game of rendezvous with adversaries is a game on a graph played by two players: Facilitator and Divider. Facilitator has two agents and Divider has a team of k agents. While the initial positions of Facilitator’s agents are fixed, Divider gets to select the initial positions of his agents. Then, they take turns to move their agents to adjacent vertices (or stay put) with Facilitator’s goal to bring both her agents at same vertex and Divider’s goal to prevent it. The computational question of interest is to determine if Facilitator has a winning strategy against Divider with k agents. In this work, we prove that this problem is hard even when the graph is very close to a forest.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Diverse Non Crossing Matchings |  Jun 20, 2022\n        \n        \n        \n        \n        \n        Joint work with Harshil Mittal and Sarasati Nanoti ⸱ To Appear at CCCG 2022\nA perfect matching M on a set P of n points is a collection of line segments with endpoints from P such that every point belongs to exactly one segment. A matching is non-crossing if the line segments do not cross. We introduce a notion of distance between non-crossing matchings, and investigate the complexity of the problem of finding matchings that are far apart with respect to this notion of distance.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Solo Chess |  Mar 23, 2022\n        \n        \n        \n        \n        \n        Joint work with N. R. Aravind and Harshil Mittal ⸱ To appear at FUN 2022 ⸱ Preprint available from ArXiV\nWe introduce a generalization of “Solo Chess”, a single-player variant of the game that can be played on chess.com. We show that this version of the game is NP-complete even if played only by rooks with at most two captures left, or only by queens with exactly two captures left. On the other hand, solvable instances of rooks on 1D boards and pawns on 2D boards can efficiently characterized. Find out more on Twitter or at the blog.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        CSE Open House |  Mar 12, 2022\n        \n        \n        \n        \n        \n        Members of the discipline of Computer Science and Engineering just concluded a virtual open house. You can now find out more about research directions in CSE at IIT Gandhinagar and the research opportunities that we offer. Please share these links with anyone that you think would find them useful!\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Eternal Vertex Cover |  Mar 11, 2022\n        \n        \n        \n        \n        \n        Joint work with Saraswati Nanoti ⸱ To appear at CSR 2022 ⸱ Preprint available from ArXiV\nEternal Vertex Cover is a dynamic variant of the vertex cover problem. The complexity of the problem on bipartite graphs is open, as is the question of whether the problem admits a polynomial kernel. We settle both these questions by showing that Eternal Vertex Cover is NP-hard and does not admit a polynomial compression even on bipartite graphs of diameter six. We also show that the problem admits a polynomial time algorithm on the class of cobipartite graphs.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Imbalance Parameterized by Twin Cover |  Dec 4, 2021\n        \n        \n        \n        \n        \n        Joint work with Harshil Mittal ⸱ Published in Theoretical Computer Science (Dec 2021) ⸱ A shorter version was accepted at COCOON 2020 ⸱ Preprint available from ArXiV\nImbalance is a layout optimization problem, where we would like to order the vertices of a graph so that, roughly speaking, vertices have their neighbors split up as equally as possible on their left and right. We examine the parameterized complexity of the problem with respect to a structural parameter called twin cover.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        NPTEL Registration is Live |  Dec 1, 2021\n        \n        \n        \n        \n        \n        My course on Getting Started with Competitive Programming will run from 24 Jan 2022 to 15 Apr 2022. The deadline to register is 31st January 2022.\n(More generally, the NPTEL Jan 2022 semester is open with courses across engineering, humanities and social sciences. You can enrol in these courses at no cost here and get a certification by taking up a proctored exam for a nominal fee of Rs 1,000 per course.)\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        FUN 2022 Dates Announced |  Nov 30, 2021\n        \n        \n        \n        \n        \n        Submit your most fun work to FUN 2022! Also spread the word with a retweet :)\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Local Fair Division |  Nov 22, 2021\n        \n        \n        \n        \n        \n        Joint work with Debanuj Nayak ⸱ Accepted at CALDAM 2022 ⸱ Preprint available from ArXiV.\nThese developments explore the complexity of finding envy-free allocations of indivisible items in settings where envy is only experienced between friends, the valuations over items are binary, and the social network over agents is given by an undirected graph.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        Two New NPTEL Courses! |  Jul 14, 2021\n        \n        \n        \n        \n        \n        Here’s a Twitter thread with more detailsl\nI'll be co-teaching a couple of new courses this August on the NPTEL platform. The first is about competitive programming (co-taught with Arjun Arul from Codechef) and the second is an introduction to parameterized algorithms (co-taught with Saket Saurabh from IMSc). Both are meant as follow ups to a first undergraduate algorithms course.\n        \n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "talks/2022-aarohan/index.html#act-i",
    "href": "talks/2022-aarohan/index.html#act-i",
    "title": "Succeeding in Grad School",
    "section": "Act I",
    "text": "Act I\n\n\nBreadth\nv/s\nDepth"
  },
  {
    "objectID": "talks/2022-aarohan/index.html#act-i-1",
    "href": "talks/2022-aarohan/index.html#act-i-1",
    "title": "Succeeding in Grad School",
    "section": "Act I",
    "text": "Act I\n\n\nBreadth\nv/s\nDepth"
  },
  {
    "objectID": "talks/index.html",
    "href": "talks/index.html",
    "title": "Talks",
    "section": "",
    "text": "Talks\n\n \n\nThe slides for most of my talks are available from here, and several recordings are on this Youtube playlist.\n\n\n\n\n\n\nComing Soon\n\n\n\nA few tutorial-style talks are missing from this list, they will be added soon.\n\n\n\n \n\n\nFeaturedAll\n\n\n\n \n\n\n\n\n    \n            \n                \n                    2022\n                \n                \n                    Games of Pursuit and Evasion \n                    STCS Vigyan Vidushi 2022 Distinguished Lecture \n                    TIFR, Mumbai\n                \n                \n                           \n                \n                \n                           \n                \n            \n            \n                \n                    2022\n                \n                \n                    History of Algorithms: The Worst Case and Beyond \n                    History of Ideas 2.0 (Seminar Series) \n                    Virtual (organized by IIT Gandhinagar)\n                \n                \n                           \n                \n                \n                           \n                \n            \n            \n                \n                    2022\n                \n                \n                    Parameterized Approaches to Kemeny Rank Aggregation \n                    Bangalore Theory Seminars \n                    Virtual (organized by CSA, Indian Institute of Science and MSR Bangalore)\n                \n                \n                           \n                \n                \n                           \n                \n            \n            \n                \n                    2020\n                \n                \n                    Fair Division with Minimal Sharing \n                    COMSOC Video Seminar Rump Session \n                    Virtual\n                \n                \n                \n                \n                           \n                \n            \n            \n                \n                    2019\n                \n                \n                    Evolution of Trust \n                    Summer Research Internship Program Seminar Series \n                    IIT Gandhinagar\n                \n                \n                \n                \n                           \n                \n            \n\n\n\nNo matching items\n\n\n\n\n\n \n\n\n\n\n    \n        \n            \n                2022\n            \n            \n                A Few Algorithmic Puzzles (and why you should care) \n                Department Seminar \n                Virtual (organized by SSN College of Engineering)\n            \n            \n                       \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                A career in academia - why and why not? \n                ACM-W India Grad Cohort Workshop \n                IIT Jodhpur\n            \n            \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                Current Research Directions in Fair Division \n                ACM Goa Chapter Seminar Series \n                Virtual\n            \n            \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                Games of Pursuit and Evasion \n                STCS Vigyan Vidushi 2022 Distinguished Lecture \n                TIFR, Mumbai\n            \n            \n                       \n            \n            \n                       \n            \n        \n        \n            \n                2022\n            \n            \n                History of Algorithms: The Worst Case and Beyond \n                History of Ideas 2.0 (Seminar Series) \n                Virtual (organized by IIT Gandhinagar)\n            \n            \n                       \n            \n            \n                       \n            \n        \n        \n            \n                2022\n            \n            \n                On Fair Division with Binary Valuations Respecting Social Networks \n                Workshop on Computation and Economics \n                Ashoka University\n            \n            \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                Panel discussion on \"The Source Code: Foundational Literacy Numeracy Digitacy and Beyond\" \n                Raising Learners For India 2040, a Karadi Path event \n                The Shri Ram Universal School, Lodha Lakeshore Greens, Palava\n            \n            \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                Parameterized Approaches to Kemeny Rank Aggregation \n                Bangalore Theory Seminars \n                Virtual (organized by CSA, Indian Institute of Science and MSR Bangalore)\n            \n            \n                       \n            \n            \n                       \n            \n        \n        \n            \n                2022\n            \n            \n                Problem Solving with Python \n                Paradox Workshop, a Convocation Event for the IITM Online BSc Degree Program \n                IIT Madras\n            \n            \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                Programming Beyond Block Coding \n                Coding Bootcamp for Innovation Club Students \n                Science City Ahmedabad (organized by GUJCOST)\n            \n            \n            \n            \n            \n        \n        \n            \n                2022\n            \n            \n                The Games we Play \n                FDP on Futuristic Technologies in the field of IT \n                LD College of Engineering\n            \n            \n            \n            \n            \n        \n        \n            \n                2021\n            \n            \n                Algorithmic Aspects of Firefighting \n                a short talk given as a part of the INAE webinar series \n                Virtual\n            \n            \n            \n            \n            \n        \n        \n            \n                2021\n            \n            \n                Panel discussion on Women in Computing Panel on PhD Opportunities in India \n                CSA Golden Jubilee lecture series \n                CSA, Indian Institute of Science\n            \n            \n            \n            \n            \n        \n        \n            \n                2021\n            \n            \n                Party Nominations \n                a talk at ReLaX — a Workshop on Games \n                Virtual (organized by Chennai Mathematical Institute)\n            \n            \n            \n            \n            \n        \n        \n            \n                2020\n            \n            \n                Fair Division with Minimal Sharing \n                COMSOC Video Seminar Rump Session \n                Virtual\n            \n            \n            \n            \n                       \n            \n        \n        \n            \n                2020\n            \n            \n                Parameterized Algorithms for Variants of Dominating Set \n                Workshop on Recent Trends Domination in Graphs - Algorithms, Complexity and Applications \n                Virtual (organized by NIT Warangal)\n            \n            \n            \n            \n            \n        \n        \n            \n                2019\n            \n            \n                Chamberlin-Courant on Restricted Domains \n                Recent Trends in Algorithms \n                National Institute of Science Education and Research, Bhubaneswar\n            \n            \n            \n            \n            \n        \n        \n            \n                2019\n            \n            \n                Early Career Researcher Presentation \n                13th Inter-Research-Institute Student Seminar in Computer Science (IRISS) \n                Rajagiri School of Engineering and Technology\n            \n            \n            \n            \n            \n        \n        \n            \n                2019\n            \n            \n                Evolution of Trust \n                Summer Research Internship Program Seminar Series \n                IIT Gandhinagar\n            \n            \n            \n            \n                       \n            \n        \n        \n            \n                2019\n            \n            \n                Explorable Explanations - Interactive Essays \n                Winter Institute in Digital Humanities \n                IIT Gandhinagar\n            \n            \n            \n            \n            \n        \n        \n            \n                2019\n            \n            \n                Firefighting with Critical Nodes \n                CSA50 - Pratiksha Trust Workshop on Theoretical Computer Science \n                CSA, Indian Institute of Science, Bangalore\n            \n            \n            \n            \n            \n        \n        \n            \n                2019\n            \n            \n                On Stable Matchings \n                Keynote Talk at the ACM India Student Chapters Summit \n                Manipal University, Jaipur\n            \n            \n            \n            \n            \n        \n        \n            \n                2018\n            \n            \n                Technical presentation skills versus interpersonal skills (joint presentation with Varsha Apte) \n                First ACM India Grad Cohort Workshop for Women in Computing \n                IIT Bombay\n            \n            \n            \n            \n            \n        \n        \n            \n                2017\n            \n            \n                An Introduction to Parameterized Algorithms \n                Pre-Conference Workshop on Graph Algorithms (13th ADMA Conference) \n                SSN College\n            \n            \n            \n            \n            \n        \n        \n            \n                2017\n            \n            \n                Efficient Algorithms for Hard Problems on Structured Electorates \n                Workshop on Aspects of Computation \n                National University of Singapore\n            \n            \n            \n            \n            \n        \n        \n            \n                2016\n            \n            \n                An Introduction to Computational Social Choice \n                Workshop on Game Theory and Optimization \n                CSA, Indian Institute of Science\n            \n            \n            \n            \n            \n        \n        \n            \n                2016\n            \n            \n                Efficient Algorithms for Hard Problems on Structured Electorates \n                Workshop on Rangoli of Algorithms \n                Chennai Mathematical Institute\n            \n            \n            \n            \n            \n        \n        \n            \n                2016\n            \n            \n                Elicitation for Preferences Single Peaked on Trees \n                CS-Econ Seminar Series \n                Duke University\n            \n            \n            \n            \n            \n        \n        \n            \n                2016\n            \n            \n                Parameterized Algorithms \n                Tutorial Talk \n                Duke University\n            \n            \n            \n            \n            \n        \n        \n            \n                2016\n            \n            \n                Parameterized Algorithms for Computational Social Choice \n                Workshop on Game Theory and Optimization \n                Indian Institute of Science\n            \n            \n            \n            \n            \n        \n        \n            \n                2015\n            \n            \n                Glimpses of Algebraic Graph Theory and Linear Algebra Methods in Combinatorics \n                Workshop on Linear Algebra and Related Topics at the School of Mathematics and Computing Sciences \n                Rani Channamma University, Belagavi\n            \n            \n            \n            \n            \n        \n        \n            \n                2015\n            \n            \n                On the Planar F-Deletion Problem \n                Fourth India-Taiwan Conference on Discrete Mathematics \n                IIT Madras\n            \n            \n            \n            \n            \n        \n        \n            \n                2015\n            \n            \n                Some Algorithmic Excursions \n                Science Academies Education Program, Workshop for Pre-University Students in Elementary Mathematics \n                Christ College, Bangalore\n            \n            \n            \n            \n            \n        \n        \n            \n                2014\n            \n            \n                Iterative Compression for FVS \n                Department  Seminar \n                IIIT Bangalore\n            \n            \n            \n            \n            \n        \n        \n            \n                2014\n            \n            \n                Max $q$-Colorable Induced Subgraph Problem on Perfect Graphs \n                Graph Modification Problems \n                Dagstuhl, Germany\n            \n            \n            \n            \n            \n        \n        \n            \n                2014\n            \n            \n                Parameterized Graph Modification - A Modern Perspective \n                New Developments in Exact Algorithms and Lower Bounds (Pre-FSTTCS Workshop) \n                IIT Delhi\n            \n            \n            \n            \n            \n        \n        \n            \n                2012\n            \n            \n                Connected Dominating Set and Short Cycles \n                Department Seminar \n                Indian Statistical Institute, Bangalore\n            \n            \n            \n            \n            \n        \n        \n            \n                2012\n            \n            \n                From FVS to F-deletion - the Story of a Simple Algorithm \n                Department Seminar \n                VCLA, Technical University of Vienna\n            \n            \n            \n            \n            \n        \n        \n            \n                2012\n            \n            \n                Kernelization \n                Chennai Update Meeting on Parameterized Complexity \n                Institute of Mathematical Sciences, Chennai\n            \n            \n            \n            \n            \n        \n        \n            \n                2012\n            \n            \n                Kernels for Planar F-Deletion \n                Data Reduction and Problem Kernels \n                Dagstuhl, Germany\n            \n            \n            \n            \n            \n        \n        \n            \n                2012\n            \n            \n                Separators with Non-Hereditary Properties \n                Mini-Workshop on Logic, Proofs and Algorithms \n                VCLA, Technical University of Vienna\n            \n            \n            \n            \n            \n        \n        \n            \n                2011\n            \n            \n                Efficient Simplification - Polynomial Time Revisited \n                Department Seminar \n                CSA, Indian Institute of Science\n            \n            \n            \n            \n            \n        \n        \n            \n                2010\n            \n            \n                Connected Dominating Set and Short Cycles \n                Algorithms Seminar Series \n                University of Bergen, Norway\n            \n            \n            \n            \n            \n        \n        \n            \n                2010\n            \n            \n                Efficient Simplification - The (im)possibilities \n                IMPECS School on Parameterized Complexity \n                Institute for Mathematical Sciences\n            \n            \n            \n            \n            \n        \n        \n            \n                2010\n            \n            \n                Expansions for Reductions \n                Workshop on Kernelization \n                Lorentz Center, Netherlands\n            \n            \n            \n            \n            \n        \n        \n            \n                2010\n            \n            \n                Iterative Compression ---  Try, try, till you succeed --- or fail. \n                Kalasalingam University, Madurai, and Institute Seminar Week \n                The Institute of Mathematical Sciences\n            \n            \n            \n            \n            \n        \n        \n            \n                2010\n            \n            \n                Lower Bounds on Kernelization \n                Department Seminar \n                Chalmers University, Sweden\n            \n            \n            \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\n\n×\n\nA Few Algorithmic Puzzles (and why you should care)\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nA Few Algorithmic Puzzles (and why you should care)\n\n\n \n\n\n\n\n\n\n\n×\n\nThe Games we Play\n\n\n \n\n\n\n\n\n\n\n×\n\nThe Games we Play\n\n\n \n\n\n\n\n\n\n\n×\n\nProgramming Beyond Block Coding\n\n\n \n\n\n\n\n\n\n\n×\n\nProgramming Beyond Block Coding\n\n\n \n\n\n\n\n\n\n\n×\n\nOn Fair Division with Binary Valuations Respecting Social Networks\n\n\n \n\n\n\n\n\n\n\n×\n\nOn Fair Division with Binary Valuations Respecting Social Networks\n\n\n \n\n\n\n\n\n\n\n×\n\nProblem Solving with Python\n\n\n \n\n\n\n\n\n\n\n×\n\nProblem Solving with Python\n\n\n \n\n\n\n\n\n\n\n×\n\nHistory of Algorithms: The Worst Case and Beyond\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nHistory of Algorithms: The Worst Case and Beyond\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nGames of Pursuit and Evasion\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nGames of Pursuit and Evasion\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nA career in academia - why and why not?\n\n\n \n\n\n\n\n\n\n\n×\n\nA career in academia - why and why not?\n\n\n \n\n\n\n\n\n\n\n×\n\nPanel discussion on “The Source Code: Foundational Literacy Numeracy Digitacy and Beyond”\n\n\n \n\n\n\n\n\n\n\n×\n\nPanel discussion on “The Source Code: Foundational Literacy Numeracy Digitacy and Beyond”\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Approaches to Kemeny Rank Aggregation\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nParameterized Approaches to Kemeny Rank Aggregation\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nCurrent Research Directions in Fair Division\n\n\n \n\n\n\n\n\n\n\n×\n\nCurrent Research Directions in Fair Division\n\n\n \n\n\n\n\n\n\n\n×\n\nPanel discussion on Women in Computing Panel on PhD Opportunities in India\n\n\n \n\n\n\n\n\n\n\n×\n\nPanel discussion on Women in Computing Panel on PhD Opportunities in India\n\n\n \n\n\n\n\n\n\n\n×\n\nAlgorithmic Aspects of Firefighting\n\n\n \n\n\n\n\n\n\n\n×\n\nAlgorithmic Aspects of Firefighting\n\n\n \n\n\n\n\n\n\n\n×\n\nParty Nominations\n\n\n \n\n\n\n\n\n\n\n×\n\nParty Nominations\n\n\n \n\n\n\n\n\n\n\n×\n\nFair Division with Minimal Sharing\n\n\n \n\n\n\n\n\n\n\n×\n\nFair Division with Minimal Sharing\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nParameterized Algorithms for Variants of Dominating Set\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Algorithms for Variants of Dominating Set\n\n\n \n\n\n\n\n\n\n\n×\n\nExplorable Explanations - Interactive Essays\n\n\n \n\n\n\n\n\n\n\n×\n\nExplorable Explanations - Interactive Essays\n\n\n \n\n\n\n\n\n\n\n×\n\nOn Stable Matchings\n\n\n \n\n\n\n\n\n\n\n×\n\nOn Stable Matchings\n\n\n \n\n\n\n\n\n\n\n×\n\nChamberlin-Courant on Restricted Domains\n\n\n \n\n\n\n\n\n\n\n×\n\nChamberlin-Courant on Restricted Domains\n\n\n \n\n\n\n\n\n\n\n×\n\nFirefighting with Critical Nodes\n\n\n \n\n\n\n\n\n\n\n×\n\nFirefighting with Critical Nodes\n\n\n \n\n\n\n\n\n\n\n×\n\nEarly Career Researcher Presentation\n\n\n \n\n\n\n\n\n\n\n×\n\nEarly Career Researcher Presentation\n\n\n \n\n\n\n\n\n\n\n×\n\nEvolution of Trust\n\n\n \n\n\n\n\n\n\n\n×\n\nEvolution of Trust\n\n\n \n\n\n\n\n\n\n\n\n\n×\n\nTechnical presentation skills versus interpersonal skills (joint presentation with Varsha Apte)\n\n\n \n\n\n\n\n\n\n\n×\n\nTechnical presentation skills versus interpersonal skills (joint presentation with Varsha Apte)\n\n\n \n\n\n\n\n\n\n\n×\n\nAn Introduction to Parameterized Algorithms\n\n\n \n\n\n\n\n\n\n\n×\n\nAn Introduction to Parameterized Algorithms\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Algorithms for Hard Problems on Structured Electorates\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Algorithms for Hard Problems on Structured Electorates\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Algorithms for Hard Problems on Structured Electorates\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Algorithms for Hard Problems on Structured Electorates\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Algorithms for Computational Social Choice\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Algorithms for Computational Social Choice\n\n\n \n\n\n\n\n\n\n\n×\n\nElicitation for Preferences Single Peaked on Trees\n\n\n \n\n\n\n\n\n\n\n×\n\nElicitation for Preferences Single Peaked on Trees\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Algorithms\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Algorithms\n\n\n \n\n\n\n\n\n\n\n×\n\nAn Introduction to Computational Social Choice\n\n\n \n\n\n\n\n\n\n\n×\n\nAn Introduction to Computational Social Choice\n\n\n \n\n\n\n\n\n\n\n×\n\nOn the Planar F-Deletion Problem\n\n\n \n\n\n\n\n\n\n\n×\n\nOn the Planar F-Deletion Problem\n\n\n \n\n\n\n\n\n\n\n×\n\nGlimpses of Algebraic Graph Theory and Linear Algebra Methods in Combinatorics\n\n\n \n\n\n\n\n\n\n\n×\n\nGlimpses of Algebraic Graph Theory and Linear Algebra Methods in Combinatorics\n\n\n \n\n\n\n\n\n\n\n×\n\nSome Algorithmic Excursions\n\n\n \n\n\n\n\n\n\n\n×\n\nSome Algorithmic Excursions\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Graph Modification - A Modern Perspective\n\n\n \n\n\n\n\n\n\n\n×\n\nParameterized Graph Modification - A Modern Perspective\n\n\n \n\n\n\n\n\n\n\n×\n\nIterative Compression for FVS\n\n\n \n\n\n\n\n\n\n\n×\n\nIterative Compression for FVS\n\n\n \n\n\n\n\n\n\n\n×\n\nMax q-Colorable Induced Subgraph Problem on Perfect Graphs\n\n\n \n\n\n\n\n\n\n\n×\n\nMax q-Colorable Induced Subgraph Problem on Perfect Graphs\n\n\n \n\n\n\n\n\n\n\n×\n\nKernels for Planar F-Deletion\n\n\n \n\n\n\n\n\n\n\n×\n\nKernels for Planar F-Deletion\n\n\n \n\n\n\n\n\n\n\n×\n\nSeparators with Non-Hereditary Properties\n\n\n \n\n\n\n\n\n\n\n×\n\nSeparators with Non-Hereditary Properties\n\n\n \n\n\n\n\n\n\n\n×\n\nFrom FVS to F-deletion - the Story of a Simple Algorithm\n\n\n \n\n\n\n\n\n\n\n×\n\nFrom FVS to F-deletion - the Story of a Simple Algorithm\n\n\n \n\n\n\n\n\n\n\n×\n\nKernelization\n\n\n \n\n\n\n\n\n\n\n×\n\nKernelization\n\n\n \n\n\n\n\n\n\n\n×\n\nConnected Dominating Set and Short Cycles\n\n\n \n\n\n\n\n\n\n\n×\n\nConnected Dominating Set and Short Cycles\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Simplification - Polynomial Time Revisited\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Simplification - Polynomial Time Revisited\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Simplification - The (im)possibilities\n\n\n \n\n\n\n\n\n\n\n×\n\nEfficient Simplification - The (im)possibilities\n\n\n \n\n\n\n\n\n\n\n×\n\nExpansions for Reductions\n\n\n \n\n\n\n\n\n\n\n×\n\nExpansions for Reductions\n\n\n \n\n\n\n\n\n\n\n×\n\nConnected Dominating Set and Short Cycles\n\n\n \n\n\n\n\n\n\n\n×\n\nConnected Dominating Set and Short Cycles\n\n\n \n\n\n\n\n\n\n\n×\n\nLower Bounds on Kernelization\n\n\n \n\n\n\n\n\n\n\n×\n\nLower Bounds on Kernelization\n\n\n \n\n\n\n\n\n\n\n×\n\nIterative Compression — Try, try, till you succeed — or fail.\n\n\n \n\n\n\n\n\n\n\n×\n\nIterative Compression — Try, try, till you succeed — or fail.\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "talks/talks-old.html",
    "href": "talks/talks-old.html",
    "title": "Neeldhara",
    "section": "",
    "text": "Year\nTitle\n\n\n\n\n2022\nOn Fair Division with Binary Valuations Respecting Social Networks  Workshop on Computation and Economics, Ashoka University\n\n\n2022\nProblem Solving with Python  a workshop conducted at Paradox, an NPTEL offline Convocation Event, IIT Madras\n\n\n2022\nThe Games we Play  STCS Vigyan Vidushi 2022 Distinguished Lecture, TIFR\n\n\n2022\nA career in academia: why and why not?  ACM-W India Grad Cohort Workshop, IIT Jodhpur\n\n\n2022\nPanel discussion on “The Source Code: Foundational Literacy Numeracy Digitacy and Beyond”  Raising Learners For India 2040, a Karadi Path event\n\n\n2022\nParameterized Approaches to Kemeny Rank Aggregation  Bangalore Theory Seminars, CSA, Indian Institute of Science and MSR Bangalore\n\n\n2022\nCurrent Research Directions in Fair Division  ACM Goa Chapter Seminar Series\n\n\n2021\nPanel discussion on Women in Computing Panel on PhD Opportunities in India  CSA, Indian Institute of Science\n\n\n2021\nAlgorithmic Aspects of Firefighting  a short talk given as a part of the INAE webinar series\n\n\n2021\nParty Nominations  a talk at ReLaX — a Workshop on Games Chennai Mathematical Institute\n\n\n2020\nParameterized Algorithms for Variants of Dominating Set  series of invited lectures in a virtual workshop on  Recent Trends Domination in Graphs - Algorithms, Complexity and Applications,  organized by NIT Warangal\n\n\n2019\nExplorable Explanations: Interactive Essays  Winter Institute in Digital Humanities, IIT Gandhinagar\n\n\n2019\nOn Stable Matchings  Keynote Talk at the ACM India Student Chapters Summit, Manipal University\n\n\n2019\nChamberlin-Courant on Restricted Domains  Recent Trends in Algorithms, National Institute of Science Education and Research, Bhubaneswar\n\n\n2019\nFirefighting with Critical Nodes  CSA50 - Pratiksha Trust Workshop on Theoretical Computer Science,  Indian Institute of Science, Bangalore\n\n\n2019\nEarly Career Researcher Presentation  13th Inter-Research-Institute Student Seminar in Computer Science,  Rajagiri School of Engineering and Technology\n\n\n2018\nTechnical presentation skills versus interpersonal skills  (joint presentation with Varsha Apte)  First ACM India Grad Cohort Workshop for Women in Computing, IIT Bombay\n\n\n2017\nAn Introduction to Parameterized Algorithms  Pre-Conference Workshop on Graph Algorithms (13th ADMA Conference), SSN College\n\n\n2017\nEfficient Algorithms for Hard Problems on Structured Electorates  Invited talk at the workshop on Aspects of Computation, National University of Singapore\n\n\n2016\nEfficient Algorithms for Hard Problems on Structured Electorates  Workshop on Rangoli of Algorithms, Chennai Mathematical Institute\n\n\n2016\nParameterized Algorithms for Computational Social Choice  Workshop on Game Theory and Optimization, Indian Institute of Science\n\n\n2016\nElicitation for Preferences Single Peaked on Trees  CS-Econ Seminar Series, Duke University\n\n\n2016\nParameterized Algorithms  Tutorial Talk, Duke University\n\n\n2016\nAn Introduction to Computational Social Choice  Workshop on Game Theory and Optimization, Indian Institute of Science\n\n\n2015\nOn the Planar F-Deletion Problem  Fourth India-Taiwan Conference on Discrete Mathematics, IIT Madras\n\n\n2015\nGlimpses of Algebraic Graph Theory and Linear Algebra Methods in Combinatorics  Workshop on Linear Algebra and Related Topics at the School of Mathematics and Computing Sciences, Rani Channamma University, Belagavi\n\n\n2015\nSome Algorithmic Excursions  Science Academies’ Education Program, Workshop for Pre-University Students in Elementary Mathematics, at Christ College, Bangalore\n\n\n2014\nParameterized Graph Modification: A Modern Perspective  New Developments in Exact Algorithms and Lower Bounds,  Pre-FSTTCS Workshop, IIT Delhi\n\n\n2014\nIterative Compression for FVS  IIIT Bangalore\n\n\n2014\nMax q-Colorable Induced Subgraph Problem on Perfect Graphs  Graph Modification Problems, Dagstuhl, Germany\n\n\n2012\nKernels for Planar F-Deletion  Data Reduction and Problem Kernels, Dagstuhl, Germany\n\n\n2012\nSeparators with Non-Hereditary Properties  Mini-Workshop on Logic, Proofs and Algorithms, VCLA\n\n\n2012\nFrom FVS to F-deletion: the Story of a Simple Algorithm  VCLA, Technical University of Vienna\n\n\n2012\nKernelization  Chennai Update Meeting on Parameterized Complexity,  Institute of Mathematical Sciences, Chennai\n\n\n2012\nConnected Dominating Set and Short Cycles  Indian Statistical Institute, Bangalore\n\n\n2011\nEfficient Simplification: Polynomial Time Revisited  Indian Institute of Science\n\n\n2010\nEfficient Simplification: The (im)possibilities  IMPECS School on Parameterized Complexity, Institute for Mathematical Sciences\n\n\n2010\nExpansions for Reductions  Workshop on Kernelization, Lorentz Center, Netherlands\n\n\n2010\nConnected Dominating Set and Short Cycles  Algorithms Seminar Series, University of Bergen, Norway\n\n\n2010\nLower Bounds on Kernelization  Chalmers University, Sweden\n\n\n2010\nIterative Compression: Try, try, till you succeed — or fail.  Kalasalingam University, Madurai, and Institute Seminar Week, The Institute of Mathematical Sciences"
  },
  {
    "objectID": "tgif/blue-eyed-islanders-puzzle/index.html",
    "href": "tgif/blue-eyed-islanders-puzzle/index.html",
    "title": "The Blue-Eyed Islanders",
    "section": "",
    "text": "This puzzle is variously attributed (including to “some dude on the street in Boston named Joel”), and was contributed by Manoj Gupta in our first meetup.\n\n\n\nYou can read up on a relatively standard version of the puzzle from Terrance Tao’s blog or here at XKCD.\nAkash proposed a variation where not everyone sees everyone, but people see each other via a graph. What goes on in such a setting? We don’t quite know!\nThe links have pointers to other variants and the blog also sparked a rather long discussion — enjoy thinking about this and looking things up!"
  },
  {
    "objectID": "tgif/look-and-see-sequence/index.html",
    "href": "tgif/look-and-see-sequence/index.html",
    "title": "Look and Say Sequence",
    "section": "",
    "text": "Source: Attributed to Conway.\n [Spoiler Alert] The problem is adapted from the Green Chicken Problems - November 15, 2014 – 36th Competition.\n\n\n\nConway’s see-and-say (or the look-and-say) sequence has fascinated people for years, and is a fun, non-standard example of a sequence. Starting with a_1 = 1, we define a_{n+1} as the sequence obtained by saying the previous sequence aloud. The first few terms are 1, 11 (one one), 21 (two ones), 1211 (one two, one one), 111221 (one one, one two, two ones), 312211 (three ones, two twos, one one).\nWe observe that the largest number in the 2023th term of this sequence is a 7, and coincidentally, 2023 is the 7th year of the Btech program in CSE at IITGN. This coincidence makes us very happy.\nHowever, is our observation correct?"
  },
  {
    "objectID": "tgif/cop-and-robber-on-the-number-line/index.html",
    "href": "tgif/cop-and-robber-on-the-number-line/index.html",
    "title": "Cop and Robber on a Number Line",
    "section": "",
    "text": "H/T to Ashutosh.\n\n\n\nAt time t = 0, a robber is at some point x on the number line. Over time, the robber moves at some uniform speed s to the left or the right from its starting position. There is a cop who can choose to be anywhere on the number line at any point of time. The cop cannot see the robber and does not know the initial location of the robber. The cop also knows nothing about the speed s and direction of movement.\nIf the cop and the robber occupy the same location at the same time instant, then the robber is said to be captured. Does the cop have a strategy to capture the robber in finite time?"
  },
  {
    "objectID": "tgif/estimating-pi/index.html",
    "href": "tgif/estimating-pi/index.html",
    "title": "Estimating Pi",
    "section": "",
    "text": "Sourced from Twitter on Pi Day (this also doubles up as a hint).\n\n\n\nTake two random numbers X and Y between 0 and 1.\nWhat is the probability that the integer nearest to X/Y is even?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nFolks, here’s one way to reason why this probability should be (5 - pi)/4.Even if the math doesn’t appeal to you, please don’t miss the key lesson at the end! pic.twitter.com/IDEsQCuRVZ\n\n— 10-K Diver (@10kdiver) March 15, 2022"
  },
  {
    "objectID": "tgif/hat-puzzles/index.html",
    "href": "tgif/hat-puzzles/index.html",
    "title": "Hat Puzzles",
    "section": "",
    "text": "We discussed a variety of puzzles in the genre of hat puzzles, which roughly have following story arc:\n\na bunch of (not necessarily finite (!!!)) people are in a location\nall of them are wearing hats of one of c colors, typically c = 2 (we will assume that hats are either red or blue)\nnobody knows the color of their own hat\nfolks can see the colors of other’s hats (but not necessarily all of them; this depends on the setting)\neveryone is tasked with determining/guessing the color of their own hat, and failure to get it right (most of the time) will usually lead to unpleasant outcomes\n\nA traditional special case is the following:\n\nThere are n people standing on a line.\nEveryone can see the colors of the hats of everyone ahead of them.\nA strategy for how one’s own hat color is determined can be coordinated in advance.\nStarting from the person who can see everyone else (and their hats, more importantly), to the person at the end who sees nothing, everyone spells out their guess of the color of their own hat loudly and clearly for everyone else to hear. There is no communication between poeple other than this.\nAll but one person must figure out the color of their hat correctly.\n\n\n\n\n\n\n\nA Strategy for the Finite Case\n\n\n\n\n\nThe first person says “red” if the number of red hats s/he sees is even, and “blue” otherwise. This person may be mistaken about the color of their own hat. However, knowing the rationale for what the first person called out, the second can tally up parities to determine the color of their own hat (e.g, if the first person said red and the second person sees an even number of red hats, they conclude they are wearing a blue hat, otherwise they know they are wearing a read hat; and so on).\n\n\n\nA crazier version is the following:\n\nThere are infinitely many people in a room.\nEveryone can see the colors of the hats of everyone else, but not their own.\nNobody can hear anyone else’s guess.\nEveryone guesses simultaneously.\nIs there a strategy to ensure that infinitely many guesses are correct?\n[Level Up]: Is there a strategy to ensure that at most finitely many guesses are wrong?\n\nThis is fun to think about, and you’re probably going to have to invoke something something axiom of choice something something to tackle the situation! Spoiler Alert!"
  },
  {
    "objectID": "tgif/coming-to-agreement/index.html",
    "href": "tgif/coming-to-agreement/index.html",
    "title": "Coming to Agreement",
    "section": "",
    "text": "Puzzle by Joel David Hamkins.\n\n\n\nThis is apparently a logic puzzle that comes up in admission interviews at Oxford:\n\n\nAn Oxford University admissions interview question. You are a contestant on a game show, known for having perfectly logical contestants. There is another contestant, whom you've never met, but whom you can count on to be perfectly logical, just as logical as you are.\n\n— Joel David Hamkins (@JDHamkins) December 26, 2021\n\n\nThis puzzle has since been featured on the Guardian. The full setting is reproduced below from here. The source also has extended discussions about possible solutions — you have been warned!\nYou are a contestant on a game show, known for having perfectly logical contestants. There is another contestant, whom you’ve never met, but whom you can count on to be perfectly logical, just as logical as you are.\nThe game is cooperative, so either you will both win or both lose, together. Imagine the stakes are very high—perhaps life and death. You and your partner are separated from one another, in different rooms. The game proceeds in turns—round 1, round 2, round 3, as many as desired to implement your strategy.\nOn each round, each contestant may choose either to end the game and announce a color (any color) to the game host or to send a message (any kind of message) to their partner contestant, to be received before the next round. Messages are sent simultaneously, crossing in transit.\nYou win the game if on some round both players opt to end the game and announce a color to the host and furthermore they do so with exactly the same color. That is, you win if you both halt the game on the same round with the same color. lf only one player announces a color, or if both do but the colors don’t match, then the game is over, but you have lost.\nRound 1 is about to begin. What do you do?\nVariations:\nAlternation variation. In this variation of the puzzle, the contestants alternate in their right to send messages—only contestant 1 can send on round 1, then contestant 2 on round 2 and so forth, but still they aim to announce the same color on a round. You are contestant 1—what do you do?\nCollision variation. In this variation, players may opt on each round either to end the game and announce a color, to send a message, or to do nothing. But the new thing is that if both players opt to send a message, then the messages collide and are not delivered, although an error message is generated (so the players know what happened). What do you do?\nPigeon variation. This version is like the alternating turn variation, except that now the contestants are separated at much greater distance, and the messages are sent by carrier pigeon, so neither can be sure that the messages actually arrive. You are contestant 1—what do you do?"
  },
  {
    "objectID": "tgif/hexagon-tiling-with-diamonds/index.html",
    "href": "tgif/hexagon-tiling-with-diamonds/index.html",
    "title": "Tiling a Hexagon with Diamonds",
    "section": "",
    "text": "Source: the back cover of Mathematical Puzzles: A Connoisseur’s Collection Paperback, by Peter Winkler; and h/t to D. Sivakumar for the pointer!\n\n\n\nA large regular hexagon is cut out of a triangular grid and tiled with diamonds (pairs of triangles glued together along an edge). Diamonds come in three varieties, depending on orientation; prove that precisely the same number of each variety must appear in the tiling.\nHere’s the image demonstrating the grid and the individual tiles from the book cover:\n\n\n\nShowing the triangular grid\n\n\nOne attempt is to see if we can peel off layers using induction: the innermost hexagon in the partially color-coded image below corresponds to a base case of sorts; but it’s not clear how one might extend this approach — at least working with a c layers at a time for some constant c — since it’s not clear that every tiling can be split up as a combination of a complete tiling of c outermost layers and the rest.\n\n\n\nExample tiling\n\n\nTurns out that the image on the book’s front cover is a pretty cool hint!\n\n\n\nHint"
  },
  {
    "objectID": "tgif/deaths-dice/index.html",
    "href": "tgif/deaths-dice/index.html",
    "title": "Death’s Dice",
    "section": "",
    "text": "Sourced from @3blue1brown’s Twitter.\n\n\n\n\n\nI'd like to tell you about a game/puzzle to help celebrate today.We'll call it \"Death's Dice\". (1/9) pic.twitter.com/6lportLU9V\n\n— Grant Sanderson (@3blue1brown) March 14, 2022\n\n\nA spoiler-free version of the thread above is reproduced below:\nDeath finds you. You plead with him that it’s too soon, and he agrees to a concession. Every year, he’ll roll a set of dice, and if it turns up snake eyes (both 1’s) he’ll take your life, otherwise, you get one more year.\nBut it’s not necessarily a normal pair of dice.\nOn the first year, both “dice” will only have two sides, numbered 1 and 2. So in that first year, there’s a 25% chance of rolling snake eyes and ending things there.\nOn the second year, he comes with tetrahedral dice, i.e. both are four-sided, numbered 1 through 4, and again only takes your life if he rolls two 1’s.\nThe next year, the dice are six-sided, after that, eight-sided, etc., etc.\nEach year you have a lower and lower chance of dying, but he’ll come back every year with a new set of dice, never stopping.\nYou might think the question now is something like “what’s your expected number of remaining years of life?”\nBut actually, Death gave you a pretty good deal.\nThe better question to ask here is “what’s the probability that you end up immortal?” That is, the probability that Death rolls infinitely many times, with his ever-growing dice, and never once turns up snake eyes.\n\n\n\n\n\n\nHint\n\n\n\n\n\n\n\n\nAn image that shows a square circumscribed inside a circle."
  },
  {
    "objectID": "tgif/minimizing-area/index.html",
    "href": "tgif/minimizing-area/index.html",
    "title": "Minimizing Area",
    "section": "",
    "text": "Source: The second problem in this video.\n\n\n\nThere is a rectangle and a path that goes from the bottom-left corner to the top-right. The path can only move upwards or towards the right. Draw a vertical line L through the rectangle. Now look at the area under the curve to the left of L, and the area above the curve to the right of L. Call this total area A_L. In the example figure below, L is the dotted line and A_L is the shaded area.\n\n\n\nArea associated with the path and a line L.\n\n\nWhat is the line L that minimizes A_L?"
  },
  {
    "objectID": "tgif/windmill/index.html",
    "href": "tgif/windmill/index.html",
    "title": "Windmill",
    "section": "",
    "text": "Source: IMO 2011, C3\n\n\n\n\n\n\nA hard puzzle with a beautiful solution.\n\n\n\n\nThe Problem\n\nLet \\mathcal{S} be a finite set of at least two points in the plane. Assume that no three points of \\mathcal{S} are collinear. By a windmill we mean a process as follows. Start with a line \\ell going through a point P \\in \\mathcal{S}. Rotate \\ell clockwise around the pivot P until the line contains another point Q of \\mathcal{S}. The point Q now takes over as the new pivot. This process continues indefinitely, with the pivot always being a point from \\mathcal{S}.\nShow that for a suitable P \\in \\mathcal{S} and a suitable starting line \\ell containing P, the resulting windmill will visit each point of \\mathcal{S} as a pivot infinitely often.\n\n Spoiler: a neat 3blue1brown video and lesson on the solution."
  },
  {
    "objectID": "tgif/ab-separation/index.html",
    "href": "tgif/ab-separation/index.html",
    "title": "AB Separation",
    "section": "",
    "text": "Shared by @10kdiver.\n\n\n\nA probability puzzle involving tournaments and elimination matches:\n\n\nHere’s a neat probability puzzle — somewhat counter-intuitive: pic.twitter.com/QA6jxaIYFT\n\n— 10-K Diver (@10kdiver) September 23, 2022\n\n\nTo begin with, a clarification: to say that Alex is the best player is to say that Alex will always win a match that he plays; and to say that Bob is the second best player is to say that Bob will win any match that he plays other than one against Alex. The puzzle asks for the probability that Bob emerges the runner up in the tournament. This is indicated in the tweet but the crop seems to hide it.\nSuppose we denote the players \\{a_1,a_2,a_3,a_4,b_1,b_2,b_3,b_4\\}, and say the players are initially matched up like so:\n(a_1,a_2); (a_3,a_4); (b_1,b_2); (b_3,b_4),\nand in particular we have:\n\none of the quarter finals will be between a_p and a_q for p \\in \\{1,2\\} and q \\in \\{3,4\\},\nthe quarter finals will be between b_r and b_s for r \\in \\{1,2\\} and s \\in \\{3,4\\}, and\nthe semi finals will be between an a-player and a b-player.\n\nA moment’s reflection reveals that for Bob to be a runner up, he should not meet Alex in the quarter-finals or earlier. This happens if and only if:\n\neither Alex is one of the a-players and Bob is one of the b-players, or\nBob is one of the a-players and Alex is one of the b-players.\n\nFrom here it is a counting argument. I was distracted by some idea of symmetry and originally jumped to the conclusion that the answer is one-half. Spoiler alert: I quickly learned that it’s not!"
  },
  {
    "objectID": "tgif/index.html",
    "href": "tgif/index.html",
    "title": "Puzzles from the TGIF Group",
    "section": "",
    "text": "This page chronicles puzzles that get shared in the TGIF Puzzle Group, an informal group of puzzle enthusiasts that meets on Fridays at IITGN. Even if you are not at IITGN, you’re welcome to join the discussions over at our Discord server! You can also subscribe to a feed for this series by clicking here.\nThe easiest way to contribute a puzzle to this list is to hop over the Discord server and post it, but you can also drop me a line at mail -AT- neeldhara.com if you prefer.\nTo filter by tags, enter one of the following in the search box:\nprobability • logic • paper • folding • cutting • tiling • graphs • game • chess • geometry\n\n\n\n\n \n\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n    \n        \n        \n            13 Jan, 2023        \n        \n        \n            Look and Say Sequence     \n        \n        \n            \n                    logic  \n            \n                \n                \n\n        \n        \n            06 Jan, 2023        \n        \n        \n            Tiling a Hexagon with Diamonds     \n        \n        \n            \n                    tiling  \n            \n                \n                \n\n        \n        \n            01 Jan, 2023        \n        \n        \n            Cop and Robber on a Number Line     \n        \n        \n            \n                    game  \n            \n                \n                \n\n        \n        \n            01 Jan, 2023        \n        \n        \n            Points and Lines     \n        \n        \n            \n                    geometry  \n            \n                \n                \n\n        \n        \n            10 Dec, 2022        \n        \n        \n            Minimizing Area     \n        \n        \n            \n                    geometry  \n            \n                \n                \n\n        \n        \n            28 Oct, 2022        \n        \n        \n            To Not Checkmate     \n        \n        \n            \n                    chess  \n                    game  \n            \n                \n                \n                \n\n        \n        \n            28 Oct, 2022        \n        \n        \n            HoneyBee Puzzle     \n        \n        \n            \n                    game  \n            \n                \n                \n\n        \n        \n            14 Oct, 2022        \n        \n        \n            Windmill     \n        \n        \n            \n                    geometry  \n            \n                \n                \n\n        \n        \n            14 Oct, 2022        \n        \n        \n            Burning Island     \n        \n        \n            \n                    logic  \n            \n                \n                \n\n        \n        \n            07 Oct, 2022        \n        \n        \n            Hat Puzzles     \n        \n        \n            \n                    logic  \n            \n                \n                \n\n        \n        \n            07 Oct, 2022        \n        \n        \n            AB Separation     \n        \n        \n            \n                    probability  \n            \n                \n                \n\n        \n        \n            07 Oct, 2022        \n        \n        \n            Folding Stamps     \n        \n        \n            \n                    folding  \n                    paper  \n            \n                \n                \n                \n\n        \n        \n            07 Oct, 2022        \n        \n        \n            Making Grids     \n        \n        \n            \n                    tiling  \n            \n                \n                \n\n        \n        \n            07 Oct, 2022        \n        \n        \n            Iwahiro's Square in Bag Puzzle     \n        \n        \n            \n                    folding  \n                    paper  \n            \n                \n                \n                \n\n        \n        \n            25 Mar, 2021        \n        \n        \n            Turn the LED on     \n        \n        \n            \n                    probability  \n            \n                \n                \n\n        \n        \n            25 Mar, 2021        \n        \n        \n            4 Person Gift Exchange     \n        \n        \n            \n                    probability  \n            \n                \n                \n\n        \n        \n            23 Mar, 2021        \n        \n        \n            Conway's Checkers     \n        \n        \n            \n                    game  \n            \n                \n                \n\n        \n        \n            23 Mar, 2021        \n        \n        \n            Coin Tossing     \n        \n        \n            \n                    probability  \n            \n                \n                \n\n        \n        \n            15 Mar, 2021        \n        \n        \n            Estimating Pi     \n        \n        \n            \n                    probability  \n            \n                \n                \n\n        \n        \n            15 Mar, 2021        \n        \n        \n            Coming to Agreement     \n        \n        \n            \n                    logic  \n            \n                \n                \n\n        \n        \n            15 Mar, 2021        \n        \n        \n            Death's Dice     \n        \n        \n            \n                    probability  \n            \n                \n                \n\n        \n        \n            14 Mar, 2021        \n        \n        \n            Find The Puppy     \n        \n        \n            \n                    logic  \n                    game  \n            \n                \n                \n                \n\n        \n        \n            11 Mar, 2021        \n        \n        \n            The Blue-Eyed Islanders     \n        \n        \n            \n                    logic  \n            \n                \n                \n\n        \n        \n            11 Mar, 2021        \n        \n        \n            Lighting Up a Grid     \n        \n        \n            \n                    graphs  \n            \n                \n                \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tgif/turn-the-led-on/index.html",
    "href": "tgif/turn-the-led-on/index.html",
    "title": "Turn the LED on",
    "section": "",
    "text": "Contributed by @10kdiver.\n\n\n\nAnother fun probability puzzle:\n\n\nEach switch has a 50/50 chance of being ON or OFF.The switches are all independent of each other.What’s the probability that the LED is on? pic.twitter.com/idQnJRqFnL\n\n— 10-K Diver (@10kdiver) March 25, 2022"
  },
  {
    "objectID": "tgif/conways-checkers/index.html",
    "href": "tgif/conways-checkers/index.html",
    "title": "Conway’s Checkers",
    "section": "",
    "text": "Puzzle attributed to John Horton Conway.\n\n\n\nSuppose you take the infinite square lattice and put solitaire pieces on all points (x,y) that lie on or below the x-axis. Using solitaire moves, can you reach a position where the point (0,5) is occupied?\nNote: A solitaire move consists in a piece jumping over a neighbouring piece to a vacant square and removing (or “taking”) the neighbouring piece.\nYou can attempt this challenge interactively here.\nHint: if you can’t get there, don’t feel too bad about it.\n\n\n\n\n\n\nSpoilers\n\n\n\n\n\nAn introduction to the problem featuring Zvezdelina Stankova:\n\n\nA description of the original proof based on coming up with an invariant involving the golden ratio:\n\n\nA description of the original proof based on coming up with an invariant involving the golden ratio, but in this case in real-time, while thinking out loud:\n\n\nA description of a more recent proof based on a rather clever and beautiful use of Fibonacci numbers:\n\n\nAnd by the way, if you are really keen on reaching row 5 here’s how you can do it with infinitely many moves!"
  },
  {
    "objectID": "tgif/4-person-gift-exchange/index.html",
    "href": "tgif/4-person-gift-exchange/index.html",
    "title": "4 Person Gift Exchange",
    "section": "",
    "text": "This puzzle by Professor Henk Tijms was contributed by @10kdiver.\n\n\n\nFirst the warm-up edition.\n\n\nHere's a beautiful probability puzzle inspired by Professor Henk Tijms (@Hendrikc44).See if you can solve it. The answer may surprise you!(I'll post a solution tomorrow.) pic.twitter.com/m1c8u0J5MN\n\n— 10-K Diver (@10kdiver) March 23, 2022\n\n\nNow for the harder version.\n\n\n\n\n\n\n\n\n\n\nA number of people will exchange gifts at a holiday party. Each person brings a gift to the party and attaches a label with a unique number to this gift. These numbers are also put on cards, which are deposited in a box and shuffled. Each person at the party then sequentially draws a card from the box, and receives the gift whose label corresponds to the number on the card drawn. If the number corresponds to his or her own gift, the card is returned to the box and the person draws another card. Of course, it is not possible for the last person to draw a second card.\nWhat is the probability that the last person is left with the card corresponding to his or her own present? In the simple case of two people, the probability is zero. The problem is also easy to solve in the case of three people, using a chance tree. It is no restriction to imagine that the persons are numbered as 1, 2 and 3 like the labels of their presents, and that they draw a card in this order. Then person 1 gets either the present with label 2 or the present with label 3, each with a probability of 1/2. If person 1 gets the present with label 3, then the conditional probability of the last person 3 to get his or her own present is zero. If person 1 gets the present with label 2, then the cards with labels 1 and 3 are left and person 2 draws the card with label 1 with probability of 1/2, in which case the last person 3 is left with the card of his or her own present. Therefore the probability that the last person will be left with the card of his or her own present is ½ × 0 + ½ × ½ = ¼.\nThe challenges for this week are these: What is the probability that the card left for the last person corresponds to his or her own present when there are four people at the party? What is the probability when there are five people at the party?\n\n\nSource NB. may be paywalled"
  },
  {
    "objectID": "tgif/folding-stamps/index.html",
    "href": "tgif/folding-stamps/index.html",
    "title": "Folding Stamps",
    "section": "",
    "text": "Source: Dave Richeson @divbyzero and Henry Dudeny.\n\n\n\nThe following is perhaps best attempted with a physical prop.\n\n\nYesterday's puzzles seem to be a hit, so here's another one, due to Henry Dudeny. Fold the paper so the squares end up in numerical order (1 on top, 8 on bottom, sequential in between, not necessarily \"face up\" in the stack, as shown). The first one is easier than the second. pic.twitter.com/oRGXl90mKp\n\n— Dave Richeson (@divbyzero) October 5, 2022\n\n\n\n\n\n\n\n\nHere’s a bit from the original source:\n\n\n\n\n\n\n\n\nScreenshot of a text containing the original problem"
  },
  {
    "objectID": "tgif/making-grids/index.html",
    "href": "tgif/making-grids/index.html",
    "title": "Making Grids",
    "section": "",
    "text": "Source: @algopuzzles and Micheal Brand.\n\n\n\nThis is a tiling puzzle:\n\n\nA tiling problem with wireframes. [Source: Micheal Brand]. #exportober pic.twitter.com/vhhoc0OB9C\n\n— Algorithmic Puzzles (@algopuzzles) October 7, 2022\n\n\nThe lines cannot overlay, I imagine. Here’s a valid looking 2 x 2:\n\n\n\nA 2 x 2 grid made from the given wireframe.\n\n\nMore soon on this as the story develops!"
  },
  {
    "objectID": "tgif/coin-tossing/index.html",
    "href": "tgif/coin-tossing/index.html",
    "title": "Coin Tossing",
    "section": "",
    "text": "Contributed by Monali Shah on the Discord Server.\n\n\n\nSuppose you were to keep flipping a coin until it landed either HTHHT or HHHHH on five consecutive flips. Which of these two sequences would you predict would occur first?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSee here. Also, a shorter sequence (HTT vs HTH) but with a similar element of surprise is explained also in this TED Talk:"
  },
  {
    "objectID": "tgif/find-the-puppy/index.html",
    "href": "tgif/find-the-puppy/index.html",
    "title": "Find The Puppy",
    "section": "",
    "text": "Contributed by Debanuj Nayak.\n\n\n\nThere are 5 boxes with lids kept in a row.\n[] [] [] [] []\nLet’s call them B[1…5].\nThere is a puppy P inside one of these boxes.\nOur goal is to find the puppy.\n[?] [?] [?] [?] [?]\nEvery morning you get a chance to open any one of the boxes. If you find the puppy: great, congrats!\nIf you don’t, tough luck, you have to wait again for the next day. Meanwhile, during the night, the Puppy will move to one of the neighbouring boxes.(can’t stay in same box). Eg:\n[] [P] [] [] [] -> [P] [] [] [] [] or [] [] [P] [] [].\n\nDoes there exist protocols (ways of opening boxes) in which I can guarantee that I can catch the puppy in a finite time?\nIf yes, what is the smallest number of days I have to wait to catch the puppy (Which is the best protocol?)\nHow does this protocol work?\n\n\n\n\n\n\n\nSpoilers: based on our discussion in the second TGIF meetup.\n\n\n\n\n\nHere’s a strategy that uses seven days (h/t: Harshil).\nMorning 1: Open Box 2. If it contains P, we are done. Otherwise, P is in one of Box 1,3,4 or 5.\nMorning 2: Open Box 2. If it contains P, we are done. Otherwise, P is in one of Box 3,4 or 5.\nMorning 3: Open Box 3. If it contains P, we are done. Otherwise, P is in one of Box 2,4 or 5.\nMorning 4: Open Box 4. If it contains P, we are done. Otherwise, P is in one of Box 1,3 or 5.\nMorning 5: Open Box 4. If it contains P, we are done. Otherwise, P is in Box 2.\nMorning 6: Open Box 3. If it contains P, we are done. Otherwise, P is in Box 1.\nMorning 7: Open Box 2. It definitely contains P.\n\nHere’s a strategy that uses six days (h/t: Debanuj):\nFirst Observation: The puppy P alternates between odd and even boxes\nSecond Observation: The puppy P only has one possible choice to go to, if it is in Box 1 or Box n\nLet us assume that P is in an even box i.e. B[2] or B[4] on the first morning.\nMorning 1: Check B[2], if you find P, done. Otherwise, according to the assumption, P is in B[4]\nNight 1: P moves to B[3] or B[5]\nMorning 2: Check B[3], if you find P, done. Otherwise P is in B[5] according to initial assumption.\nNight 2: P moves to B[4], no other choice.\nMorning 3: Check B[4]. If assumption was true, then P must be in B[4]. If you find P, done. If you don’t find P, that means initial assumption was false.\nThus on morning 1, P was in an odd box ⇒ on morning3 (today), P is again in an odd box. Which means tomorrow (morning 4), P must be in an even box.\nNight 3: P moves to B[2] or B[4]\nMorning 4: Now our assumption holds true that P is in an even box, and now you can repeat the procedure we followed on mornings 1,2,3 again on mornings 4,5,6 and we are guaranteed to catch P.\n\n\n\nUnresolved questions:\n\nCan we do this in five days? Or can we show that it’s impossible to come up with a protocol that uses only five days?\nWhat about six boxes? Or seven? Or n?\nIf the moves are equiprobable and the initial choice is uniformly random, what is the expected number of moves executed by either of the strategies above?\nHow much faster can we do this if we are allowed to open two boxes at once?\nQuestion from Bireswar: If the puppy is allowed to stay put, then there’s no protocol to find the puppy even in the trivial setting with two boxes. What if we are allowed to open more than one box? How many more boxes do we need to be able to open per day to catch a potentially non-moving puppy amongst five boxes?"
  },
  {
    "objectID": "tgif/square-in-bag/index.html",
    "href": "tgif/square-in-bag/index.html",
    "title": "Iwahiro’s Square in Bag Puzzle",
    "section": "",
    "text": "Source: Dave Richeson @divbyzero.\n\n\n\nHere’s a very fun packing puzzle.\n\n\nOne of my all-time favorite puzzles: Iwahiro's \"Square in a Bag\" puzzle. Put a square piece of paper (14 cm x 14 cm) completely inside a bag (20 cm x 11 cm) without folding, cutting, or rolling up the paper; it should end up lying completely flat. pic.twitter.com/nGv2TwR8Wp\n\n— Dave Richeson (@divbyzero) October 4, 2022\n\n\nWhen we discussed this in the meetup, it was a little hard to describe what’s allowed and what’s not with the bag. Another thing that was important to emphasize is the side of the bag that is open: I am not sure this is even possible if the bag is sealed on both the long sides and only the short side is the one that is open.\nA quick sanity check with respect to surface areas reassures us of the potential feasibility of the task: the total surface area of the square is indeed smaller than the surface area of the bag. So if you imagine cutting the bag along the short sides, and using it as a gift wrap to cover up the square, that’s very much doable.\nThe other hint was the fact that the length of the diagonal of the square is less than the length of the longer side of the bag. This prompts us to line up the square so that it’s opposite corners align with the long and open edge of the bag.\n\n\n\n\n\n\nSpoiler Alert\n\n\n\n\n\nThe solution does indeed involve starting here and squishing the bag gradually so that it engulfs the square. Here’s a nice video demonstration:\n\n\n\n\n\nWe did wonder about formalizing the question and the process above a little more, but we were not able to come up with any appropriate language. At least as an activity-based puzzle I think the instructions are quite clear:\n\n\nAh. The bag can stretch and fold as much as any ordinary kitchen bag can. And for that matter, the paper can warp and bend as you'd expect it would. But in the end everything will end up flat on the tabletop.\n\n— Dave Richeson (@divbyzero) October 7, 2022\n\n\nIt would be nice to be come up with a procedure that, given the dimensions of the square and the bag, can determine if the square can in fact be accommodated in the bag playing by the rules here. Already here, it was pointed out later that it would have worked with a slightly smaller bag too, and at least for the purpose of getting to this particular solution, all that matters is the proportions of the side lengths.\nIt might also be interesting to think about what happens with other combinations of shapes."
  },
  {
    "objectID": "tgif/to-not-checkmate/index.html",
    "href": "tgif/to-not-checkmate/index.html",
    "title": "To Not Checkmate",
    "section": "",
    "text": "Curious puzzle by Karl Fabel. White to move and not checkmate:\n\n\n\nChessboard Position"
  },
  {
    "objectID": "tgif/burning-island/index.html",
    "href": "tgif/burning-island/index.html",
    "title": "Burning Island",
    "section": "",
    "text": "Source: Math is Fun\n\n\n\n\n\n\nThis is arguably a logic puzzle, in that the solution does not involve any calculation/geometry even though the statement might suggest it.\n\n\n\nA man is stranded on an island covered in forest.\nOne day, when the wind is blowing from the west, lightning strikes the west end of the island and sets fire to the forest. The fire is very violent, burning everything in its path, and without intervention the fire will burn the whole island, killing the man in the process.\nThere are cliffs around the island, so he cannot jump off.\nHow can the man survive the fire? (There are no buckets or any other means to put out the fire)"
  },
  {
    "objectID": "tgif/honeybee-riddle/index.html",
    "href": "tgif/honeybee-riddle/index.html",
    "title": "HoneyBee Puzzle",
    "section": "",
    "text": "Source: TedEd.\n\n\n\nHere’s the premise:\n\nYou’re a biologist on a mission to keep the rare honeybee Apis Trifecta from going extinct. The last 60 bees of the species are in your terrarium. You’ve already constructed wire frames of the appropriate size and shape. Now you need to turn them into working beehives by filling every hex with wax. Can you help the bees create producing hives? Dan Finkel shows how.\n\nThis is very reminiscent of the puzzle about lighting up a grid. The main difference here appears to be that the structure of the base grid is hexagonal, as opposed to being a square grid."
  },
  {
    "objectID": "tgif/points-and-lines/index.html",
    "href": "tgif/points-and-lines/index.html",
    "title": "Points and Lines",
    "section": "",
    "text": "H/T to Ashutosh.\n [Spoiler Alert] This turns out to be a well-known theorem.\n\n\n\nShow that every finite set of points in the Euclidean plane has a line that passes through exactly two of the points or a line that passes through all of them."
  },
  {
    "objectID": "tgif/lighting-up-a-grid/index.html",
    "href": "tgif/lighting-up-a-grid/index.html",
    "title": "Lighting Up a Grid",
    "section": "",
    "text": "This puzzle was sourced from an @algopuzzles tweet.\n\n\n\nHere’s the puzzle:\n\n\nOn an nxn grid a few nodes are set on fire at t=0. The fire spreads like this: if at least two neighboring nodes of node x are lit, then node x will also catch fire in the next time step. What's the minimum number of nodes that have to be lit to burn the entire grid?#exportober\n\n— Algorithmic Puzzles (@algopuzzles) October 18, 2021\n\n\n\n\n\n\n\n\nHere’s an argument for the lower bound by Harshil Mittal.\n\n\n\n\n\nConsider an arbitrary but fixed solution. Let p denote the number of nodes that are lit up at time 0. Let T denote the time taken to lit the entire grid. WLOG, assume that for each 1 \\leq t \\leq T, exactly one new node is lit up at time t.\nAt any time 0 \\leq t \\leq T,\n\nFor every lit node (i,j), let f(i,j,t) denote the number of edges of the node (i,j) that are not shared with another lit node.\nLet g(t) denote the sum of f(i,j,t) over all lit nodes (i,j)\n\nWe show that g(t+1) \\leq g(t) for all 0 \\leq t \\leq T-1.\nLet 0 \\leq t \\leq T-1. Let (u,v) denote the new node which is lit up at time t+1. Let X denote the set of all lit neighbors of (u,v) at time t. For every node (i,j) in X, we have f(i,j,t+1) = f(i,j,t) - 1. Also, note that f(u,v,t+1) = 4-|X|. Therefore, g(t+1) = g(t) - |X| + (4-|X|) = g(t) + 4-2|X|. So, as |X| \\geq 2, we get g(t+1) \\leq g(t).\nNow, we have 4n = g(T) \\leq g(0) \\leq 4p. Thus, n \\leq p, as desired."
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "13 Sheep\n\n\n\n\n\n\n\n\n\nMar 26, 2023\n\n\n\n\n\n\n\n\nLetters with Pandoc\n\n\n\n\n\n\n\n\n\nNov 27, 2022\n\n\n\n\n\n\n\n\nThe Only Fair Ranking of IITs\n\n\n\n\n\n\n\n\n\nNov 24, 2022\n\n\n\n\n\n\n\n\nExportober 2022\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\nExternal Communications\n\n\n\n\n\n\n\n\n\nSep 23, 2022\n\n\n\n\n\n\n\n\nSKJ\n\n\n\n\n\n\n\n\n\nSep 23, 2022\n\n\n\n\n\n\n\n\nDog Bunny Puzzle\n\n\n\n\n\n\n\n\n\nSep 19, 2022\n\n\n\n\n\n\n\n\nOn Teaching\n\n\n\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n\n\nSolo Chess\n\n\n\n\n\n\n\n\n\nMar 24, 2022\n\n\n\n\n\n\n\n\nEight Self-Sabotaging Behaviors\n\n\n\n\n\n\n\n\n\nMar 15, 2022\n\n\n\n\n\n\n\n\nKidney Exchanges\n\n\n\n\n\n\n\n\n\nFeb 25, 2022\n\n\n\n\n\n\n\n\nWomen in Mathematics\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n\n\nOn the Communication Complexity of Equality\n\n\n\n\n\n\n\n\n\nOct 4, 2021\n\n\n\n\n\n\n\n\nTwo approaches to the 15 puzzle\n\n\n\n\n\n\n\n\n\nOct 3, 2021\n\n\n\n\n\n\n\n\nSam I Am\n\n\n\n\n\n\n\n\n\nOct 1, 2021\n\n\n\n\n\n\n\n\nNew Mac\n\n\n\n\n\n\n\n\n\nSep 30, 2021\n\n\n\n\n\n\n\n\nExportober 2021\n\n\n\n\n\n\n\n\n\nSep 25, 2021\n\n\n\n\n\n\n\n\nAbout Exportober\n\n\n\n\n\n\n\n\n\nSep 24, 2021\n\n\n\n\n\n\n\n\nMoving Blocks at CTIS 2021\n\n\n\n\n\n\n\n\n\nSep 21, 2021\n\n\n\n\n\n\n\n\nAn Invitation to Exportober 2021\n\n\n\n\n\n\n\n\n\nSep 19, 2021\n\n\n\n\n\n\n\n\nEnvelope Budgeting with Notion\n\n\n\n\n\n\n\n\n\nSep 18, 2021\n\n\n\n\n\n\n\n\nActually Building a Website with Notion\n\n\n\n\n\n\n\n\n\nSep 12, 2021\n\n\n\n\n\n\n\n\nNotion-powered websites\n\n\n\n\n\n\n\n\n\nSep 11, 2021\n\n\n\n\n\n\n\n\nMassren for fast file renaming\n\n\n\n\n\n\n\n\n\nSep 11, 2020\n\n\n\n\n\n\n\n\nBuilding a first Django App\n\n\n\n\n\n\n\n\n\nJun 12, 2018\n\n\n\n\n\n\n\n\nOn the Fence\n\n\n\n\n\n\n\n\n\nApr 23, 2012\n\n\n\n\n\n\n\n\nSprinkles of the Sky\n\n\n\n\n\n\n\n\n\nJan 5, 2011\n\n\n\n\n\n\n\n\nHow Expensive Can Homework Help Be?\n\n\n\n\n\n\n\n\n\nMay 1, 2010\n\n\n\n\n\n\n\n\nSeek\n\n\n\n\n\n\n\n\n\nApr 3, 2007\n\n\n\n\n\n\n\n\nBloom\n\n\n\n\n\n\n\n\n\nFeb 3, 2005\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Neeldhara",
    "section": "",
    "text": "Visualizing Baranyai’s theorem for the case when n=2.\n\n\n\n\n\n\nSmt. Amba and Sri. V S Sastry Chair Associate ProfessorComputer Science and Engineering at IIT Gandhinagar(she/her)\n\n \n\nBlog ⸱ Mastodon ⸱ DBLP ⸱ Contact\n\n \n\nMy broad research interests include — in no particular order: algorithm design, computational social choice, combinatorial games. You can find out more about my work here.\n\n \n\nRecent PCs: FUN 2022, MFCS 2022, IPEC 2022, Compute 2022, CALDAM 2023, IPEC 2023 (co-chair with Magnus Wahlström)"
  },
  {
    "objectID": "index.html#latest-news",
    "href": "index.html#latest-news",
    "title": "Neeldhara",
    "section": "Latest News",
    "text": "Latest News\n\n\n    \n        \n        \n        \n        \n        \n        Finding Perfect Matching Cuts Faster |  Mar 27, 2023\n        \n        \n        \n        \n        \n        Joint work with Yash More ⸱ To Appear at IWOCA 2023 ⸱ Preprint coming soon!\nA cut (X,Y) is a perfect matching cut if and only if each vertex in X has exactly one neighbor in Y and each vertex in Y has exactly one neighbor in X. The computational problem of determining if a graph admits a perfect matching cut is NP-complete, even when restricted to the class of bipartite graphs of maximum degree 3 and arbitrarily large girth. We demonstrate a faster exact exponential time algorithm on general graphs and an even faster algorithm on graphs of maximum degree three that have girth six.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        CompEd 2023 Dates Announced |  Mar 24, 2023\n        \n        \n        \n        \n        \n        CompEd will be held between December 7-9, 2023, at Hyderabad, India. Check out the call for participation! The deadline for submitting abstracts is Sunday, 7 May.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        IPEC 2023 Dates Announced |  Mar 20, 2023\n        \n        \n        \n        \n        \n        The International Symposium on Parameterized and Exact Computation (IPEC) is an annual conference covering all aspects of parameterized and exact algorithms and complexity. Its 18th edition will be part of ALGO 2023, which also hosts ESA 2023 and other specialized conferences and workshops. We are excited that ALGO 2023 is planned as an in-person conference and we look forward to seeing you there! ALGO will be held between September 4-8, 2023, at Amsterdam, the Netherlands.\nDo submit your best work to IPEC 2023 --- the abstract submission deadline is June 27th (23:59 AoE).\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        NASI Platinum Jubilee Young Scientist Award |  Jan 5, 2023\n        \n        \n        \n        \n        \n        Recieved the NASI Platinum Jubilee Young Scientist Award. Most grateful to all collaborators and mentors who make this recognition possible.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        INYAS Membership |  Jan 1, 2023\n        \n        \n        \n        \n        \n        INYAS is the Young Science Academy established by Indian National Science Academy (INSA). Their work in science outreach and popularization has been wide-ranging and very inspiring over the years. It is wonderful and humbling to have been selected as a member this year. Looking forward to pitching in!\n\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        ACM-India CSEd Workshop |  Dec 25, 2022\n        \n        \n        \n        \n        \n        We recently concluded the CSEd Workshop with support from ACM India, NPTEL, and the discipline of CSE at IIT Gandhinagar. The workshop featured talks by Sonia Garcha, Viraj Kumar, Venkatesh Choppella, and N S Kumar. The talks covered various themes, including CSPathshala, refute questions, mapcode, and key takeaways to convey in a data structures course.\nThe materials from the course (including video recordings and slides) can be accessed from here.\n        \n        \n    \n    \n        \n        \n        \n        \n        \n        A Proud Carmelite! |  Dec 15, 2022\n        \n        \n        \n        \n        \n        Mount Carmel College (in Bangalore), my alma mater, is celebrating its Platinum Jubilee this year. A part of this celebration is HERSTORY: \"75 years of scripting success stories of Confident, Competent, & Compassionate Carmelites\".\nI was honored to be among the 75 Carmelites invited for the HERSTORY event today. It was very nostalgic to be back on campus, and the organizers put together an impeccable event that made all of us feel very special. It was humbling to be in inspiring company. I can't thank MCC enough for providing an empowering and fun environment at a crucial stage of my life!\n        \n        \n    \n\n\nNo matching items\n\n\n  \n\n\n All News"
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "Neeldhara",
    "section": "Latest Posts",
    "text": "Latest Posts\n\n\n\n    \n        \n        \n            26 Mar, 2023        \n        \n        \n            13 Sheep     \n        \n        \n                games\n                exposition\n                \n\n        \n        \n            27 Nov, 2022        \n        \n        \n            Letters with Pandoc     \n        \n        \n                pandoc\n                workflows\n                latex\n                \n\n        \n        \n            24 Nov, 2022        \n        \n        \n            The Only Fair Ranking of IITs     \n        \n        \n                funda\n                \n\n        \n        \n            07 Oct, 2022        \n        \n        \n            Exportober 2022     \n        \n        \n                exportober\n                \n\n        \n        \n            23 Sep, 2022        \n        \n        \n            SKJ     \n        \n        \n                iitgn\n                \n\n        \n        \n            23 Sep, 2022        \n        \n        \n            External Communications     \n        \n        \n                iitgn\n                \n\n        \n        \n            19 Sep, 2022        \n        \n        \n            Dog Bunny Puzzle     \n        \n        \n                puzzles\n                exposition\n                \n\n\n\n\nNo matching items\n\n\n  \n\n\n All Posts"
  },
  {
    "objectID": "blog/building-websites-with-notion/index.html",
    "href": "blog/building-websites-with-notion/index.html",
    "title": "Actually Building a Website with Notion",
    "section": "",
    "text": "My attempted overview of options for making websites with Notion does not go into the mechanics of how to setup a site with Notion, so I’m going to post a couple of short walkthroughs of the process here. I’ll demonstrate with both Super and Potion. For Super, I’ll share how I setup my course catalog. With Potion, a natural choice would have been to take you behind the scenes of this blog, but this did involve a little bit of customization that might be a bit distracting, so I’ll just make something quick from scratch for this post.\n\n\nDoesn't look like it's for non-geeks like me 😄 or you may prove otherwise. However, if you can record a 10 min video setting up a basic one, that'll have a greater impact, I believe, if it's already not there.\n\n— Swaprava Nath (@swaprava) September 12, 2021\n\n\n\n\nThe Overall Process\nFor either framework, this is typically a three-step process:\n\nSetup your content in Notion. You can start from scratch, or use one of the templates provided by Super or Potion that feel like a closest match to what you want your website to eventually look like.\nEnable sharing to the web from within Notion — this will generate a link for you.\nCopy this link into Super or Potion.\n\nAt the end of step 2, in fact, you already have a URL that you can share with anyone and, depending on how the content is laid out in Notion, can already look like a decent website.\nWhat step 3 allows you to do, however is:\n\nAdd some styling with CSS.\nAdd custom code snippets (useful, for example, if you want to add things like Google Analytics).\nBe assured that the webpage is good in terms of SEO, performance, etc.\nIf using Super, you can selectively password-protect pages (coming soon to Potion, where you can presently password-protect your whole site if you want to).\nHave automatically generated user-friendly URLs for the individual pages, and if on Potion, you get nice preview images for all your pages as well.\n\nA few optional steps that you might want to consider:\n\nBy default, both Super and Potion will give you a test subdomain to work with. Eventually, you might want the website to be available from your own domain. This is just a matter of adding a couple of A-records and typically can be done from wherever you registered the domain:\n\n\n\n\nYou might want to add custom styles to make the website render uniquely — so you move beyond the standard look-and-feel of a Notion page if you so wish. You could do something on your own here, but the simplest thing is to just borrow the styling from one of the existing templates and tweak it if you want.\nInsert code for Google Analytics (or similar). As an aside, if you are looking for analytics that is user-friendly and privacy-conscious, I’d recommend Fathom.\n\n\n\nA Course Catalog with Super\n\n\n\n\n\n\nHeads up!\n\n\n\nThis content is deprecated because I’ve moved this domain out to a different setup now. So please ignore the links, and hopefully the steps are still useful in principle!\n\n\nLet’s apply this process to an actual website now! I’ll demonstrate how I setup the website at neeldhara.courses. Incidentally, if you want a quick overview without some details that will be specific to my website, you might want to watch the video made by @robhope and pointed out by @traf.\n\n\nHere's a little run through by @robhope on creating a site @super_:https://t.co/SCMdDMRfBd\n\n— traf (@traf) September 12, 2021\n\n\nBack to the setup for neeldhara.courses. You can check out the page on Notion here, but I’ll describe some pieces of it below. First, recall Step 1:\n\n1️⃣ Setup your content in Notion.\n\nI started with the Super template HQ. It looks amazing and is apparently free to use — at least at the time of this writing 😀\nDuplicate this template into Notion. If you like, you can duplicate it twice — one, a copy that you actually work on, and the other could be a copy that you don’t edit but just keep handy in case you need to go back to the original for reference.\nThe first thing I did was to get rid of most of the content, and just retained this section:\n\nwhich, incidentally, will render like this once connected to Super:\n\nNow the next step is to replace the generic content with yours:\n\nSince I’m just starting out, I have added the three courses that I’m teaching this term and they all show up. Eventually, these courses will be filtered out based on the current timing, so that only the current ones show here and the rest get pushed to an archive — which I’m yet to build. But the filter would look something like this in Notion:\n\nAnd for each of those entries, I’d go and setup the course home pages with the content that I have in my typical course homepages. The nice thing about Notion is the wide array of content types that lets you format things nicely. Here are a couple of sections from within Notion:\n\n\nOne thing worth pointing out for this particular setup — for each course, the class plan is just a Notion database, where the columns are:\n\nName (text)\nWeek (single-select with 12 options; one for each week of the course)\nModule (a checkbox property)\nDescription (text)\n\nand the rows either correspond to an overview of a whole week or just one individual lecture, tagged with the week that it happened in.\nOn the course’s homepage, I display this database set to a Gallery view, and filtered to only those entries where the Module option is unchecked. These are intended to be overview pages. This is what it looks like in Notion:\n\nand this is what it will end up looking like on the website, once you’ve gotten to the end of Step 3:\n\nFurther, overview page simply displays the same database again, this time in a list view filtered by the appropriate week:\n\nCheck out the views in Notion and the rendered version side-by-side:\n\n\n\n\n\n\n\n\n\nYou might wonder about the blockquote in the Notion view right at the top of the page. That’s a feature of the HQ template — anything that goes into that first blockquote renders as page navigation on top. I think this now a bit obsolete with Super’s new features on navigation bars, but I still find it handy and use it on most pages. 👍\nSo that’s all of Step 1, getting all your content inside Notion. I’d say this is really the bulk of the process. The process is iterative, so you don’t need literally all your content in before you can move on. However, getting an indicative amount thrown in is, I think, useful.\nOnce you’re done with this bit, up next:\n\n2️⃣ Enable sharing to the web from within Notion — this will generate a link for you.\n\nThis is very easy to do, it’s just a toggle on the top-right corner of your Notion app:\n\nNow for the final step to have everything come together:\n\n3️⃣ Copy this link into Super or Potion.\n\nThis is again quite straightforward, head to Super and just share your page’s public URL, give it a name, and optionally set it up to sync with your domain if you have one.\n\nGiven that we’re using a particular Super template, you would also need to remember to insert the CSS to make the site look as advertised above 😅\nSo remember to add this on the custom code section of your Super dashboard:\n<link rel=\"stylesheet\" href=\"[https://sites.super.so/hq/style.css](https://sites.super.so/hq/style.css)\">\nIf you do just this and are literally following along your site may still look a little different from mine, which is probably because I tweaked the CSS a bit to incorporate fonts of my liking (the fonts in the screenshot are from Google fonts — Andika New Basic and Shadows into Light Two).\nYou might want to take care of some minor things at this stage, such as adding a favicon, a site description that will show up on Google searches, inserting any code you need to for analytics, and so forth.\nThe very first time that you setup your site, you may need to wait for a bit for it to build and render. But after this first time, any edits you make on Notion are reflected automatically on your website — you may need to give it a minute or two, it’s not instantaneous, but trust that the changes will show up. Clear your cache if they don’t even after a couple of minutes.\nSuper generates pretty URLs automatically for all your pages, but because of the slightly peculiar setup I have, involving a particular nested structure and filtered views, I’ve been doing my pretty URLs manually. For example, to go to the second module of Week 5 in the competitive programming course, the URL is:\nhttps://neeldhara.courses/competitive-programming/week-05/mod-02\nThis can be setup quite easily from inside the Super dashboard, and once it’s done once, it’s done for good.\nSo, that’s about it! I’d like to think I covered most major aspects, but if anything is unclear, ping me @neeldhara on Twitter and I’ll be sure to update this appropriately 🙂\n\n\nThe Manim Examples Collection with Potion\nFor the Potion example, I’d like to build out a quick page with latest tweets from @manim_community. Manim is a community-maintained Python library for creating mathematical animations, and the twitter handle pulls in a lot of great examples.\n\n\n\n\n\n\nIncidentally, if you prefer watching a video tutorial, Potion has you covered already…\n\n\n\n\n\n\n\n\n\n\nSo, for step 1, which is to get our content in Notion, I start with a blank slate and populate it with some content:\n\n\nFor Step 2, I simply make this page public, and you can see the Notion version here.\nFor Step 3, I add this page to Potion and just follow step 4 on this page to set this up with a lovely template made by Dr. Gil Pradana (@gildy). This just amounts to copy-pasting some CSS code into the Snippet Injection section of your Potion dashboard. This template treats horizontal line breaks as breakpoints to create cards, and the headings translate into the highlight boxes that you can see from this preview.\nhttps://twitter.com/gildy/status/1403680404092035075?s=20\nAfter connecting my domain, here’s what the website looks like this\nAnd that’s basically it! You have a fully functional page now. 🎉 Changes you make in Notion will reflect instantaneously on Potion!\n\nYou might wonder if there is a way of setting things up so that new tweets from the Manim community handle show up automatically on this website. In principle, this should be possible with a little help from tools like automate.io, Zapier, or Integromat — they can watch for new tweets and append them to the page you are working on, although I’m not sure how to set it up so that they respect the two-column layout that I have here. I figure tweets could also be added to a database and shown with a gallery view instead, but the gallery previews will typically not pick up embedded content, so you might have to go via an intermediate service like Tweetpik or Pikaso instead so you have screenshots for display.\nSo this was Potion - you can probably see the many ways in which Potion and Super are similar to setup. By the way, the templates on these platforms are not mutually compatible — so watch out for the fact that they will not automatically work on the other platform if you are looking to migrate. As far as I can see, neither service has an importer for the other built yet.\nThat said, I hope you have fun making your website with Notion with whatever platform you choose to use! 🎉"
  },
  {
    "objectID": "blog/eight-self-sabotaging-behaviors/index.html",
    "href": "blog/eight-self-sabotaging-behaviors/index.html",
    "title": "Eight Self-Sabotaging Behaviors",
    "section": "",
    "text": "Putting this thread in one place.\n\n🧵 @fortelabs recently finished the opening keynote on the Second Brain summit, which incidentally has a great lineup including a panel discussion on PKM through the lens of ADHD. Ironically, I didn’t quite take notes but I think the themes also feature in this short video:\n\n\nThe live session was fun because of a super engaged chat — everyone had great suggestions for managing some of these (surprisingly common?) behaviors.\nI’ll not share the premise (it’s self-explanatory + there’s the video), but the discussion involved three parts:\n\nwhy it’s an issue;\nwhy-do-we-do-this-to-ourselves;\nhow do we not keep doing it 😀\n\nI’ll share a tweet-length summary of my takeaways.\n\nCaveat I: 280 chars! Twitter isn’t the platform for nuance. 😅\nCaveat II. Should go without saying, but all of this gyaan needs to be tempered with context, which was a frequently used word throughout the session!\n\n\n\n\n\n\n\n\nStarting over (again and again)\n\n\n\n\n\n⚠️  Not learning from previous mistakes.\n🤔  False sense of accomplishment, dopamine hit from a clean slate, FOMO (new tools).\n💡 Start simple, iterate slowly, resist looking at shiny new objects.\n\n\n\n\n\n\n\n\n\nFeeling guilty\n\n\n\n\n\n⚠️  Can’t win when you are at war with yourself.\n🤔  Probably comes from knowing you’ll trip again.\n💡 Extend to yourself the same courtesy and patience you’d show to a friend, consider replacing guilt with curiosity.\n\n\n\n\n\n\n\n\n\nPerfectionism\n\n\n\n\n\n⚠️  Not making mistakes is a risky way to live.\n🤔  Feeds ego, sense of control and safety, and you think you push yourself harder with lofty standards.\n💡 Aim for B+, fail in public and value it — can be a relief to not have to keep up with the perfect image.\n\n\n\n\n\n\n\n\n\nDo all the research first\n\n\n\n\n\n⚠️  When overdone, really procrastination in disguise.\n🤔  Creates an illusion of getting work done. Paranoia associate with diving in without preparation.\n💡 Second brains are not for archival, but production. Iterate often. Timebox research.\n\n\n\n\n\n\n\n\n\nGoing big\n\n\n\n\n\n⚠️  Ambition dominates the public discourse around goal-setting. Big goals are not problematic until they get in the way.\n🤔  Ego boosted, creates a potentially misguided sense of being inspired.\n💡 Break things down, take incremental (read: realistic!) steps.\n\n\n\n\n\n\n\n\n\nDoing it all yourself\n\n\n\n\n\n⚠️  Potentially limiting.\n🤔  A desire for respect or credit, and the sense that nobody can do this as well as me.\n💡 Delegate when appropriate, especially when looking to scale and/or diversify.\n\n\n\n\n\n\n\n\n\nComparing yourself to others\n\n\n\n\n\n⚠️  Potentially depressing.\n🤔  Self-pity, and an excuse to not even try.\n💡 Compare to past you. Read your old journal entries. (Also, journal.)\n\n\n\n\n\n\n\n\n\nPostpone gratification\n\n\n\n\n\n⚠️  For something to be sustainable, it needs to be fun!\n🤔  Traditional positive quality.\n💡 Enjoy the journey because nobody knows the destination. Live in the moment, find joy in the small things, be present. Also, music for instant gratification!\n\n\n\nDo check out the Second Brain Summit for the remaining sessions.\nI think you get a link to a recording if you’re registered for a session, at least this was the case for me with the opening session.\nThe community attending this is also on a slack."
  },
  {
    "objectID": "blog/kidney-exchanges/index.html",
    "href": "blog/kidney-exchanges/index.html",
    "title": "Kidney Exchanges",
    "section": "",
    "text": "This post is based on an excellent (chalk and board!) talk that Palash Dey gave at IIT Gandhinagar today. This is his joint work with Arnab Maiti, to appear as an extended abstract at AAMAS 2022 (preprint here)."
  },
  {
    "objectID": "blog/kidney-exchanges/index.html#background",
    "href": "blog/kidney-exchanges/index.html#background",
    "title": "Kidney Exchanges",
    "section": "Background",
    "text": "Background\nKidney paired donation or paired exchange allows donors to donate their kidneys to compatible patients with the understanding that their patients receive medically compatible kidneys in turn. The central problem in this setting is the clearing problem — which involves matching patients to donors in such a way that a maximum number of patients receive compatible kidneys. We introduce a directed graph as a convenient abstraction for this question, where:\n\neach node v_i = (P_i,D_i) represents a patient-donor pair, and\nwe introduce a directed edge v_i → v_j if the kidney of the donor D_i is compatible with the patient P_j.\n\nObserve that a cycle in this directed graph naturally represents a sequence of feasible exchanges within the cycle. For example, imagine that we have a three-cycle with the edges:\n(P_2,D_2) → (P_5,D_5) → (P_7,D_7) → (P_2,D_2)\nThen we have the following compatible donations:\n\nP_5 is assigned the kidney of donor D_2\nP_7 is assigned the kidney of donor D_5\nP_2 is assigned the kidney of donor D_7\n\nThis accounts for all the patients and donors involved in this cycle and motivates the following question:\n\nGiven a directed graph, what is the largest number of vertices that can be covered by a disjoint union of cycles?\n\nWhile a positive answer to this question will “resolve” all the needs in the system, consider that exchanges along a cycle of length \\ell involve \\ell simultaneous operations to mitigate the risks involved with donors potentially backing out of the exchange agreements.\nThis motivates the following refinement of the previously posed question:\n\nGiven a directed graph, what is the largest number of vertices that can be covered by a disjoint union of cycles, where each cycle is of length \\ell or less?\n\nIf the exchanges are restricted to swaps, that is, \\ell = 2, the problem reduces to finding a maximum matching. However, the problem is NP-complete already when \\ell = 3 (see Theorem 1, Abraham, Blum, and Sandholm; EC 2007).\nWe now generalize the model a little further to account for the presence of altruistic donors, who are donors without a matching patient and are willing to donate to any compatible patient. To account for the presence of such donors, we modify our graph representation as follows:\n\nEach node either:\n\nrepresents a patient-donor pair v_i = (P_i,D_i) or\nrepresents an altruistic donor u_k = D_k^\\star\n\nThe edges are as follows:\n\nWe have a directed edge v_i → v_j if the kidney of the donor D_i is compatible with the patient P_j.\nWe have a directed edge u_k → v_j if the kidney of the donor D_k^\\star is compatible with the patient P_j.\n\n\nIn this setting, note that we can also facilitate exchanges along paths as well, with the paths starting at the altruistic donors. For instance, if we have the path:\n(D_7^\\star) → (P_2,D_2) → (P_5,D_5) → (P_7,D_7) → (P_3,D_3)\nThen we have the following compatible donations:\n\nP_2 is assigned the kidney of donor D_7^\\star\nP_5 is assigned the kidney of donor D_2\nP_7 is assigned the kidney of donor D_5\nP_3 is assigned the kidney of donor D_7\n\nNote that in this situation, the donor D_3 is relieved from any obligation to donate to a patient. We now update our problem statement to reflect the presence of altrustic donors and the possibility of facilitating exchanges along paths:\n\n🤝 Optimal Kidney Exchange Along Short Paths and Cycles\nInput. A directed graph G = (V,E), where \\mathcal{A} \\subseteq V are source vertices; and positive integers \\ell_p, \\ell_c and t.\nOutput. Yes if and only if there is a collection of cycles of length at most \\ell_c each and a collection of paths of length at most \\ell_p each such that the cycles and paths altogether covers t nodes outside of \\mathcal{A}.\n\nThe main claim in the context of this problem is the following:\nThere exists a \\mathcal{O}(2^{\\mathcal{O}(t)} \\cdot \\text{poly}(n)) that decides Optimal Kidney Exchange Along Short Paths and Cycles."
  },
  {
    "objectID": "blog/kidney-exchanges/index.html#an-algorithm-for-oke",
    "href": "blog/kidney-exchanges/index.html#an-algorithm-for-oke",
    "title": "Kidney Exchanges",
    "section": "An Algorithm for OKE",
    "text": "An Algorithm for OKE\nHere’s a high-level description of the algorithm (perhaps best approached with some prior familiarity with color coding). To begin with, notice that we may assume without loss of generality that \\ell_p \\leq t and \\ell_c \\leq t — intuitively, this is because if the permitted cycle and path lengths are longer than the number of patients we hope to cover, then we can simply look for cycles or paths of length t directly to begin with — if we find one, then we are done, and if none exist, then we “might as well” set \\ell_p and/or \\ell_c to t-1.\nNow, if there is a solution that accounts for at least t patients, there is also one that involves at most 2t patients and in particular, also at most t paths. Such a solution engages at most t nodes from \\mathcal{A}. Therefore, if there is a solution, then there is one that spans s \\leq 3t vertices.\nAs is standard for color coding, we guess the correct value of s and randomly partition the vertex set V into s parts. The hope is that each part contains exactly one vertex from the solution (this is a so-called “colorful solution”). The probability that a random partition is a lucky one is (3t)!/(3t)^{(3t)}, which turns out to be at least e^{-3t}. This implies that e^{3t} repetitions ensure a constant success probability.\nGiven that the partition is indeed a lucky one, we can recover the solution using the following dynamic programming semantics. For C \\subseteq [3t] and i \\in [3t], let D[C,i] be TRUE if and only if there is a colorful solution spanning at least i nodes outside \\mathcal{A} in G[V_C], where V_C denotes the subset of vertices colored with colors from C.\nThe recurrence is based on isolating one path or cycle by guessing the set of colors involved in said component and using table lookups to figure out if this can be extended to a full solution.\nIn particular, we have:\nD[C,i] = P[C,i] \\lor Q[C,i],\nwhere\nP[C,i] = \\lor_{(B,j): B \\subseteq C \\text{ and } 1 \\leq j \\leq \\ell_c} [D[C \\setminus B, i - j] \\land f(B,j)]\nand\nQ[C,i] = \\lor_{(B,j): B \\subseteq C \\text{ and } 1 \\leq j \\leq \\ell_p} [D[C \\setminus B, i - j] \\land g(B,j)].\nHere, we have that:\n\nf(B,j) is TRUE if and only if the vertices of B can be covered with a cycle of length j.\ng(B,j) is TRUE if and only if the vertices of B can be covered with a path of length j.\n\nThe truth values of f(B,j) and g(B,j) can be determined directly using standard approaches to finding colorful paths and cycles in time that is single-exponential in j.\nTo claim the overall running time, note that:\n\nThe total number of entries in the table is 2^{O(t)} \\cdot t and each entry can be computed in time \\mathcal{O}^{}\\left(2^{\\mathcal{O}(\\ell)}\\right).\nTherefore, the algorithm outputs the correct decision in \\mathcal{O}^{}\\left(2^{\\mathcal{O}(t)}\\right) time with probability at least e^{-3t},\nBy repeating \\mathcal{O}\\left(e^{3 t}\\right) times, we find the correct decision with constant success probability.\nThe overall running time is \\mathcal{O}^{*}\\left(2^{\\mathcal{O}(t)}\\right)."
  },
  {
    "objectID": "blog/kidney-exchanges/index.html#other-results",
    "href": "blog/kidney-exchanges/index.html#other-results",
    "title": "Kidney Exchanges",
    "section": "Other Results",
    "text": "Other Results\nAs Palash mentioned in his talk, the preprint has more, and here are some highlights of the other results that were established:\n\nOptimal Kidney Exchange Along Short Paths and Cycles is FPT also when parameterized by the treewidth of the underlying graph + maximum length of path \\left(\\ell_{p}\\right)+ maximum length of cycle allowed \\left(\\ell_{c}\\right) and the number of vertex types1 when \\ell_{p} \\leq \\ell_{c}.\nA Monadic second-order formula for the problem is also presented, where the length of the formula is upper bounded by a function of \\ell=\\max \\left\\{\\ell{c}, \\ell_{p}\\right\\}.\nThe problem admits a polynomial kernel with respect to the number of patients receiving kidneys + maximum degree when \\max \\left\\{\\ell_{p}, \\ell_{c}\\right\\} is a constant.\nOn the other hand, the problem does not admit any polynomial kernel parameterized by the number of patients receiving kidneys + maximum degree +\\max \\left\\{\\ell_{p}, \\ell_{c}\\right\\} (under standard assumptions).\nA \\left(16/9+\\epsilon\\right)-approximation algorithm is presented for the case when only cycles of length at most 3 are allowed and no paths are allowed."
  },
  {
    "objectID": "blog/kidney-exchanges/index.html#pointers",
    "href": "blog/kidney-exchanges/index.html#pointers",
    "title": "Kidney Exchanges",
    "section": "Pointers",
    "text": "Pointers\nSome discussion that came up during the talk:\n\nThe so-called dual parameter (n-t), which in this case corresponds to the number of patients who were “left out”, is perhaps a natural parameter to study as well.\nThe notion of a patient without a matching donor seems complementary notion of altrusitic donors. Such patients would be the last vertices on paths kickstarted by altruistic donors. However, this notion likely does not manifest in practice.\n\nIf you’d like to dig deeper, be sure to check out the preprint! A few additional pointers:\n\nThis work closely builds on the works of Xiao and Wang (IJCAI, 2018), who proposed an exact algorithm with running time \\mathcal{O}(2^nn^3) where n is the number of vertices in the underlying graph. They also show an FPT algorithm parameterized by the number of vertex types if we do not have any restriction on the length of cycles and chains.\nLin, Wang, Feng, and Fu (Algorithms, 2019) studied the version of the kidney exchange problem which allows only cycles and developed a randomized parameterized algorithm with respect to the parameter being (number of patients receiving a kidney, maximum allowed length of any cycle).\nAlvin E. Roth was awarded the Nobel Prize in Economic Sciences 2012 (along with Lloyd S. Shapley) in part for his pioneering contributions to the theory and practice of kidney exchange — his biographical account indicates that he had started anticipating the problem even before it emerged as a legal practice. His talk at Simons Institute surveys “fifteen years of history” in the kidney exchange problem, with an emphasis on the game-theoretic aspects. (h/t: Rohit’s blog on this topic.)"
  },
  {
    "objectID": "blog/solo-chess/index.html",
    "href": "blog/solo-chess/index.html",
    "title": "Solo Chess",
    "section": "",
    "text": "Putting this thread in one place.\n\n🧵 on our latest at FUN 2022 with @NRAravind1 and Harshil.\nHave you tried Solo Chess @chesscom yet? It’s addictive — and NP-complete* even when you’re dealing only with rooks!\n*when appropriately generalized\n\n\n\nThe Rules of the Game\n\n\nSo this is a single-player, peg-solitaire-ish chess variant, where you have to clear board by making a sequence of valid captures, albeit starting with unorthodox — and even unrealistic — positions.\n\n\n\nAn example position\n\n\nTo begin with the boards start easy, with a few pieces at a time. Notice, even in the early games, how some positions have just one solution while others may have several.\n\n\n\nMore positions\n\n\nFrom initial plays, you sense that it has a very Hamiltonian-Path-ish vibe, and feels like you’re trying to find a path in some graph 😅 \nWe started with a variant that was simultaneously a generalization and specialization:\n\nn pieces 😎\n♖’s only\n1D boards 🙈\n\nThis, it turns out, is case so special that its trivial - you can sweep all rooks to the extreme left or extreme right of the board, and any position is winning even if every rook can capture exactly once. Less trivial though: how many ways there are to win? 🤔\nWe also ask what happens if every rook had a designated number of captures left. Imagine you have a 1D board and three kinds of rooks:\n\nred rooks cannot move\nblue rooks can move at most once\ngreen rooks can move at most twice\n\n\n\n\n1D Boards\n\n\nWe show that such 1D boards can be cleared if and only if then number of green rooks is at least the number of red rooks. This ties nicely with the intuition that every immovable rook needs to be picked up by a rook that can help another one (i.e, > one move left).\nThis generalizes naturally to rooks with a designated number of moves left, where said number can be anything between 0 and d. Since no other chess piece moves sensibly* across a 1D board, we decided to move on 2D boards from here.\n\nKings + rooks is an easy exercise.\n\nSo if you are still playing with red, blue, and green rooks, then the problem of checking if a given 2D configuration can be cleared up according to solo chess rules turns out to be NP-complete.\nNo Hamiltonian Path though — this one was from bipartite dominating set 😎\n\n\n\nA reduction from bipartite dominating set - I\n\n\n\n\n\nA reduction from bipartite dominating set - II\n\n\nBishops are much the same as rooks, by a 45-degree tilt of the board.\n⚠️ Still open though: what about the case when all pieces have at most two moves left, which is closer to the original spirit of the game?\nWe don’t know yet, although we’d bet it’s hard, I think.\nWhen playing with queens only, however, we can gadget in the behaviors of red and blue pieces. So we do have that Generalized Solo Chess with just queens that can all move at most twice is NP-complete.\nWhat about pawns? Let’s get clarifying assumptions out of the way:\n\nwhite pawns only\nregular captures only since there’s no premise for en passant captures\n\nIn solo chess, pawns are (heavily) constrained bishops: they can only move upwards and to a neighboring diagonal square. Knowing that bishops were hard, but pawns felt simple — we didn’t have a bet either way. 🤔\nWe were pleasantly surprised that the case of pawns is tractable, even when each pawn has a designated* number of moves!\n*at most two.\n\n\n\nLemma for pawns\n\n\nThe algorithm is linear time, too.\nNext: what about knights? We don’t know yet!\n❓ What’s the complexity of solo chess when played only with knights?\nKnights are special because we don’t have to worry about obstructions. So the game can be described by a more general token game on graphs:\n\n\n\nThe Graph Capture Problem\n\n\nWe do show that Graph Capture is hard by a reduction, again from bipartite dominating set. This might hint at the hardness for Solo Chess played with knights only, but we are not betting on this yet.\n\n\n\nAnother reduction from bipartite dominating set - I\n\n\n\n\n\nAnother reduction from bipartite dominating set - II\n\n\nI think these preliminary explorations have left us with more questions than answers:\n\noptimization versions (e.g, clear at least k pieces)\nother constraints (e.g, on distance moved)\nspecial cases (e.g, O(1) pieces per row/column)\nn x c boards, constant c\n\nWhile at it, I’m also curious about how @chesscom generates these puzzles, and if they have a mechanism for generating ones that have unique solutions. Also, is it true that if you throw “enough” pieces on the board, it’s solvable WHP?\nShout out to the skak package for making it easy to bring chess pieces to TikZ. We expect to put up a preprint on ArXiV soon. 👀  Meanwhile, we welcome comments and feedback — and if you read this far, thanks very much!\nPS. Also if you enjoy chess and algorithms, don’t miss Miguel Ambrona’s amazing Chess Unwinnability Analyzer, which also appears at FUN 2022!\n\n\n\nChess Unwinnability\n\n\nYou can find the full list of accepted papers here."
  },
  {
    "objectID": "blog/15-puzzle/index.html",
    "href": "blog/15-puzzle/index.html",
    "title": "Two approaches to the 15 puzzle",
    "section": "",
    "text": "Presenting the 15 puzzle:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to place the tiles in numerical order.\n\nAccording to Wikipedia, Johnson & Story (1879) used a parity argument to show that half of the starting positions for the n-puzzle are impossible to resolve, no matter how many moves are made. We are going to explore two approaches* parity-based argument to show that the puzzle shown here on the right is unsolvable.\n*I do believe the two proofs are essentially the same with slight differences of language.\n\n\n\nAn example of the 15 puzzle\n\n\nCommon to both approaches is the idea of associating a permutation with every state of the puzzle. For the purposes of this discussion, we will think of a permutation simply as a sequence of elements. To turn the grid layout into a sequence, you could, for instance, line up the rows next to each other, in other words, read off the numbers from left-to-right and top-to-bottom:\n\n\n\nAssociating the puzzle with a permutation\n\n\nSo we think of every puzzle state as a permutation over the set \\{1, 2, \\ldots, 15\\} \\cup \\{\\star\\}, where we use \\star to denote the blank space. For a particular sequence \\sigma and an index 1 \\leq i \\leq 16, we will use \\sigma_i to refer to the element that is at the i^{th} position in the sequence \\sigma.\nA couple of definitions in the context of permutations will be useful:\n\nAn inversion is a pair of elements that is out of their natural order. More precisely, if we have indices i < j such that \\sigma_i > \\sigma_j, then the pair (i,j) indulges in an inversion. Note that the starting state of our puzzle here has exactly one inversion.\nA transposition of locations i and j **is essentially a swap of the elements at positions i and j of a given permutation. So this is an operation performed on a permutation. Let’s say this again with more explicit notation — if we start with \\sigma, then the permutation \\tau obtained from \\sigma by a transposition of i and j is given by the following:\n\n\n\\tau_\\ell = \\begin{cases}\n      \\sigma_j & \\text{if } \\ell = i,\\\\\n      \\sigma_i & \\text{if } \\ell = j,\\\\\n      \\sigma_\\ell & \\text{otherwise.}\n    \\end{cases}\n\nThe identity permutation, which we will denote by \\iota, is special — it’s the following sequence:\n\n\\{1,2,\\ldots,14,15,\\star\\}.\n\nIt turns out that every permutation \\sigma can be obtained from the identity permutation by a sequence of transpositions. This is not terribly hard to see — start with the identity permutation, and repeat the following until the permutation at hand is the one you want to see: find a location i that’s messed up in the current permutation, i.e, it doesn’t have the element you need in there. Find where the element is in the current permutation, and if that’s location j, you could perform a transposition between i and j. This fixes up the location i. In every step, you fix at least one location, and never mess up anything else: so at the end of at most n steps (assuming you are working with a sequence of n elements), you would be done. 🎉\nFor example, suppose the permutation you want to obtain is 3,4,2,1. Here is how the argument above would play out:\n\n1,2,3,4. The first location is messed up, so swap 1 and 3.\n3,2,1,4. The second location is messed up, so swap 2 and 4.\n3,4,1,2. The third location is messed up, so swap 1 and 2.\n3,4,2,1. Now we are done.\n\nNote that this may not be the only way of performing a sequence of transpositions that can morph \\iota into \\sigma — there may be various roads to \\sigma. However, it turns out that no matter what route you take to transform \\iota \\longrightarrow \\sigma, the number of steps you perform will always have the same parity. So specifically, it’s not possible for you to have a series of, say, seventeen transpositions that turn \\iota into \\sigma, and for me to have a series of forty-two transpositions that do the same. We will take this as a cute exercise for the reader as given.\nThis partitions the set of all permutations into two categories:\n\neven permutations: those permutations that are reachable from the identity with an even number of transpositions\nodd permutations: those permutations that are reachable from the identity with an odd number of transpositions\n\nThe fact from the previous paragraph above makes this classification unambiguous.\nAlright, so now we have all the terminology we need to get to the argument about why the puzzle state we started with is unsolvable. We can roll up our sleeves and get started.\n\nThe first line of argument is based on this Numberphile video, and is also the one described in this 1999 American Math Monthly article by Archer. We begin with the observation that every move in the game is really a transposition behind the scenes. In particular, let’s say that we are currently in state s and we perform some move and move to state t. Let’s say the permutation associated with s was \\sigma and the permutation associated with t is \\tau. It’s not hard to see that:\n\n\\tau can be obtained from \\sigma with a single transposition.\n\nNow, note that the permutation corresponding to our target state is the following:\n\n\n\nThe permutation corresponding to our target state\n\n\nIn terms of the game state, notice that the final state has the blank tile at the bottom-right corner, just like we had at the start state. This means that in a hypothetical sequence of moves that morphs the initial game state into this solved state, we must have performed:\n\nan equal number of left and right moves; and\nan equal number of up and down moves.\n\nIf this is not the case — imagine the blank tile traveling through the board as you perform the moves — if the number of times you moved in opposite directions did not exactly cancel, it would be impossible for the blank location to be back at it’s original location.\nSo in any winning sequence, the number of moves performed must be even. This implies that the permutation corresponding to the start state, in particular, can be obtained from the identity permutation with an even number of transformations. That makes the starting permutation an even permutation.\nHowever, the permutation corresponding to the start state that we have been handed out is clearly an odd permutation: it can be obtained from the identtiy permutation by a transposition of the elements at the 14-th and 15-th positions. So, well, no dice! This shows that every solvable state that places a blank tile at the bottom-right corner must correspond to an even permutation. This does not automatically imply that all such states associated with even permutations are solvable* — it just shows that states with blank tiles at the bottom-right corner corresponding to odd permutations are firmly out of reach.\n*It does turns out that all even permutations are in fact solvable.\n\nThe second approach is based on the notion of inversions. This one is based on the Strong Induction lecture in the MITOCW course on Mathematics for Computer Science. For this proof I’ll actually switch to the 3 \\times 3 version of the puzzle because I don’t know how to extend it to the 15-puzzle the case analysis is more manageable for this version:\n\n\n\nA move in the 3 X 3 version of the puzzle\n\n\nAs we said before, the permutation associated with the starting point of the puzzle has exactly one inversion, while the permutation associated with the solved state, which is the identity permutation, has no inversions. So, when you make a move in the puzzle, what happens to the number of inversions?\nAs before, let’s say that we are currently in state s and we perform some move and move to state t. Let’s say the permutation associated with s was \\sigma and the permutation associated with t is \\tau. Let us say that a pair of elements (p,q) is affected by a move in the game if the relative order of p and q is different in the permutations \\sigma and \\tau. Now we have the following:\n\nif we perform a row move, the relative order of all elements corresponding to numbers remains the same — in particular, all affected pairs involve \\star — so the number of inversions in \\tau is exactly the same as the number of inversions in \\sigma.\nif we perform a column move, typically the element that is being moved, say p, ends up effectively jumping over two other elements, say a and b. In this case the following scenarios arise:\n\nNeither (p,a) nor (p,b) is an inversion in \\sigma.\n\n\n\nNeither (p,a) nor (p,b) is an inversion in \\sigma\n\n\n\nIn this case, both (p,a) and (p,b) emerge as new inversions in \\tau, and the total number of inversions in \\tau is two more than the total number of inversions in \\sigma.\n\nBoth (p,a) and (p,b) are inversions in \\sigma.\n\n\n\nBoth (p,a) and (p,b) are inversions in \\sigma\n\n\n\nIn this case, neither (p,a) nor (p,b) are inversions in \\tau — they both get fixed! So the total number of inversions in \\tau is two less than the total number of inversions in \\sigma.\n\nWhile (p,a) is an inversion in \\sigma, (p,b) is not.\n\n\n\nWhile (p,a) is an inversion in \\sigma, (p,b) is not\n\n\n\nIn this case, you fix some, you spoil some — so in \\tau, (p,a) is not an inversion any more, but (p,b) emerges as a new inversion; so the changes cancel and the number of inversions in \\tau is exactly the same as the number of inversions in \\sigma.\n\nWhile (p,a) is not an inversion in \\sigma, (p,b) is one.\n\n\n\nWhile (p,a) is not an inversion in \\sigma, (p,b) is one\n\n\n\nAs before, you fix some, you spoil some just the other way now — so in \\tau, (p,a) is a new inversion, but (p,b) is no longer one; so the changes cancel again and the number of inversions in \\tau is exactly the same as the number of inversions in \\sigma.\n\n\n\nThe long and short of all this is that after every move, the number of inversions either remains the same or changes by two. So no matter how many moves you perform, a state whose associated permutation has an odd number of inversions is going to remain inaccessible.\nTada!\n\nSo there we have it… I have a feeling that a little bit of language connecting transpositions and inversions will really make these proofs quite identical, at least for the 3 \\times 3 case — although I did worry that the first approach seemed to rely rather explicitly on the location of the blank tile while the second one didn’t. It is quite possible that the first one actually demonstrates more than I’m giving it credit for!\nMeanwhile, to be honest, I haven’t thought much about pushing the second line of attack to the 4 \\times 4 case — it seems already that the statement about the change in the number of inversions is no longer true and the change itself is no longer two: in particular, it could apparently go up or down by three or one instead, since the element involved in the action, p is now potentially jumping over three other elements, a, b, and c… so this, at least from an immediate consideration, doesn’t quite take us where we want to go.\nPossibly one has to work with a somewhat different invariant, maybe a notion of inversions that involve triples instead of pairs? Any comments on this would be very welcome, and I’ll have an update once I understand this a little better!"
  },
  {
    "objectID": "blog/django-app/index.html",
    "href": "blog/django-app/index.html",
    "title": "Building a first Django App",
    "section": "",
    "text": "In preparing for a session in a Python workshop (organised for teachers of the CBSE board who are teaching students informatics and computer science in 11th/12th grades, and who have recently had their official syllabus switch from C++ to Python), I finally got around to exploring the process of building a webapp powered by Django. I picked up the excellent Hello Web App book by Tracy Osborn for my preparation. In this post, I am going to document the process — just in case I have to do this again ☕️\nThe tutorial in Hello Web App goes over the process of building a generic “collection of things” with Django. In this tutorial, I’ll focus on a more concrete example, because it was more fun for me to build a tangible concept that I might actually use later.\nSo, I am going to build a collection of talk announcements at IIT Gandhinagar, which I intend to be displayed, on the frontend, as a slideshow. I figure that this website can then be loaded up on any internet-connected display and serve as a virtual notice board. For the frontend design, I’m going to be stealing the Webslides framework, which is a really clean HTML/CSS template for making slideshows powered by Javascript.\n\nQuickstart\nI’m going to handwave the bit about installation. Briefly, I setup Django v2.0.4 in a virtual environment, put the codebase in a git repository, and initialized a Django project via:\ndjango-admin startproject announceiitgn .\nand then a Django app via:\ndjango-admin startapp talks\nIt’s also important to add this app to settings.py, like so:\nINSTALLED_APPS = [\n'talks',\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n]\nand also run a migration command to account for an initial setup for the databases (if you skip this step, Django will prompt you to do it anyway — as I found out by forgetting 😎):\npython [manage.py](http://manage.py/) migrate\nFinally, see your app by running the server! 🎉\npython [manage.py](http://manage.py/) runserver\nYou should see a neat little success page if you navigate to something like http://127.0.0.1:8000/ (the exact URL should be in your console).\nIf you are not sure how to get to this point, I’d suggest looking up an installation/setup guide such as this one from the official documentation or this one from Django Girls.\n\n\nSetting up Templates\nThe first step is to setup a basic HTML template that becomes the frontend. We go into our app directory (which, in my case, is talks) and then make a templates directory inside it, where I make a simple index.html file. Instead of using a skeleton file here, I’m going to take a deep breath and throw in the index.html from the webslides codebase. At this point I know it won’t be a pretty sight, but I’m also optimistic that I can iron it out as I go along 🤕\nI’m going to head over to urls.py and add the following import:\nfrom talks import views\nand then add the following item to urlpatterns, which I understand only vaguely at this point:\npath('',views.index,name='home'),\nWe now need to make sure that views.index actually makes sense, so switch to views.py in the talks directory and add the following:\ndef index(request):\nreturn render(request,'index.html')\nNote that render has already been imported for you from django.shortcuts. For now, I sense that this is the plumbing connecting the directive in urls.py to the meat in the templates directory. Now, navigating again to the webapp, while it’s not exactly pretty (just as predicted), but at least you can see that all the connections are working as intended:\n\n\n\n\n\n\nClick toggle to reveal a full-page screenshot of an unstyled webpage!\n\n\n\n\n\n\n\n\n\nSo it’s time to add the static supporting files for the webslides template. I’m going to create the folder static inside the talks folder. Inside the static folder, copy over the folders css, js and images from the webslides template bundle. Now, we need to make sure that our index.html loads these supporting files from the appropriate location. This is a critical step and will completely transform the way the website is rendered if done correctly. So what we are going to do is add the following line to the top of the file:\n{% load staticfiles %}\nNext, find all instances of anything that looks like:\n<link rel=\"stylesheet\" type='text/css' media='all' href=\"static/css/webslides.css\">\nand change it to:\n<link rel=\"stylesheet\" type='text/css' media='all' href=\"{% static 'css/webslides.css' %}\">\nCareful with getting the quotes and the template tags in place accurately! Also remember to attack every instance of a reference to anything the static/ directory. If you are comfortable with it, this is a near-one-shot find and replace with a regex search.`\nYou could also make this work by using relative paths (i.e., changing the paths to ../css/webslides.css), but using the Django template tags as above is more robust to changes in the directory structure — so in case your static files folder moves around, your code doesn’t have to change.\nNow, for the moment of truth, restart the server:\npython [manage.py](http://manage.py/) runserver\nand revisit your site:\n\nSo there! We’ve managed to render the webslides deck inside of our Django project — which is an awesome start already: 🎉\n\n\nStarting Clean\nOf course, we don’t quite want the index.html file to hold this particular content. I’m going to quickly pick out a slide (from the webslides demonstrations) that looks nice for displaying talk announcements, and get rid of all the original sections and just use this one. Here’s the HTML for the sections that I ended up with, populated with some sample content:\n<section>\n<div class=\"wrap\">\n<div class=\"card-30 bg-white\">\n<div class=\"flex-content\">\n<h2>Talk Title 1\n</h2>\n<p>Speaker Name & Affiliation</p>\n<p class=\"text-intro\">A brief abstract of the talk.\n</p>\n<ul class=\"description\">\n<li><strong class=\"text-label\">Date:</strong> 16 June 2018</li>\n<li>\n<strong class=\"text-label\">Time:</strong> 10:00 AM\n</li>\n<li><strong class=\"text-label\">Venue:</strong> Academic Block 1, Room 101</li>\n</ul>\n</div>\n<!-- end .flex-content-->\n</div>\n<!-- .end .card-50 -->\n</div>\n<!-- .end .wrap -->\n</section>\nOf course, this data would eventually be passed into the template from the database, but let’s render our site anyway and check it out once more before moving on:\n\nIt’s not hard to customize the header from index.html, but I am postponing that for a little bit later.\n\n\nTemplate Inheritance\nIt’s useful to have global-ish aspects of our template separated out into a (presumably traditionally named) base.html template, so we can make spin-offs easily. For example, when we have interviews we like to display room numbers for candidates interviewing for different disciplines on the same day, and some related general information. This page will carry the same overall structure, but we might want to use a slightly different combination of section templates. So let’s rip out the generic stuff from index.html and move it to base.html:\n{% load staticfiles %}\n...bunch of webslides header stuff...\n\n<main role=\"main\">\n  <article id=\"webslides\" class=\"vertical\">\n\n    {% block content %}\n    {% endblock content %}\n\n  </article>\n  <!-- end article -->\n</main>\n<!-- end main -->\n...bunch of webslides footer stuff...\n(Please don’t copy-paste this, work with your own webslides template if you are literally following along! I’ve not dislpayed a bunch of stuff from their index.html in the interest of space.)\nMeanwhile, your index.html now looks like this:\n{% extends 'base.html' %}\n{% load staticfiles %}\n{% block content %}\n<section>\n<div class=\"wrap\">\n<div class=\"card-30 bg-white\">\n<div class=\"flex-content\">\n<h2>Talk Title 1\n</h2>\n<p>Speaker Name & Affiliation</p>\n<p class=\"text-intro\">A brief abstract of the talk.\n</p>\n<ul class=\"description\">\n<li><strong class=\"text-label\">Date:</strong> 16 June 2018</li>\n<li>\n<strong class=\"text-label\">Time:</strong> 10:00 AM\n</li>\n<li><strong class=\"text-label\">Venue:</strong> Academic Block 1, Room 101</li>\n</ul>\n</div>\n<!-- end .flex-content-->\n</div>\n<!-- .end .card-50 -->\n</div>\n<!-- .end .wrap -->\n</section>\n{% endblock content %}\nRemember to make sure that the line:\n{% extends 'base.html' %}\nis the very first thing in your file, and that you add:\n{% load staticfiles %}\nin case you plan to use anything in your static directory in index.html. The power of inheritance becomes a little more evident when you have other files piggybacking on base.html, but I’ll leave that to your imagination for now.\n\n\nSetting up the Database\nWe’re going to start by creating an admin user, by typing the following into the commandline:\npython manage.py createsuperuser\nThis prompts for a username, email and password — nothing out of the ordinary here. Next up is a critical point in this whole exercise, which is to setup the model, or the database schema, for the items we wanted to display. From the HTML above you might have guessed that what I want to define at this point is a talk object with the following attributes:\n\nTalk Title\nSpeaker Name\nVenue\nDate\nTime\n\nTo capture this, add the code below to models.py:\nclass Talk(models.Model):\n    title = models.CharField(max_length=255)\n    speaker = models.CharField(max_length=255)\n    description = models.TextField()\n    venue = models.CharField(max_length=255)\n    date = models.DateField()\n    time = models.TimeField()\nThe field types should be self-explanatory. One type that I did not use was the SlugField, which can be handy if you want every talk to have its own page. For now, we’re keeping it simple. We then ask Django to pick up this updated database plan by running migrations as follows:\npython manage.py makemigrations python manage.py migrate\nWe next get the built-in Django admin interface up to speed with information about our new database, by adding the following lines to admin.py in the Talks folder:\nfrom talks.models import Talk\nclass TalkAdmin(admin.modelAdmin):\nmodel = Thing\nlist_display = ('title','speaker','description','venue','date','time')\nadmin.site.register(Talk, TalkAdmin)\nThe business with the TalkAdmin class is optional, but it lets you do nice things like prepopulate fields where relevant: for instance, if we had a slug field, we could have said something like:\nprepopulated_fields = {'slug'}: ('name',)}\njust after the list_display line above, and you could see the slug getting automatically generated in the admin interface. Speaking of admin interfaces, let’s check ours out — head over to http://127.0.0.1:8000/admin/ and login with your superuser credentials. Here’s what I see:\n\nYou should find your own data in the users table. But the interesting bits are in the Talks table, which is going to look exactly the way we modeled it above when you go to the table and click on the Add Talk button:\n\nNow let’s go ahead and add some sample data in here:\n\nI added this from the admin interface. If you like, you can setup forms for other users to add data to the database, but that’s going to be beyond the scope of our first app. For now, let’s get to tying this all together by getting the data from here to display on the frontend…\n\n\nDisplaying Dynamic Content\nIf you’ve come this far, you are now ready to pull your data into the slideshow that we setup from before. First, let’s get into views.py, pull the data from our database, and pass it on to our template. Modify the file so it looks like this:\nfrom django.shortcuts import render\nfrom talks.models import Talk\n\n#Create your views here.\n\ndef index(request):\ntalks = Talk.objects.all()\nreturn render(request, 'index.html', {\n'talks': talks,\n})\nNext, let’s head back to our index.html file, and adapt our content block:\n{% extends 'base.html' %}\n{% load staticfiles %}\n{% block content %}\n{% for talk in talks %}\n<section>\n<div class=\"wrap\">\n<div class=\"card-30 bg-white\">\n<div class=\"flex-content\">\n<h2>{{ talk.title }}\n</h2>\n<p>{{ talk.speaker }}</p>\n<p class=\"text-intro\">{{ talk.description }}\n</p>\n<ul class=\"description\">\n<li><strong class=\"text-label\">Date:</strong> {{ talk.date }}</li>\n<li>\n<strong class=\"text-label\">Time:</strong> {{ talk.time }}\n</li>\n<li><strong class=\"text-label\">Venue:</strong> {{ talk.venue }}</li>\n</ul>\n</div>\n    <!-- end .flex-content-->\n</div>\n<!-- .end .card-50 -->\n</div>\n<!-- .end .wrap -->\n</section>\n{% endfor %}\n{% endblock content %}\nNote that we’re now using a for loop to go over everything in talks, and replacing our static content with template tags that represent the corresponding data from the database. Django has a lot of interesting ways in which you can format your content (such as dates and times, especially, but even text strings — for instance, they can always be rendered in title case, if you like, and so on). Since the default view here is not bad, I won’t be pursuing this further — but it’s good to know that you can do cool things.\nLet’s check out our site now, to relish the sight of the slides populated with conent from our database:\n\n\n\nFiltering Dynamic Content\nLet’s say we only want to display those talks whose date is not in the past — this is a natural ask, we don’t want our virtual notice board to be cluttered with information about talks from the past (that’s more suitable for a talk archive page), and we also don’t want to have to delete talks from the database manually (two issues with this: the first is that manual is tedious, the second is that it’s nice to keep the data — quite likely the developer of the future archive page will find it useful).\nOne way to do this is to loop through all the talks in our template file, and setup a conditional for whether we display it. The main problem doing it this way is that we are doing waaaay more work than is called for: eventually this database will have thousands of talks, while you probably need to get hold of a dozen or so of them. The more appropriate solution is to setup what is called a filter when you make the database query. After some fiddling around, I finally got to this updated query in my views file:\ntalks = Talk.objects.filter(date__gte=datetime.now()).order_by('date')\nRemember to import datetime for the above to work:\nfrom datetime import datetime\nThe syntax here is almost self-explanatory: we got rid of the .all() and replaced it with a .filter() to indicate that, indeed, we don’t want all records but only those that match the filter criteria. Next, gte stands for greater than or equal to; datetime.now() refers to today’s date; while the order_by directive asks the retrieved objects to be ordered according to a particular field. You can order by this-then-that by simply adding multiple fields separated by commas, and you can reverse the order by adding a leading hyphen (or a “minus”, if you like) to the field name. Try all this out! Also: try to mess around with the query to see what happens when the query returns an empty set of records.\nGoing back to our app, we see that the one talk that was in the past (at the time of this writing) is now gone:\n\n\n\nFinishing Touches\nOne thing I didn’t touch upon was how to pass Python variables into the template. Let’s try this now, by adding a final slide that displays today’s date and a nice background image (which resides in the images/ folder under the static directory). To pull out today’s date, let’s set a variable currdate in our views file, and pass it on to our template, like so:\ndef index(request):\n    talks = Talk.objects.filter(date__gte=datetime.now()).order_by('date')\n    currdate = datetime.now()\n    return render(request, 'index.html', {\n        'talks': talks,\n        'currdate': currdate,\n})\nBack to the template, as before, I picked up a nice-looking section from the vast array of webslide’s demo pages. Carefully add this section after the forloop block ends:\n<section class=\"bg-gradient-v slide-bottom\">\n<span class=\"background light\" style=\"background-image:url('{% static 'images/campus-bg.png' %}')\"></span>\n    <div class=\"wrap\">\n        <div class=\"content-right\">\n            <h3 class=\"alignright\">{{ currdate|date }}</h3>\n        </div>\n    </div>\n<!-- .end .wrap -->\n</section>\nNote the use of {{ currdate|date }} — this displays the value of the variable currdate but formatted so that only the date is displayed (without the trailing date instruction, this would display the date and the time by default). This gives us a cool final slide:\n\nAlso remember to head back to base.html and customize the header so the social media links and the logos are relevant to your setting:\n\n\n\nBeyond the First App\nOur app was, by design, a largely view-only app. In most situations, however, your app will likely have users, so you would want features like:\n\nRegistration (possibly even single-sign ons)\nA Login Flow (optionally, also an onboarding flow)\nReset Password\nThe ability for users to view user-specific data\nThe ability for users to add/edit/delete user-specific data\n\nFor a lot of this you would need to invoke some kind of a customized form interface (different from Django’s built-in admin interface) that allows the user to interact with the database. Covering this is beyond the scope of our discussion, but if you would like to set these things up, I’d suggest continuing your journey with either this Django tutorial series, the official documentation, or Hello Web App. Have fun!"
  },
  {
    "objectID": "blog/on-teaching/index.html",
    "href": "blog/on-teaching/index.html",
    "title": "On Teaching",
    "section": "",
    "text": "A teacher does not teach, a student learns.\n— snippet from this interview of Ustad Zakir Hussain\nI’ll pose some how/what/why questions in the context of teaching."
  },
  {
    "objectID": "blog/on-teaching/index.html#how",
    "href": "blog/on-teaching/index.html#how",
    "title": "On Teaching",
    "section": "How",
    "text": "How\nThe last couple of decades, especially the last few years, have seen dramatic changes in how information is communicated. A lot of learning happens in online communities, for instance, question-and-answer websites like Quora and StackExchange. Thanks to folks who invest time on these platforms, expert help seems to be nearer than ever before. Specialized and snark-free communities on Discord/Slack/Telegram are enabling peer-to-peer learning at global scale. I keep hearing that Quora is not what it used to be, but as long as Thomas Cormen is an active user, I am positive it remains a valuable resource.\nBooks are beginning to be injected with exciting new technology: CodeMirror makes code interactive and runnable, while tools like PythonTutor can help with visualizing what happens behind-the-scenes when code is executed. Say what you want about JavaScript, but the interactivity that it brings to the written medium has helped make reading less passive. Some of my favorite interactive texts include Seeing Theory, Probabilistic Models of Cognition, courses on Brilliant, Mathigon, and essays from Nicky Case, Minute Labs, and others on Explorables.The name “PythonTutor” is slightly misleading, since the website also lets you visualize code snippets written in C, C++, Java, and JavaScript.\n\n\nAnd finally there are the online courses. At the time of this writing, it has been just a little over two decades since MIT’s Open Course Ware opened to the public. The early hype around MOOCs roughly coincided with my years in college and graduate school. As far as I remember, it was quite the thrill to have free-flowing access to online lectures — “taught by the best” — for several of the courses I was supposed to be doing as a part of my curriculum.\n\n\n\n\n\n\nAll this is to say that I walked into a career involving a substantial teaching component with plenty of hesitation. The delivery was/is still largely confined to classroom settings in broadcast mode. It is not entirely clear what this format has to offer over YouTube. Basic interactivity is being increasingly solved with questions built into video players. Peer learning is quite doable with WhatsApp/Slack/Discord groups and local chapter meetups. Scale in the context of assessments is somewhat addressed by peer evaluation. And then there are all the things you can do on YouTube that you can’t do with traditional lectures: find a teacher whose style resonates, find an accent you understand, replay, play at 2x, 0.5x, binge watch, don’t watch…\nSo: what’s the incentive for anyone to show up in a classroom at a fixed time, especially when said time is 8AM? This question became particularly relevant during the pandemic years: once the novelty wore off, almost nobody† showed up to lectures. If I was a student, I’d likely do the same. This remains largely an open problem in my mind, but here are some pointers that have kept me motivated about the conventional format. † Shout out to those of you accounting for the “almost”, thank you!\n\nClassroom = theatre. I am increasingly treating it as a ground for practicing standup and magic skills. I should admit that this isn’t easy for a clinically shy person like myself, but I got used to making a fool of myself fast — that’s served well. I imagine that some of the fun that comes out performance-first lectures is hard to recreate with recordings and notes.\n\n\n\n\n\nTotally. It's almost always a performance, irrespective of the class size. And the more you rehearse, the better it goes. At least that's what works for me.\n\n— Manu Awasthi (@mnwsth) August 24, 2022\n\n\n\n\n\n\n\nSome musings on teaching from a lunch talk awhile back: https://t.co/19vOXpxcjs\n\n— Tim Roughgarden (@Tim_Roughgarden) April 6, 2021\n\n\n\n\n\nIn a classroom setting, I can nudge the audience to discover things for themselves. As far as I know, the interactivity in online materials can help with validating understanding, but not as much with developing it from first principles. My hope is for learners to walk out of a classroom with the confidence that they came up with parts of the material in the textbook on their own.\nAgain, this is hard to do in time-bound fashion, given that a lot of this kind of understanding comes from brooding and hours of messing around. I can only hope to convince the audience that the process is worth the trouble.\nThe opportunity to show that you care. For learners who may have struggles with and beyond the materials — classrooms, labs, and office hours afford opportunities for us to offer help.\nThis was a late realization for me personally: for the longest time, my own sense of self-doubt did not allow me to see that I could potentially be useful to someone else. While self-doubt remains, I have started to compartmentalize it enough to show up for others.\n\nAll this said, I believe online and remote formats have substantial potential for making quality education accessible at scale, and that it is only a matter of time before classrooms in their most conventional forms either become obsolete or a ruse.\n\n\n\n\nI am going to attend college lectures from now on just to increase my attention span. The goal will be to sit for an hour without sleeping or getting distracted from mobile notifications.\n\n— Priyansh Agarwal (@Priyansh_31Dec) September 5, 2022\n\n\n\n\n\nCalvin on 21st Century Education"
  },
  {
    "objectID": "blog/on-teaching/index.html#what",
    "href": "blog/on-teaching/index.html#what",
    "title": "On Teaching",
    "section": "What",
    "text": "What\nIt is also increasingly challenging to formulate a curricula gets people to the bleeding edge starting from the foundations. For instance, there is a growing sentiment that Machine Learning is the new Algorithms (or maybe not). On the other hand, the extent of involvement of “mathematics” in introductory CS courses is also up for debate.\n\n\n\n\n\nCutting Edge\n\n\nHow much theory is needed for competence in practice? How crucial is it to develop competencies that don’t have an immediately visible ROI? How frequently do we rewrite the textbooks based on developments in industry?\nI once read a collection of answers to the question of what every computer science graduate should know on a Q&A site. As an aspiring graduate myself, I figured I should know what I should know. Unfortunately, I remember it as a mostly unnerving experience: it was a list that started with Voronoi diagrams and ended with incompleteness theorems, and a lot of things in between.\nFrom the other side of the fence, for whatever it’s worth — the answer to this question remains elusive, mainly because I think it’s a context-heavy issue. For better or worse, there is a growing interest in computer science, and it will likely remain a non-trivial challenge to find an approach that is both maximally inclusive and sufficiently useful. I can only hope that between ruthless efficiency in teaching things driven purely by need and a curriculum flooded with random adventures, we can find an balance appropriate to our contexts!"
  },
  {
    "objectID": "blog/on-teaching/index.html#why",
    "href": "blog/on-teaching/index.html#why",
    "title": "On Teaching",
    "section": "Why",
    "text": "Why\nGiven that everything that needs to be explained has more or less been done and dusted really well on the interwebs, personally, this is hardest question of the lot. Not from my own POV, that’s the easy bit - as pointed out here, it’s fun to go through the idea exchange process with a captive audience, and in my experience at least one party is sufficiently triggered at the end of it (hopefully in a good way).\n\n\n\nThe satisfaction that you get when you are able to explain a concept to someone who did not know it earlier is immense. Sometimes it could be straightforward, and sometimes it could be frustrating. But the end point is always the same - a smile on the faces of those students. Money can buy all the books, but can’t buy that smile.\nProf Dheeraj Sanghi, “Why I want to be a professor”\n\n\n\n\nOn hope in teaching.\n\n\nI am just not sure if we create enough of a net positive in a traditional classroom setup from a ROI perspective. Given the few good things that the internet has brought us, perhaps it is time to think beyond classrooms and focusing on making existing resources more accessible to everyone who’s interested.\n\n\n\n\nJoin the conversation\n\n\nNew blog, new post:https://t.co/c2lEHM0lTIMeanwhile — happy teachers day to everyone!\n\n— Neeldhara (@neeldhara) September 5, 2022"
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html",
    "href": "blog/envelope-budgeting-notion/index.html",
    "title": "Envelope Budgeting with Notion",
    "section": "",
    "text": "YNAB (c.f. r/YNAB) (short for You Need a Budget) is a budgeting application that lets you track and manage your finances. Like most apps in this category, it provides a slick interface to enter all your transactions. YNAB is more than just cataloging transactions and tracking account balances, though. The design here revolves around (and goes beyond) what is called envelope budgeting, which basically boils down to this:\nYou can dig a little deeper into how YNAB works by looking up their four rules here. I am going to try and create an envelope budgeting system in Notion that is loosely inspired by my use of YNAB.\nTo be clear, I don’t expect to stop using YNAB, nor do I expect to replicate many of its sophisticated features. Also, there are some nice envelope budgeting systems on Notion already! For instance, you might want to check out the one here by u/sff_fan_17 or the one here by Ben Smith. These are really neat, but the only reason I’m not just duplicating one of them is that what I have in mind looks slightly different from the setups here. In particular, I would like the transactions to be dated and tied to specific accounts, and I would also like the system here to account for all the inflows and outflows in my actual system. Neither of these templates feature a hierarchy of categories either, which is something that we will attempt to do here.\nIn the first template above, I think the total income is mentioned separately, outside of the database system; and the budget covers a part of the total available income. There are explicit instructions on how to update this month-to-month, so do check this out — perhaps it works for what you might have in mind! The second template explicitly accounts for inflows, and is apparently based on this Google sheet. It does seem that the transactions are missing information about accounts and dates, which could be a little limiting if you wanted to generate a report or a dashboard for a particular period of time. Again, a great starting point, and if it resonates with your kind of setup, it’s definitely worth duplicating and playing with. Both templates are free to access and replicate.\nIncidentally, if you don’t use Notion and are hesitant to try YNAB, you could take a look at their guide to building your own budgeting template — this does not require using YNAB at all and can even be made to work pen and paper. Many people have also recreated YNAB’s core features using their own favourite tools, the most popular among which appears to be Google sheets — see, for example: Aspire Budget (c.f. r/aspirebudgeting) — I have not tried this myself, but it appears to be very feature-rich and neat overall.\nThat said, onto our own YNAB-esque budgeting template in Notion! We’re on our way to something that looks like this:\nIf you want to just skip ahead and play with the template, you can duplicate it by following this link:\nThere are three key pieces to this setup: the first is the categories (these are the labels on the envelopes, if you like), the second is the actual transactions that take take place, and the third is a list of accounts that you have (could be bank accounts, credit accounts, virtual wallets, and so on). You would want the transactions database to be linked to both categories and the accounts. More on the exact table designs below. I’m going to assume some familiarity with Notion terminology, if this is your first time with Notion then some of this may not make sense right away, but if you could just look up how Notion databases work — especially the relational aspect — then I think you’d have all you need to follow along!"
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#budgeting-categories",
    "href": "blog/envelope-budgeting-notion/index.html#budgeting-categories",
    "title": "Envelope Budgeting with Notion",
    "section": "Budgeting Categories",
    "text": "Budgeting Categories\nIt may be natural for this table to just have one row for each category. You probably want to have a small number of higher-order categories (e.g: monthly supplies, services, maintenance, health, investments, etc.) and smaller, more specific ones under these broad umbrellas (e.g, services would likely have sub-categories along the lines of internet, phone, electricity, water, etc.). You can do this by setting up a relation property to the table itself, and have it sync two-way, like so:\n\n\n\nScreenshot 2021-09-18 at 3.29.11 PM.png\n\n\n\n⚡ We want to make a database that captures the categories that our expenses fall under, and the budget that’s available for these categories.\n\nIf you want to see just the higher-order categories nicely, you can setup a gallery view with a filter for the main category to be empty, which would look like this (I’ve disabled the preview and added some icons from notion.vip):\n\n\n\nThe Gallery View\n\n\nNext, we want to specify a budget for each of these categories. We can do this directly for the lower-order categories first. Then, we can have the main category budgets calculated automatically by rolling up the budgets of the corresponding child categories and adding up their budget values. To have a clean view of the budget, you could add a formula column that just adds up the values from the direct budgets and the rollup, like so:\n\n\n\nBudget View\n\n\nYou can add two dummy properties with the text Budgeted: and Remaining: for each row, and set them to show along with the budget in the Gallery view so you get something like this:\n\n\n\nBudgeted and Remaining Labels\n\n\nThere are two natural questions at this point:\n\nHow do we know that we have budgeted what we actually have?\nHow do we know what amounts are remaining at any given point of time in the month?\n\nTo address both of these questions, we will need to flesh out the transactions database, link it to the categories and come back to this. But before that, let’s do a quick detour with an accounts database just to setup the foundation we need for the transactions database."
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#accounts",
    "href": "blog/envelope-budgeting-notion/index.html#accounts",
    "title": "Envelope Budgeting with Notion",
    "section": "Accounts",
    "text": "Accounts\nFor this demonstration, I am just going to add two accounts — one savings bank account and one credit card account:\nThe most natural property we want for the Accounts database would be a balance column. Instead of maintaining this manually, we will just link this with the transactions database and derive the balance by rolling up the relevant transactions.\n\n\n\nAccounts View\n\n\n\n⚡ The accounts database simply has one row for every account you have — these could be savings accounts, credit card accounts, a cash account, or your virtual wallets."
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#transactions",
    "href": "blog/envelope-budgeting-notion/index.html#transactions",
    "title": "Envelope Budgeting with Notion",
    "section": "Transactions",
    "text": "Transactions\nYou might want to optionally add a memo property that lets you add a quick note or explanation for the transaction. However, given that each database entry is also a page, you could also quite flexibly add all the additional information you want to the page corresponding to any transaction. Meanwhile, you might also want to setup relations to other parts of your Notion setup if you find anything relevant — for instance, if you have a books database, or an inventory database, and so on. That said, we’re going to keep it simple here, and here’s an example transaction:\n\n\n\nAn Example Transaction\n\n\n\n⚡ Every transaction has the following: an amount, a payee, the account to which the amount was debited or credited to, the date the transaction happened, and and the expense category that the transaction belonged to. We set these up as columns with the appropriate properties, with the accounts and categories being relational links.\n\nYou’ll notice that I’ve linked to both the child and the parent category for this transaction. It would be nice if the parent category was pulled up automatically — and this is possible with a formula, but as far as I know the formula will not actually link the transaction to the main category. So for now, we assign both categories manually. 🤷‍♀️\nOne quick thing to do now is to go back to the Accounts database and add a rollup property that takes on the sum of the amounts property from the related transactions table, and once done, the balances show up nicely in the gallery view:\n\n\n\n\n\nRollup sum of amounts in accounts\n\n\n\n\n\n\nGallery view of balances\n\n\n\n\nNow we go back to our categories database and rename the relational column to transactions and add a rollup that collects all expenses from the transactions that happened in a particular category, so this is what it looks like:\n\n\n\nCategory view\n\n\nNow add a formula column available that simply adds up the budget and the expense columns so you can find out how much of your budget is still available for use. My formula looks like this:\nprop(\"Final Budget\") + prop(\"Expenses\")\nNote that it might feel more natural to subtract expenses, but my expenses are already negative amount transactions, so I just need to bundle it all together.\n\n\n\nCategory View\n\n\nJust for fun, you could also add a status column that visually indicates how much of your budget you have left. The progress-bar style of the status property here is inspired by this guide, and the formula I used requires a couple of auxiliary columns that calculate the percentage and determine if a half-star should be used or not based on the value of the decimal part. It also first checks that the available balance is in fact positive, if not, it’s going to display a suitably scary warning emoji. I won’t bore you with the specifics here, but you can find the formula in the template that I’ve linked to at the end of this post.\nSo now we are at a point where the remaining amounts are calculated based on the transactions. However, we still have to think about how to link the budgeted amounts to the actual money available. In fact, speaking of money available, I haven’t really touched upon how to handle transactions that are not expenses; i.e, transactions with a positive amount value and that reflect money coming into the system as opposed to leaving it. These are, of course, just regular transactions — but what category do we assign them to? All the ones we have so far really capture spends, not inflows…\nSo, it turns out that YNAB would take all this money and automatically categorize it as unassigned, or to be budgeted. We can mimic this by creating a special category called to be assigned, and have all income-type transactions categorized as such. Typically this would be transactions corresponding to a salary, client payments, refunds, credit from interest, and so forth.\n\n\n\nThe TBA Category\n\n\nNotice that the so-called expenses1 that are now accumulating in this category is actually the total amount of money that came into the system. Incidentally, if you were to just look at the sum of the balance column in the accounts database, that’s the net amount of money in the system at any given point of time.1 Remember that the expenses column just rolled up the transaction amounts in a particular category.\n\n\n\n\nAccounts View\n\n\n\n⚡ Note that transactions that just move money within your accounts, like a credit card payment, don’t need any explicit expense categories.\n\nYou also don’t need to budget separately for credit card payments, because your credit card bill is composed of transactions that were already budgeted for! Even if they were items corresponding to, say, credit card fees, you probably categorized them under Services, for example. So we won’t have a separate budget for credit card bill payments (although I should mention that YNAB does this explicitly and handles it automatically).\nAlright, so it seems like we are nearly there, except that our current situation is the following:\n\nThe amount the to be assigned category is a true reflection of incoming funds.\nThe amounts that we added to our category budgets were setup manually and generally divorced from the reality in the transactions database.\n\n\n⚡ To fix this, we need some way to move funds from the to be assigned category to the other ones.\n\nFor example, let’s say I want to budget 750 for ebooks this month. I could do this by adding a dummy transaction that debits an amount of 750 to the to be assigned category and credits it to the ebooks category. What this means is that when we roll up the amounts from all transactions, we directly obtain the amount remaining for us to spend!\nSo for the very first month, when we have a clean slate, we just have a bunch of such transactions — these won’t have any explicit account associated with them because they aren’t real transactions; and in fact you can always filter your transactions table so that you only see the meaningful ones by setting the condition that the accounts column should be non-empty.\nMeanwhile, here is how we do the budgets for our categories all over again, this time via these virtual transactions:\n\n\n\nBudget Overview\n\n\nIf you go to the to be assigned row in the categories table and look at the rollup value in the expenses column, then you’ll see that it corresponds to either the amount of money that’s still assigned (these are dollars — or in my case, rupees — that don’t have a job yet), or, in case you happen to have overshot the budget, the amount by which you are falling short. In the former situation, the available amount will be a positive number, while in the latter, it’ll be negative.\n\n\n\nTo Be Assigned\n\n\nIdeally, we just want this number to be zero, indicating that everything has been assigned appropriately. To achieve this:\n\nIf your budgets have collectively overshot the amount of money available, re-adjust them them — specifically, reduce some of the amounts — so that this is no longer the case. Of course, I am saying this from a theoretical standpoint; if your situation is that you have real expenses that you don’t have real money for, then you would want to plan for this by bringing the differential amount of money into the system via a loan, and then planning the repayment by budgeting for it as well. Dealing with debt is beyond the scope of this discussion, but I think the YNAB blog, book, and videos go into this at length.\nIf you have money left over, you could either add it to your budgets, giving yourself some extra wiggle room; but I prefer to budget for fixed amounts generally, so in this situation I’ll just add this amount to something I call a Miscellaneous or Scratchpad category. It’s something you can borrow from if you fall short later, it has no particular semantics. Some people like to sweep off any excess money into deposit accounts, and if you do this, then you might want to create those accounts in the system and enter those transactions to get rid of this positive balance.\n\nAt the end of this, you are in a situation where all money is nice and assigned. Since we started off by specifying budgets manually, we should go back and fix some formulas in our database of categories. In particular, here’s what I did to simplify things:\n\nRemove the Available column (previously this was the difference of the manually set budget and the rolled up expenses).\nRename Expenses to Available, since the rollup now just reflects what’s truly available.\n\nI’m going to leave the manually added budgets in — although we won’t use them to calculate what’s truly available any more, they will help us plan our budgets going forward.\nEverything so far should make sense for an initial setup, but what do we do when we have new incoming transactions that need to be assigned to categories? I generally like to do the budgeting exercise once at the start of every month, so any intermediate positive transactions into the system will either remain in the To be assigned category, or if you are OCD about wanting that that category to be set to zero always, you can always push this number out into your scratchpad.\nAt the start of the month (this could be another day and a different frequency; but I do recommend being consistent for simplicity), we need to refuel the categories with the funds available. There are two kinds of things that could happen here, broadly speaking:\n\nFor categories that represent a plan to save up to something, like a vacation, or a category where you feel like you want to have a certain amount of money set aside every month irrespective of how much you spent in the last month, you just want to push budget amount of money into that category via the virtual transactions we discussed earlier.\nFor other categories, which I like to think of as those having rolling budgets, you want to only assign the difference between what was budgeted and what was spent… and hopefully this is a non-negative quantity!\n\nYou could setup a checkbox to indicate which categories have rolling budgets and which ones do not, and then this formula:\nprop(\"IsRolling?\") ? (prop(\"Budget\") - prop(\"Available\")) : prop(\"Budget\")\nwill tell you how much you should budget for next month.\n\n\n\nIn this example, Ebooks are not a rolling category, so even though I need only 628.95 to meet the original budget, I’ll still set aside the full 750, and the amount that will be available will be 871.05. On the other hand, Phone is a rolling category, and presumably my phone-related expenses in the current month added up to 420, so the recommendation is to budget 420 next time so you’ll still have 500 available total.\n\n\nIn this example, Ebooks are not a rolling category, so even though I need only 628.95 to meet the original budget, I’ll still set aside the full 750, and the amount that will be available will be 871.05. On the other hand, Phone is a rolling category, and presumably my phone-related expenses in the current month added up to 420, so the recommendation is to budget 420 next time so you’ll still have 500 available total."
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#the-process-after-setting-up",
    "href": "blog/envelope-budgeting-notion/index.html#the-process-after-setting-up",
    "title": "Envelope Budgeting with Notion",
    "section": "The Process After Setting Up",
    "text": "The Process After Setting Up\nThere are two main times that you’ll interact with this budget: whenever a transaction is made, and once every X days to reset the budgets for the individual categories.\nAdding transactions is reasonably easy, although admittedly it’s probably not as smooth as a specialized app that might have a Siri command to do this for you or a widget that let’s you quick-add things. However, it’s not too bad, especially if you enter it right away. You could also potentially automate this via API integrations, or enter your transactions in your regular app and export them as a CSV and import them into the Notion system once every so often.\n\n\n\nTransaction Table\n\n\nThe budgeting bit is going to be a little more work, especially if you work with a gazillion categories. The formulas will guide to you what needs to be done, but those virtual transactions still need to be added manually. On YNAB, you can do what I described above (adding the deficit to rollup categories and the originally intended budgets to the others) in one click — and there are other options too, for example, you may have moved to a new location and you’re still getting the hang of what you’ll need to set aside for groceries, so YNAB will offer to budget what you spent last month, or your average expenses from the last six months, and so on. Here, since you are assigning things manually, you can definitely tweak as you go; the next month column is just a suggestion.\nYou can probably prepare a CSV file with the default budget amounts and just merge this in at the start of every month if your expenses are super predictable, and just adjust the entries that need adjusting. This will save you some time, but remember that the categories still need to be linked to manually. It’s not too bad for something that happens once a month and that will hopefully bring you some sense of control and awareness 😇\nPerhaps also try and not have a gazillion categories and sub-categories, at least to begin with — it helps to keep things simple, especially when starting out."
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#common-pitfalls",
    "href": "blog/envelope-budgeting-notion/index.html#common-pitfalls",
    "title": "Envelope Budgeting with Notion",
    "section": "Common Pitfalls",
    "text": "Common Pitfalls\nHere are a couple of mistakes I made frequently, even while just setting up this template!\n\nForgetting that transaction amounts corresponding to expenses should be recorded as negative numbers! If this happens very very frequently to you, you could also set this up a little differently — have a checkbox to indicate if a transaction is an expense or an inflow, and always enter a positive number reflecting the amount, and let a formula do the work of adding the sign!\nForgetting to add the parent category — this can mess up the views of what’s available in the high-level categories and cause the numbers to not tally. So if you need to debug your numbers, check for whether you have added both categories to your transactions or not!"
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#dashboards",
    "href": "blog/envelope-budgeting-notion/index.html#dashboards",
    "title": "Envelope Budgeting with Notion",
    "section": "Dashboards",
    "text": "Dashboards\nMost of the action here is happening in the Transactions database. You could create linked copies of this database anywhere you like and filter things out to see what you want. For instance, if you want to keep tabs on the transactions in specific accounts, you could have this on your account pages:\n\n\n\nAccount Overview\n\n\nYou could filter out transactions for a particular month, a particular category (either a top-level category or an atomic one), and so on. I think there’s plenty you can do here, but I am not sure how much of this can be automated. For instance, you might want to generate — or have over email — a monthly report of your expenses across various categories and how did relative to your estimated budgets. This should be possible by leveraging the API and tools like Integromat/Zapier/Automate.io - but I haven’t really explored the possibilities here."
  },
  {
    "objectID": "blog/envelope-budgeting-notion/index.html#missing-features",
    "href": "blog/envelope-budgeting-notion/index.html#missing-features",
    "title": "Envelope Budgeting with Notion",
    "section": "Missing Features",
    "text": "Missing Features\nIt would be nice to have a gallery view of the months of the year showing spends and budgets in each (high-level?) category. For this though I’d need the rows to correspond to months, columns corresponding to categories, which pull up transactions that happened in a particular month from said category.\nEven if I manually linked the transactions database to this calendar one, and made sure each transaction was linked to the correct row, I don’t see how I can split up those transactions across categories, since it’s not possible to add a filter to relational columns or rollups as far as I know. It’s a similar bottleneck going through the Categories database as well. This information is of course implicit in the system, I just can’t think of a neat way of visualizing it.\nThis is possible to do for the current month though:\n\n\n\nMonthly Overview\n\n\nYNAB also has more sophisticated category types — apart from budgets that roll or accumulate, you could have categories that aim to have a certain amount of funds assigned by a certain date and so on. For those who are freelancers with incomes spread over the days of the month, I think YNAB has a lot of little features that allow for a more flexible way of budgeting, which I’m not super familiar with because I’m not in this situation. This is just to say that this setup here may be both limiting and feeing because of how much of the setup is manually done. At least that’s my optimistic view right now 😀\nFinally, YNAB also has an option to reconcile accounts, which is when you declare that the numbers in YNAB match the book balance according to your bank or credit card agency. This is a neat little thing that I like to check off every so often. Here, I suppose you could just glance through the balances on the Accounts database (remember the gallery view from earlier?), but it won’t have the same song-and-dance-y feeling — but maybe this could be a recurring task that you can check off, and hopefully that will feel good 😅\nSo that’s about it! I’d love to hear any feedback on this, and suggestions for improving the setup would be very welcome too. You can duplicate the template from here."
  },
  {
    "objectID": "blog/women-in-mathematics/index.html",
    "href": "blog/women-in-mathematics/index.html",
    "title": "Women in Mathematics",
    "section": "",
    "text": "Here’s a list of books — in no particular order — about women in mathematics (broadly interpreted) largely taken from this thread. The links are mostly to versions of the books on Amazon India. Unfortunately many of them are rather expensive, but hopefully it’s a handy list to share with a librarian you know! Do leave a comment below if you have any additions.\nI’ll also leave this relatively sobering thought (or this one) here with no further comment.\n\nBooks:\n\nComplexities – Women in Mathematics\nWomen in Mathematics – The Addition of Difference\nHow to Free Your Inner Mathematician: Notes on Mathematics and Life\nAda’s Algorithm: How Lord Byron’s Daughter Launched the Digital Age Through the Poetry of Numbers\nWomen Who Count: Honoring African American Women Mathematicians\nWomen Becoming Mathematicians – Creating a Professional Identity in Post–World War II America\nPower in Numbers: The Rebel Women of Mathematics\nMy Remarkable Journey: A Memoir (Katherine Johnson)\nProving It Her Way: Emmy Noether, a Life in Mathematics\nEmmy Noether’s Wonderful Theorem\nLove and Mathematics: Sofya Kovalevskaya (alternate link)\nEinstein’s Wife: The Real Story of Mileva Einstein-Maric\nInventing the Mathematician: Gender, Race, and Our Cultural Understanding of Mathematics\nIn Code: A Mathematical Journey\nAgainst All Odds: Women’s Ways to Mathematical Research Since 1800: 6 (Women in the History of Philosophy and Sciences)\nThe Ascent of Mary Somerville in 19th Century Society\nJulia: A Life in Mathematics (ebook only)\nWomen of Mathematics: A Bio-Bibliographic Sourcebook\nA Celebration of the EDGE Program’s Impact on the Mathematics Community and Beyond\nThose Magnificent Women and their Flying Machines: ISRO’S Mission to Mars\nGirls Coming to Tech!: A History of American Engineering Education for Women\nFifty Years of Women in Mathematics\nx+y: A Mathematician’s Manifesto for Rethinking Gender\n\nIllustrated Books:\n\nMaryam’s Magic: The Story of Mathematician Maryam Mirzakhani\nNothing Stopped Sophie: The Story of Unshakable Mathematician Sophie Germain\nGrace Hopper: Queen of Computer Code\nAda Byron Lovelace and the Thinking Machine\nThe Thrilling Adventures of Lovelace and Babbage: The (Mostly) True Story of the First Computer\nThe Girl With a Mind for Math: The Story of Raye Montague\nHidden Figures: The True Story of Four Black Women and the Space Race\nCounting on Katherine: How Katherine Johnson Put Astronauts on the Moon\nEmmy Noether: The Most Important Mathematician You’ve Never Heard Of\n\nMiscellaneous:\n\nA Tribute to Professor Helena Rasiowa (PDF)\nA Groundbreaking Mathematician on the Gender Politics of Her Field (New Yorker)"
  },
  {
    "objectID": "blog/skj/index.html",
    "href": "blog/skj/index.html",
    "title": "SKJ",
    "section": "",
    "text": "This is the text of a short speech I gave at the farewell event for Prof. Sudhir Jain as he left IITGN for BHU.\n\n\n\nProf. Jain at the farewell event held on the 3rd January, 2022.\n\n\nYou can find out more about Prof. Jain’s own take on the cultural foundations of IIT Gandhinagar here, where he is in conversation with Achal Mehra.\n\n\nCanadian astronaut Chris Hadfield has said that leadership is not about glorious crowning acts. It’s about keeping your team focused on a goal and motivated to do their best to achieve it, especially when the stakes are high and the consequences really matter. It is about laying the groundwork for others’ success, and then standing back and letting them shine. If that sounds familiar, I think it’s because we have lived this experience at IIT Gandhinagar, thanks to Prof. Jain.\nOur guiding principles have been often unconventional — whether it’s about having students first, or choosing to trade short-term gains for the long-term vision. They have sometimes led to decisions that would seem quite inexplicable to anyone who did not have the context. Some of you might remember how early we started the undergraduate program in Computer Science, for example. Ok, so for the record, we started it quite late, at least according to conventional wisdom.\nCrucially, these core values have always been articulated in collaboration, with inputs from all stakeholders, which is what enables our shared conviction in them once they have been established.\nProf. Jain’s vision for IIT Gandhinagar is as precise as it’s bold – he knew exactly what needed to be done for this place to emerge as a model institution. He had recently shared with us his roadmap for IITGN from a dozen years ago. This roadmap committed not to vague ideas but concrete goals, complete with numbers for metrics that are fraught with uncertainty. It’s absolutely stunning how everything panned out almost exactly according to plan!\nOur narrative has many collaborators, including our students, faculty, and staff. And while some of us are relatively inexperienced, Prof. Jain’s trust in everyone has been hugely empowering. It manifests in many concrete ways – starting from wanting for students to be recognized as adults, to turning young colleagues into decision-makers… and this is why all of us have a deep sense of ownership for IITGN.\nAn environment that gives all of us the freedom to experiment and the leeway to fail is extremely enabling. This has led to a wide spectrum of wins, many that are quantifiable and others that are less tangible. If you want to get a sense of how good the times have been, just look around – the sheer beauty and the attention to detail that the campus embodies is an excellent symbolism for the inclusive, thoughtful, and innovative leadership that we have experienced. When it comes to how far we have come, I could go on… pretty much forever, so I’ll defer you to the website for more details.\nIt is impossible to imagine IITGN without you. This is your brainchild through and through. Despite knowing that you’ll not be distancing in spirit, we will miss having you nurture the institution in the hands-on manner that you have always done. Your passion for the IITGN mission – of being a breakout university while operating within the limitations and strengths of the IIT system – is contagious. I am sure you plan to double down on this even though you may have a few distractions going forward.\nI recently watched Maanaadu, a movie based on the idea of a time loop. In such stories, the plot involves the protagonist experiencing the same day over and over again, and their goal, typically, is to find an exit. If there is one day that we could put into a time loop, it would be today, and there would be no need to get out of it.\nIn the meantime – on behalf of all of us, thank you.\nThank you for your commitment, trust, and friendship; for listening patiently, for leading tirelessly, and for fighting the good fight through tough times, and for the good times through tough fights – ok, I’m going to be out of time, here, clearly – so let me just say, thank you for everything."
  },
  {
    "objectID": "blog/homework-help/index.html",
    "href": "blog/homework-help/index.html",
    "title": "How Expensive Can Homework Help Be?",
    "section": "",
    "text": "This post is based on an expository explanation of iterative compression that I attempted at the Institute Seminar Week in 2010, at IMSc.\n\n\n\nTapesh has been struggling lately with the dire task of undergraduate homework. He has been asked to find a vertex cover on 23 vertices - not one more - in a graph that has a thousand vertices. Being the straightforward boy that he is, Tapesh considers writing a program that will try its luck on every possible subset of 23 vertices.\nHe then heads over to Wolfram Alpha to check how long it will be before he’s done examining all the {1000 \\choose 23} possibilities, assuming (rather liberally) that he has at his disposal a computer that can perform 10^{24} operations per second.\nIt turns out that he, and more critically, his professor, would be in for a long, long wait. The algorithm would need time proportional to the age of the universe many times over, and this is decidedly depressing, particularly when one’s expected lifespan appears to be determined by the deadline for turning in homework.\nTapesh now appeals to his very clever cousin, Prodosh, for help.\nProdosh borrows the monstrous graph, and in short order, points out a vertex cover on 24 vertices, using powers evidently beyond what processors with 10^{24} FLOPS can do. Tapesh is thrilled, however…\n“I need to get one with 23, the assignment says not one more —”\n“Time for a smoke,” Prodosh yawns, and then delves into a distracted, pensive mood, with no signs of immediate return.\nTapesh is torn, but he decides to (gulp) show whatever he has so far - after all, it is progress!\nPredictably, Professor Maganlal displays no signs of being impressed, but he grudgingly admits that Tapesh’s solution (which we will call T) is not very far from the correct answer, and points out those vertices in T that happen to partake in the solution that was sought.\nTapesh is back to the drawing board, but with the distinct feeling that he is now armed with enough information to crack the code himself.\nHis solution T is now partitioned into the good part (T_G), that is, all the vertices of T that belong to X, and the bad part (T_B), which are all the vertices that do not belong to X.\n“Aha.”\nNecessarily, all the neighbors of the bad part must belong to X!\nHe checks, and sure enough, the number of vertices in T_G and N(T_B) is an exact, resounding 23. Also, very fortunately, there are no edges in T_B, so he has no trouble swapping T_B for N(T_B) to get to the newer and smaller vertex cover.\nMission accomplished!\nNow more confident, Tapesh wonders if he could have arrived at X all on his own. Indeed, what would he have done without Pradosh’s help? And without Professor Maganlal giving him that partition?\nCome to think of it, the second question has an easy answer. Tapesh would just try all possible partitions of the solution that Pradosh had given him. He would only have to disregard the partitions that didn’t work… and sooner or later, he would hit the one that his Professor so graciously suggested. This would mean examining 2^{24} subsets, a matter of a split second for a personal computer.\nBut - can he replicate Pradosh’s magic on his own?\nTapesh is up into the middle of the night waiting for the brainwave that will make him completely self-dependent, at least in the broad context of finding small vertex covers in large graphs.\nHe is still impressed that he has just found a general scheme for taking a vertex cover of size 24 and bringing it down to 23. Wanting to make the most of the only trick he knew, he wondered if he could use it more than once.\nSo he looked at the 1,000-vertex monstrosity and contemplated the possibility of working with a manageable chunk first. What if he selected an easy subgraph H for isolated consideration? Surely, if G has a vertex cover of 23 vertices, H has one too. So all he would need is to find a vertex cover on 24 vertices, and he already knew how to squish it to one of size 23.\nWhat was the easiest chunk that he could work with? One on which finding a vertex cover of size 24 wasn’t hard?\nBut of course, a subgraph on 24 vertices would be really easy to deal with!\nThe entire graph H would serve as its own vertex cover, would be of size 24 — it couldn’t get easier than that.\nSo Tapesh starts by selecting the first 24 vertices that he can find, and applies his squishing strategy to find a vertex cover on 23 vertices.\nWhat now?\nHe gives the remaining 976 vertices a hesitant look.\nMaybe it was time to grow H to include some more vertices? If Tapesh could get H to eventually morph into being all of G, he would be done!\nBut if he added a whole bunch of new vertices, he would need to do something about finding a vertex cover of size 24 in the bigger H to make progress… but that sounded like work :(\nMaybe, maybe just let in one more vertex into the precious subgraph H? Indeed, there is enough room in the vertex cover of size 23 for one more vertex. So H would grow by a single vertex, and so would the vertex cover - and then Tapesh could squish it again!\nAnd there is no stopping Tapesh from repeating this 975 times more, and each time, the reincarnated H would be one larger than before, and every time he would beat down the vertex cover to one of size 23, till he got to the end.\nBut, Tapesh wonders sleepily, wouldn’t this take awfully long?\nThe squishing was quick, and now it has to be done 977 times altogether… and even at the lesiurely pace of doing one iteration in one second, you would need less than half an hour before you finished.\nNot too shabby — certainly no waiting for universes to come and go!\nIn general, the problem of finding a vertex cover of size k in a graph on n vertices vertices can be done in time:\nO((n-k) \\cdot 2^{k+1})\nfollowing the recipe in this story.\nIf this algorithm aborts, unable to find a vertex cover of size k, it is because a subgraph did not have a vertex cover of size k. Of course, this also means that the entire graph does not have a vertex cover of size k either, so the process makes sense.\nIt is important to note that not every problem is designed to fit this bill, for instance, if the next homework assignment demands a vertex cover that is also connected, the iteration procedure, as it stands, might not be accurate when it reports a negative answer.\nThe next assignment, therefore, potentially leads to a more demanding adventure."
  },
  {
    "objectID": "blog/pandoc-letters/index.html",
    "href": "blog/pandoc-letters/index.html",
    "title": "Letters with Pandoc",
    "section": "",
    "text": "Letter-writing season is around the corner. I recently adapted this pandoc workflow for generating PDF letters by only editing a markdown file. I only made the following minor changes to the original:\n\nFor this to work you will need pandoc and a TeX distribution installed. For a full-fledged TeX distribution check out something like MacTeX and for a minimal variation, see TinyTeX.\n\n\nIncluded the fontawesome5 package so I could add icons alongside the phone number, email, and website in the letterhead.\nChanged ThisULCornerWallPaper to CenterWallPaper and added wpYoffset and wpXoffset so I could get a left margin on the logo (I suppose this could also be done by offsetting the logo in the letterhead.pdf file).\n\nHere’s what the output looks like with some random sample content:\n\n\n\nSample letter produced with the pandoc workflow\n\n\nThe markdown is very simple to edit — most of the information is up in the YAML header, and it looks like this:\nauthor: Fyodor Michailovitch Dostoevsky\ncity: Moscow\nfrom:\n- By the Vladimirkirche\n- care of Pryanischnikof, Grafengasse.\naffiliation1: Add an affiliation\naffiliation2: Potential Additional Information\ncontact: \n- \\faPhone \\ +91 79 1234 1729\n- \\faGlobe \\ https://www.google.com\n- \\faEnvelope \\ nobody@nowhere.com\nto:\n- Michael\n- Someplace\n- with an address\nsubject: An Update\nsalutation: My dearest\ntoname: brother\ncustomdate: 1838-8-9\nWrite the body of the letter in markdown as usual, and generate the PDF by running:\npandoc letter.md -o output.pdf --template=template.tex --pdf-engine=xelatex\nor have a makefile that looks like this:\nTEX = pandoc\nFLAGS = --pdf-engine=xelatex\n\nsrc1 = template.tex letter.txt\nop1 = output\n\nall : $(op1).pdf\n\n$(op1).pdf : $(src1)\n    $(TEX) $(filter-out $<,$^ ) -o $@ --template=$< $(FLAGS)\nFor your first use, you would want to update the images for the letterhead and the signature, and optionally customize the fonts to your liking. Fork this repo to make your own!"
  },
  {
    "objectID": "blog/comms/index.html",
    "href": "blog/comms/index.html",
    "title": "External Communications",
    "section": "",
    "text": "I finish seven years at IIT Gandhinagar today.\nThis year, I also concluded my stint with the Department of External Communications, which feels about as long. Indeed, little did I know that a casual remark that I had made during my interview1, about wanting to be a writer for as long as I can remember, was carefully noted — and magically my service responsibilities would end up being related to my childhood dream. A few days after I joined, I met Achal Mehra, who introduced me to Connections: a four-page newsletter that went places every quarter. In my mind, that conversation kickstarted my collaboration with what everyone fondly calls “comms”. Seven years later, I’m here to report that the journey has been fun and fulfilling in equal measure.\nThrough this post, I’d like to introduce you to the comms team: if you have been to IITGN for an event, read about us in the press, have recieved a newsletter from us, visited our website, or followed our social media: these are the folks who work behind the scenes on these fronts. Being a part of this gang has been a huge inspiration: everyone is talented but always willing to learn; their hard work is driven by a sense of ownership; and there’s plenty of wit to help beat the heat :)\nHere’s collection of some randomly chosen memories: my hat-tip to a stellar team."
  },
  {
    "objectID": "blog/comms/index.html#hatim",
    "href": "blog/comms/index.html#hatim",
    "title": "External Communications",
    "section": "Hatim",
    "text": "Hatim\nHatim joined us in the summer of 2018 and worked with us for four years. This summer, he moved on to join the design unit at ISDM as a Graphic Designer and Video Editor.\nHatim has had a creative flair from the get go. He’s been a part of several exciting projects, including being the person behind the visuals for Alok Kanungo’s book, Glass Crafts in Northern India. Also, here’s a cool trailer he put together very quickly for the ACM-W India Grad Cohort that I was involved in organizing in 2020."
  },
  {
    "objectID": "blog/comms/index.html#dilip",
    "href": "blog/comms/index.html#dilip",
    "title": "External Communications",
    "section": "Dilip",
    "text": "Dilip\nDilip joined us in the summer of 2018. He had a distinct passion for developing mobile and web applications, and indeed, he’s been a huge asset to the web vertical of the team. He’s been relentless in learning new things and has been writing on Medium too.\nWhen we were organizing the ACM-India Annual event and the team was freaking out over having upwards of 1000 registrations, Dilip wrote a mobile app for us — literally overnight — which allowed us to send all participants a QR code that they simply had to show to get through physical registration. It saved us a ton of time. You can find out more about Dilip here."
  },
  {
    "objectID": "blog/comms/index.html#tej",
    "href": "blog/comms/index.html#tej",
    "title": "External Communications",
    "section": "Tej",
    "text": "Tej\nTej joined us in the winter of 2016 as a web developer and has been my officemate. Tej is among the first points of contact for all new faculty at IITGN: their institutional profile pages are set up even before they actually set foot on campus. Tej’s name is synonymous with “website”. If anyone needs one done, whether it’s for their lab, or an event, he’s always been an email away. True to an appropriate mispronouciation of his name2, Tej has remarkable turnaround times, and seems to get things done as fast as you can spell them out.\nOne of my most memorable projects with Tej (along with Dilip, Divyangi, and the rest of the team) is the revamp of the main IITGN website. We went from this:\n\n\n\nThe old IITGN website, here.\n\n\nto this:\n\n\n\nThe current IITGN website, here.\n\n\nin about a year. Despite several very well-intended warnings about how crazy this was, the team picked up the project with cautious courage, and pulled it off. I think I can say with some confidence that the IITGN website is easy on the eyes, and things are not hard to find."
  },
  {
    "objectID": "blog/comms/index.html#apeksha",
    "href": "blog/comms/index.html#apeksha",
    "title": "External Communications",
    "section": "Apeksha",
    "text": "Apeksha\nApeksha joined us in the summer of 2019, just on the heels of completing her MTech in Biological Engineering at IITGN, and stayed with the team for a year. At the time of joining, she was an avid consumer of popular science material, and aspired to make the research at IITGN more broady accessible with her writing. She was a freelance writer already, and was looking for an opportunity to spend some time writing full-time. Her stint with us resulted in a number of articles, and her growth during the time has been remarkable. You can find her writing on her Medium blog.\nThe ACM-W India Grad Cohort event we did in 2020 was a virtual one, and in the tradition of Grad Cohorts, was not recorded. I am grateful that Apeksha stepped up at the time, offered to attend all the sessions, and wrote up comprehensive summaries.\nShe has now joined the Ph.D. program in the Humanities and Social Sciences and is currently researching cognitive aspects of science communication with Frederick Coolidge."
  },
  {
    "objectID": "blog/comms/index.html#dhara",
    "href": "blog/comms/index.html#dhara",
    "title": "External Communications",
    "section": "Dhara",
    "text": "Dhara\nDhara joined us in the summer of 2018, and immediately got to work on managing our social media channels. She also streamlined the process of collecting information: a lot of what we do revolves around robust archival, and IITGN being a happening place does not make this easy! We get dozens of emails every day announcing events of varying scales, updates of various kinds.\nAnticipating that the volume would only get worse, we devised a system for manually cataloging every bit of news in a bunch of Airtable bases. The long-term vision was that the Airtable API exposes this data to anyone who needs it: the web team could draw from it and filter appropriately to display upcoming events, an archival team could write a report generating app that used this as the backend, and so forth. We even had a web app developed by a team of undergraduates that pulled data from these bases to show off upcoming events on a big screen.\nDhara now manually curates information from these databases and runs a weekly internal newsletter collating what’s happened and what’s coming up at IITGN: this has been a major value addition for many. She also serves up the raw data needed for our public quarterly newsletter and annual reports based on this system, which saves everyone a lot of time. Apart from all of this, she is in the driver’s seat for all our major social media channels, and then some… and magically manages to stay on top of everything. You can find her writing on Medium."
  },
  {
    "objectID": "blog/comms/index.html#divyangi",
    "href": "blog/comms/index.html#divyangi",
    "title": "External Communications",
    "section": "Divyangi",
    "text": "Divyangi\nDivyangi joined us in the summer of 2018 and worked with us for three years until the summer of 2021. She was a wizard when it came to scripting for automating tasks, and quickly became the go-to person for departments who were looking to improve their workflows.\nIITGN runs on the Google ecosystem. Divyangi figured out several nice ways of bringing data from spreadsheets to frontends, generating reports, and so forth. She even ran a workshop on Google scripts and related tools as a part of an initiative coordinated by our Staff Development Cell.\nAmong the many projects Divyangi was involved in, one of my favorites was the backend for our rather popular Summer Research Internship Program. The website is powered by WordPress, and provides various interfaces for both interns and mentors to keep track of their applications during the application phase (this runs into tens of thousands of records), and progress during the internship (updates from interns and feedback from mentors are all managed from here). Divyangi, together with Dilip, deeply customized the WordPress instance to provide a number of features that help with running a large-scale program smoothly, with most of the tedious tasks completely automated."
  },
  {
    "objectID": "blog/comms/index.html#chandni",
    "href": "blog/comms/index.html#chandni",
    "title": "External Communications",
    "section": "Chandni",
    "text": "Chandni\nChandni joined us in the summer of 2019 for a year. She was already a very talented photographer at the time of joining us. As our events and activities grew in number and scale, we found very valuable support in Chandni’s presence. Check out her Instagram here!\n\n\n\nA sample of Chandni’s photography"
  },
  {
    "objectID": "blog/comms/index.html#vandana",
    "href": "blog/comms/index.html#vandana",
    "title": "External Communications",
    "section": "Vandana",
    "text": "Vandana\nVandana joined us in the summer of 2017 in the role of a Communications and Media Officer for a year. During this time, she was working closely with local press and media, and ensuring that our stories are filed with them on a regular basis.\nVandana was already passionate about writing and had a keen eye for detail. She filled an important void at the time she joined and immediately setup various important foundations in the context of this role. She expanded our style guide, made a press kit, and developed a starting database of journalists that we could work with: these are all tools that the whole content team uses regularly to this day.\nHer spirit of volunteerism meant that a lot of our content got reviewed and improved across the board: on the website, on our brochures, and so forth. This was also the time when we launched what I think is our best-kept secret: IITGN’s news blog. Vandana, along with the rest of the team, setup a careful pipeline to ensure that everything we capture across press and social media gets a permanent home on the blog. She continues to pitch in remotely, even after moving on from her onsite role with us on campus."
  },
  {
    "objectID": "blog/comms/index.html#shivangi",
    "href": "blog/comms/index.html#shivangi",
    "title": "External Communications",
    "section": "Shivangi",
    "text": "Shivangi\nShivangi joined us in the summer of 2018 in the role of a Communications and Media Officer, picking up from where Vandana left off. She has been synonymous with media and press at IITGN, and is currently our main interface with the press. She has substantially expanded on our network of partners in press, and ensures that we have the visibility we deserve in the local and national news, and even beyond. She is especially diligent about ensuring that regionally-focused news is appropriately translated in the local languages whenever appropriate, a widely appreciated effort.\nShivangi’s style has been remarkably proactive: if anything at IITGN is newsworthy, she makes sure it’s covered. She draws on her substantial experience in the field to bring nuanced insights to the table, and these have served us very well in our overall communications and outreach strategy.\nBeyond coordinating stories for the press, Shivangi also comprehensively tracks IITGN’s presence in the news and other public domains, is closely invovled in the production of the quarterly newsletter and annual reports, and our social media activities as well. Shivangi is, unsurprisingly, an amazing writer, and here’s a performance of hers in a SDC event that was among my favorites."
  },
  {
    "objectID": "blog/comms/index.html#gaurav",
    "href": "blog/comms/index.html#gaurav",
    "title": "External Communications",
    "section": "Gaurav",
    "text": "Gaurav\nGaurav has been around for longer than I have, and he is a founding member of the team. He is among the most versatile people I know: not only does the scope of his work at IITGN go well beyond communications, even within communications his skills span a very wide range: he’s behind the camera, he’s the person behind the design and layouts for some of our best print collaterals, he’s directed and produced a number of videos, and I could go on and on.\nI’ve freely relied on his mentorship: much of the growth that has happened within the team, especially in terms of creative efforts, is thanks to Gaurav’s experience and guidance.\nIf you pick up any of our booklets, there’s a good chance that Gaurav has been involved in engineering the layout and design. Among them, I’ll single out a couple for you to sample: the World Class Faculty brochure looks especially lovely in print, and the 10 on 10 brochure has a bold aesthetic that was a crowd favorite when it was released for our 10-year celebration."
  },
  {
    "objectID": "blog/comms/index.html#devarsh",
    "href": "blog/comms/index.html#devarsh",
    "title": "External Communications",
    "section": "Devarsh",
    "text": "Devarsh\nDevarsh joined us in the summer of 2017, with a background in creative film-making and theatre. He quickly became the go-to person when it came to anything to do with video or photography. Over the years here, he’s grown leaps and bounds in his craft and understanding of all aspects of the process — both work that happens on the field and in post.\nOur YouTube presence was in its nascent stages when Devarsh joined. He’s single-handedly worked on our channel in mission mode from the get go, and it is largely thanks to his efforts that we have a fairly systematic video respository of most major events and talks on campus.\nDevarsh has been involved in several memorable projects. Here’s a video that he shot for our first virtual convocation, which also happened to be among the first virtual convocation events to be held in India (as far as we know)."
  },
  {
    "objectID": "blog/comms/index.html#nostalgia",
    "href": "blog/comms/index.html#nostalgia",
    "title": "External Communications",
    "section": "Nostalgia",
    "text": "Nostalgia\nSome of the early members of the team are not pictured. Apart from everyone above, I had the good fortune to have worked with: Ritu (among other things, was the curator for all the early editions of the quarterly newsletter, Connections, and our annual reports), Dayanand (our first communications and media officer), Maria (our first social media intern), and Khushbu (who took over from Maria and preceded Dhara on managing social media).\nIt would be remiss of me to not give a shout out to the faculty support we have enjoyed over the years. Several colleagues have played major roles in helping out on all aspects of our responsbilities. A special thanks to Achal Mehra, who brought extensive experience to the table, and has been forever generous with his time and advice, and Vasco Trigo, whose inputs for the whole team were extremely timely and valuable.\nI’ll also take this opportunity to thank friends at the Communications department at Duke University — they hosted us in the very early days, and their detailed and candid tour of various operational aspects was massively helpful in setting up a lot of the foundations back here.\nI walked into this gig more or less by accident. I should confess here that I didn’t have a 5-year vision from which I could work backwards to nicely chunked milestones. There were no OKRs or KPIs or whatever else the pros do. A few times, it’s occurred to us that we should have targets, strategies, and systems3. While we never articulated any as far as I can remember, I think we did have a tacitly shared goal: it was to ensure that everyone got what they needed from comms, and that we didn’t make any mistake twice. My biases notwithstanding, I would say we have largely succeded :)\nMy time with this team remains special forever."
  },
  {
    "objectID": "blog/massren/index.html",
    "href": "blog/massren/index.html",
    "title": "Massren for fast file renaming",
    "section": "",
    "text": "My tool of choice for bulk file-renaming has become1 Massren:1 As opposed to, say, GUI clients.\n\nMassren is a command line tool that can be used to rename multiple files using your own text editor. Multiple-rename tools are usually difficult to use from the command line since any regular e xpression needs to be escaped, and each tool uses its own syntax and flavor of regex. The advantage of massren is that you are using the text editor you use every day, and so you can use all the features you are already used to.\n\nSimply navigate to the directory in which your files are and invoke massren. You can easily set it up to use your favorite text editor, so for example, I have mine configured to use VSCode:\nmassren --config editor code\nIf you have a text editor you are comfortable with, then this can lead to all kinds of interesting possibilities, especially when combined with regular expression search.\n\n\n\nUsing Massren, VS Code, and regex for bulk file renaming.\n\n\nThis workflow is especially convenient in combination with an Alfred wokflow to open the current Finder directory in the terminal, such as this one."
  },
  {
    "objectID": "blog/communication-complexity-equality/index.html",
    "href": "blog/communication-complexity-equality/index.html",
    "title": "On the Communication Complexity of Equality",
    "section": "",
    "text": "These are some quick sketchnotes based on  this lecture by Ryan O’Donnell, a part of the  playlist for the awesome CS Theory Toolkit course. You can walk through the arguments below.\n\n\nI should mention that while the Schwartz-Zippel-DeMillo-Lipton lemma is invoked in the notes below, one could make do with just the fact that over any field F, any degree n polynomial has at most n roots, as pointed out by @dsivakumar — thanks!\n\n\nIn the fourth slide from the end, why [DeMillo–Lipton]–Schwartz–Zippel Lemma? You only need that number of roots of a polynomial (over Z mod q) of degree n is no more than n. You don't need D-L/S/Z, which gives a general version for multivariate polynomials, right?\n\n— D. Sivakumar (@dsivakumar) June 6, 2020"
  },
  {
    "objectID": "blog/iit-rankings/index.html",
    "href": "blog/iit-rankings/index.html",
    "title": "The Only Fair Ranking of IITs",
    "section": "",
    "text": "Don’t like the ranking? Try again.\n\n\n\n\n\n\n\nMethodology: adapted from here.\n\n\n\nThe program takes all the available knowledge in the universe and extrapolates a score for each IIT using state of the art algorithmic techniques (i.e., deep guessing). To resolve ties, the program also computes a secondary score which is a random number. The program next computes a weighted average of the two scores - the weight assigned to the first score is based on its scientific value and merit, and is thus zero, and the remaining weight is assigned to the secondary score (i.e., 1). The program then sort and output the departments in decreasing ordering of their weighted scores.\n\n\nInspiration  Check this page for a ranking of computer science departments.\n\n\nimport { shuffle } from \"./shuffle.js\"\n\narr = [\"IIT Kharagpur\", \n\"IIT Bombay\", \n\"IIT Madras\", \n\"IIT Kanpur\", \n\"IIT Delhi\", \n\"IIT Guwahati\", \n\"IIT Roorkee\", \n\"IIT Ropar\", \n\"IIT Bhubaneswar\", \n\"IIT Gandhinagar\", \n\"IIT Hyderabad\", \n\"IIT Jodhpur\", \n\"IIT Patna\", \n\"IIT Indore\", \n\"IIT Mandi\", \n\"IIT (BHU) Varanasi\", \n\"IIT Palakkad\", \n\"IIT Tirupati\", \n\"IIT (ISM) Dhanbad\", \n\"IIT Bhilai\", \n\"IIT Dharwad\", \n\"IIT Jammu\", \n\"IIT Goa\"];\nx = shuffle(arr);\ny = document.getElementById(\"quarto-document-content\");\n\ny.innerHTML += \"1. \" + x[0] + \"<br> 2. \" + x[1] +  \"<br> 3. \" + x[2] +  \"<br> 4. \" + x[3] +  \"<br> 5. \" + x[4] +  \"<br> 6. \" + x[5] +  \"<br> 7. \" + x[6] +  \"<br> 8. \" + x[7] +  \"<br> 9. \" + x[8] +  \"<br> 10. \" + x[9] +  \"<br> 11. \" + x[10] +  \"<br> 12. \" + x[11] +  \"<br> 13. \" + x[12] +  \"<br> 14. \" + x[13] +  \"<br> 15. \" + x[14] +  \"<br> 16. \" + x[15] +  \"<br> 17. \" + x[16] +  \"<br> 18. \" + x[17] +  \"<br> 19. \" + x[18] +  \"<br> 20. \" + x[19] +  \"<br> 21. \" + x[20] +  \"<br> 22. \" + x[21] +  \"<br> 23. \" + x[22];"
  },
  {
    "objectID": "blog/dogs-bunny-puzzle/index.html",
    "href": "blog/dogs-bunny-puzzle/index.html",
    "title": "Dog Bunny Puzzle",
    "section": "",
    "text": "Dog Bunny: A Cute Puzzle\nConrad Barski (@lisperati)’s latest, Dog Bunny Puzzle, had jumped to #1 on HN. The puzzle presents the following somewhat minimalist interface:\n\n\n\nThe Dogs Bunny Puzzle\n\n\nIf you haven’t played it yet, you might want to go ahead and give it a shot first. Most people figured out the mechanics without any explicit instructions. A couple of things that may not be immediately clear, but typically discovered quickly within a few moves:\n\nThe edges are labeled with conditions, and can be used only if all of the said conditions are met.\nThe bunny or dog icons may sometimes cover up what kind of location they are at. You can drag them away to find out!\nMultiple animals can occupy the same spot at a time.\nIt is possible to get into a dead end, a situation from where no legal moves are possible. In the verison of the game that is available at the time of this writing, the game offers no sign that you might be in this situation. This may however change.\n\nAfter winging it on the puzzle, several questions seemed natural:\n\n\n\n\n\n\nWhat’s the smallest number of moves to win?\n\n\n\n\n\nApparently 26.\n\n\n\n\n\n\n\n\n\nCan you write a program to find a solution?\n\n\n\n\n\nYes (Python) and yes (Picat).\n\n\n\n\n\n\n\n\n\nCan a script generate more of these puzzles?\n\n\n\n\n\nIndeed:\n\n\nFor those paying attention, yes I am two days late :(FYI, I also have a program now that can create an infinite number of these puzzles at differing difficultyHow would you rate the puzzle I posted today?\n\n— Conrad Barski (@lisperati) September 17, 2022\n\n\n\n\n\n\n\n\n\n\n\nAre there connections with other well-known puzzles?\n\n\n\n\n\nWhy yes, check out the Wolf puzzle (as pointed out by @RianNeogi) and this Numberphile video about it.\n\n\n\n\n\n\n\n\n\nIs the problem NP-complete?\n\n\n\n\n\nBefore you ask, I am not the only one who’s asking!\n\n\n\nSo the last question may strike you as a bit left-field, but that’s what I’m going to ramble about for the rest of this post :) It turns out that the answer is in the affirmative, and here is a lovely reduction by @lokshtanov showing as much.\n\n\nThe Reduction\nLet’s just set up the game as a computational problem just to be sure that we agree on the abstraction. In fact, we’ll be working with a simpler version that we will call BunnyCarrot.\n\n\n\n\n\n\nBunnyCarrot\n\n\n\nIn the BunnyCarrot problem, the input is a simple undirected graph G = (V,E), subsets B and C of V indicating the initial positions of bunnies and carrots, and a (possibly empty) instruction r_e for every e \\in E, which is a collection of conditions, at least one† of which must be true for the edge e to be “active”.\nThe question is if there is a sequence of movements of bunnies along active edges such that at the end of the sequence, every bunny is located at one of the vertices from C.\n† In the original version of the problem, we need all conditions associated with an edge to be satisfied, not at least one. The construction that we will describe can be easily adapted to this setting as well, but is simpler to describe for this variant :)\n\n\nWe are going to show that BunnyCarrot is NP-complete by reducing from 3SAT. So let \\phi := \\{C_1, \\ldots, C_m\\} be a collection of m 3SAT clauses over variables \\{x_1, \\ldots, x_n\\}. The reduced instance of BunnyCarrot corresponding to \\phi looks like this:\n\n\n\nA cartoon sketch of the reduced instance of BunnyCarrot from 3SAT.\n\n\nWhat we have here is the following in terms of the structure of graph:\n\na path X on m+2 vertices, with the left most vertex in B and the rightmost one in C;\na pair of vertices (u_i,v_i) for every i \\in [n], and an edge between them, where all the u_i’s are in B’ — the vertex u_i represents the literal x_i while the vertex v_i represents the literal \\overline{x_i};\na pair of vertices p and q in C, with p adjacent to all u_i’s and q adjacent to all v_i’s.\n\nNow here be the instructions associated with the edges:\n\nthe edge to the \\ell-th vertex on X is active only if there is a bunny on at least one of the literals present in the clause C_{\\ell-1};\nthe edges between u_i and v_i are active only when there is a bunny on the leftmost vertex of X; and\nfinally, the edges incident on p and q are active only when there is a bunny on the rightmost vertex of X.\n\n\n\nThe Forward Direction\nWe first claim that we can “win” this game if \\phi has a satisfying assignment. Indeed, let \\tau: \\{x_1,\\ldots,x_n\\} \\rightarrow \\{0,1\\} be a truth assignment that satisfies all the clauses of \\phi. Then:\n\nIf \\tau(x_i) = 0, move the bunny on u_i to v_i.\nMove the bunny on the leftmost vertex of the path X to the rightmost vertex: note that all edges are active because \\tau is a satisfying assignment.\nMove all bunnies on u_i’s to p and those on v_i’s to q.\n\n\n\nThe Backward Direction\nNow suppose there is a winning sequence of moves \\sigma. We will show that we can extract from this sequence a satisfying assignment for \\phi, which will firmly establish the equivalence of the generated instance of BunnyCarrot with the OG hard instance \\phi.\nNote that to begin with, all the blue edges are inactive. Now, in the sequence \\sigma, let us say that a step is key if it involves a bunny moving along the first edge of the path X and critical if it involves a bunny moving along the last edge of the path X.\nSuppose the \\ell-th step is the first critical step in \\sigma. Further, suppose that the t-th step is the last key step to occur before the \\ell-th step. Notice that there must be at least one key step before a critical step — we must begin before we can end :)\nNow, for all steps after the t-th step and before the \\ell-th step, note that edges incident to u_i and v_i are inactive for all i \\in [n]. This implies that every step between the t-th and \\ell-th steps involves a bunny moving along X, and in particular, every edge in X is crossed at least once in this phase of the game.\nLet us note the positions of the bunnies who are on the u_i’s and v_i’s after the t-th step is executed. Observe that this naturally translates to an assignment on the variables as follows:\n\n\\begin{equation*}\n    \\tau(x_i) =\n    \\begin{cases}\n      1 & \\text{if } u_i \\in B,\\\\\n      0 & \\text{if } v_i \\in B.\n    \\end{cases}\n\\end{equation*}\n\nWe argue that \\tau must in fact be a satisfying assignment.\nAssume to the contrary: suppose some clause C_k is, in fact, not satisfied by \\tau.\nThen, we claim that the edge connecting the k-th and (k+1)-th vertices is not active.\nAs an example, suppose C_k = \\{x_1,x_2,\\overline{x_3}\\}. Since \\tau does not satisfy C_k, it must be the case that:\n\n\\tau(x_1) = 0 — and hence there is a bunny on v_1;\n\\tau(x_2) = 0 — and hence there is a bunny on v_2;\n\\tau(x_3) = 1 — and hence there is a bunny on u_3.\n\nHowever, the condition for the edge to the (k+1)-th vertex on X to be active is simply that there is a bunny present on at least one of the literals present in the clause C_{k}, i.e, one of u_1, u_2 or v_3. However, because of the structure of the graph, and the fact that all edges incident on p and q are inactive at all times before the first critical step, observe that:\n\nIf there is a bunny on v_1, there is no bunny on u_1.\nIf there is a bunny on v_2, there is no bunny on u_2.\nIf there is a bunny on u_3, there is no bunny on v_3.\n\nBy our assumption that \\tau falsifies C_k, all the premises above are true! So there is an edge on the path X that is not active between the t-th and \\ell-th steps, which violates our understanding that every edge was crossed between these steps. This is a contradiction, and hence \\tau must indeed be a satisfying assignment.\nI’ll just remark here that this construction can be modified so that every vertex in the graph has constant degree, and there is only one vertex in C. It can also be modified to change the “or” condition on the edges to an “and”, by simply separating the conditions out along multiedges.\n\n\nFood for thought\nHere are some more questions :)\n\n\n\n\n\n\n\nWhat’s the complexity of this game when the underlying graph has some simple structure (e.g, a tree)?\nDoes the problem get harder if we introduce attacking entities like wolves?\nCan we come up with an algorithm that runs in polynomial time on instances where there is a valid winning sequence of constant length?\nIs the problem hard even for a constant number of bunnies?\n\n\n\n\nPS. Here’s a sketch of a slighty different reduction from vertex cover. Thanks again to Daniel for sharing the reduction described here! Comments welcome here, or continue the conversation on Twitter!"
  },
  {
    "objectID": "blog/new-mac/index.html",
    "href": "blog/new-mac/index.html",
    "title": "New Mac",
    "section": "",
    "text": "Here’s a list of 50 things1 (with occasional additional context) that I install whenever I’m setting up macOS from scratch.\n\n\n\n\n\n\nvia Setapp\n\n\n\n\n\n\nBartender\nKeeps the menubar clean. Very handy!\nBetter Touch Tool\nI really need to leverage this a lot more, but even simple actions like swipe down with three fingers to close a tab, or tip-tap right left to move between tabs is pretty awesome already. Also use four-finger double tap to make the mouse pointer larger when it’s lost between screens… I’d guess this app can probably subsume a lot of the functionality offered by apps like Keyboard Maestro and Alfred.\niStat Menus\nGood-looking stats in the menubar 👍️\nYoink\nHas to be one of the best shelf apps out there. I know that there are a bunch of others in this space right now (👀, Filepane), however I have been using Yoink for so long that I haven’t considered switching. My common use-cases:\n\nAlfred actions to send-to-Yoink\nUsing Yoink to stash away screenshots before the floating image disappears\nA KM shortcut that can send any Finder item to Yoink\n\nCleanMyMac\nMostly to keep track of file sizes via the Space Lens, and running cleanups once in a while.\nAlternative if using only this feature: Daisy Disk\nDefault Folder X\nUse this all the time to stash away stuff where it belongs to keep Downloads clutter-free. Also the Alfred DFX collection is handy for finding recent items even if not 100% reliable.\nTiming\nUse this to supplement manual time-tracking. Do not use it to its full potential at all, I think a little investment with setting up the right projects etc. can go a long way.\nDropzone\nI mostly use this as a longer-term stash than Yoink. I think there are some very nice possibilities here, but the only things I’ve done with it so far include:\n\nuploading images online\nopening a finder path in a terminal (superseded by an Alfred shortcut)\ndropping files in select locations\nURL shortening\n\nPermute\nHandy for all kinds of (bulk) file conversions.\nText Sniper\nImpressive OCR “from anywhere”. The newer releases of macOS may make this redundant eventually though.\nSwish\nIntuitive gestures for window management. Pretty confident all this can be done in Better Touch Tool (above), but the actions are inspiring, and I’m lazy, so yeah, this is explicitly installed.\nDownie\nUse this for downloading videos from Youtube for offline viewing/listening. Fairly robust.\nIconJar\nIcon collection, enough said. 🎁\nSip\nHandy 🎨 color picker.\nWorld Clock Pro\nVisually appealing world-clock, nice for scheduling stuff across timezones, great screensaver option as well.\nDash\nDocumentation lookup, handy that it works inside VS Code (via an extension).\nMindNode\nLovely mindmaps.\nPDFPen\nAlthough I mostly use Preview, PDFPen is useful for quickly rearranging and removing pages. Not sure about the several other features claimed, I find that it sadly crashes more often than not, so not my default application.\nTextSoap\nOccasional use, but very useful when I do need it for some pesky hidden-unicode-character-removal exercise.\nMathKey\nNiche app - on the rare occasion that I have a complicated LaTeX formula to write, I can write it in the iOS version of this app and receive it on the Mac (I don’t think the desktop app is even necessary for this; the iOS purchase can be bypassed by using the Mac app via Sidecar, but this is where I discovered the app so it makes the list).\nMarked\nPowerful previews for Markdown documents. Lots of interesting export features.\nChronoSync Express\nThis helps with keeping certain folders in sync, and setting up some backup schedules. Nothing that can’t be done with a few scripts (?) and/or Time Machine, but I did end up setting (and forgetting) a few things in here.\n\n\n\n\n\n\n\n\n\n\nGeneral\n\n\n\n\n\n\nNotion\nI’m (admittedly* experimentally) using Notion as my primary PKM tool, and it’s also where I am keeping most of my public-facing content (including this blog). My usage of Notion is gradually expanding in scope to include time/task/finance tracking as well. Too slow.\n*I’ve been in and out of Notion a few times by now, interleaved with fairly committed detours through Obsidian, Craft, and VSCode extensions for several months… I should mention that Craft is now available through Setapp, and that I am tentatively moving to Obsidian.\nBibdesk\nFairly robust reference management that has most of what I need — priority features include speed, reliability, flexibility in generating citekeys and decent auto-filing of papers added to the database (popular free and paid alternatives that I’ve tried briefly: Zotero, Mendeley, Setne, Papers, Readcube, JabRef, Bookends).\nIncidentally, if you are into Obsidian and Zotero, you might enjoy this video.\nMacTeX\nLaTeX and related tools, including TeX-friendly IDEs and reference management tools.\nXcode Tools, pandoc, and homebrew\nNeed these to work with code.\nContexts\nThe app that I miss the first when on a machine that doesn’t have it, next to Alfred. Makes window switching much more search and keyboard-driven.\nAlfred\nApart from using it as a launcher (even for files), I almost use Alfred as a Finder replacement. Here are some of my favorite Alfred workflows:\n\nMenubar Search\nSimple Folder Search (only search for folders)\nCase Switch (combined with send-text-to-Alfred below, this can be quite nifty)\nSymbols Search (unicode goodness)\nSend to Yoink\nQuit Applications\nSend text to Alfred (double-tap the option key)\nColor\nCurrency Exchanges\n\nKeyboard Maestro\nReally elaborate shortcut/automation app. I’ve only scratched the surface with my use cases, but one of the things I really dig about my setup is simulating keypress sequences.\nThe way I do this is to activate a macro group for one action with one keyboard shortcut (e.g, CMD + ;) and then have all macros within that have one-letter or one-letter + one-modifier triggers - basically very easy triggers. This way, I only have to remember a bunch of high-level shortcuts for things in various categories, and from there it’s just a letter (and the same letter can be overloaded in different contexts).\nAs a concrete example, I have a macro group called launchers, and a shortcut within that for launching chrome. So something like CMD+L followed by c would launch Chrome. Although I have to confess that I mostly launch stuff through Alfred still (at the cost of one or two extra keystrokes).\nKeypress-sequence-triggers are native to Better Touch Tool and since BTT supports AppleScript, you could also run KM macros from BTT. I haven’t quite tried this yet.\nMore advice on this here.\nTypinator\nFast snippet expansion - faster than TextExpander (one of the main competitors in this space) in my experience. Recent updates have some rad features, which of course I’m yet to explore and exploit!\n1Password\nReasonably user-friendly and robust password management. Syncs to iOS, but I haven’t managed to leverage it so much on iOS. 1Password is ideal for storing confidential information nicely (IDs, bank stuff, and the like) - if used only for passwords I suppose the Keychain does a good job too.\nFantastical and Calendar\nFantastical is a nice (but expensive!) calendar app, mostly use it because of the calendar sets feature that keeps my time blocking calendars separate from the official one that is public within the organization. Of late, I especially like the way you can join online meetings from the notifications.\nHaving said that, I realized that much of what I was doing with Fantastical was overkill and I’ve switched to the default calendar app for now, and it’s one paid subscription less2 to have.\nOh well: so I am back on Fantastical, I guess I really like the UI! Meanwhile, Busycal is a great alternative if you are on Setapp.\nVS Code\nThis is where I am supposed to be spending most of my time, perhaps next only to Craft/Notion. A few things from my VSCode workflow:\n\nUse different themes for different file types (I mostly dabble in LaTeX, C++, Python, JavaScript, and Markdown)\nLittle utility extensions save a lot of time: e.g, sort lines, increment value at cursor, file management, etc.\nMulticursor-powered find and replace is amazing.\nWorkspaces are handy and I usually launch them from Alfred.\n\nHook\nLooks very promising for cross-linking stuff across apps that have a common context (say, a project). I really need to explore this more!\nUpdate: Hook is now Hookmark, and is alo available through Setapp.\nStream Deck (best with accompanying hardware)\nParticularly useful for switching OBS scenes although I use it less than I thought I would!\nIn particular, I want to explore their VSCode and KM integrations.\nIf without the physical device, Streamdeck does have a nice iOS app that simulates the hardware, but the pricing is based on a subscription model.\nGoogle Chrome\nI can’t make up my mind between Chrome/FF/Brave/Safari. I mostly switch between Chrome and Safari, with a mild preference for Chrome because of it’s more comprehensive extensions space, but I often end up with Safari as default for speed and privacy.\nReadkit\nUse this for RSS, although I’ve mostly migrated away to DEVONthink. Still looking for a nice stand-alone RSS reader though, Readkit doesn’t always render everything the way I expect, sadly.\nOBS\nFor recording and live-streaming videos. Also useful as a virtual camera for meeting apps.\nScreenflow and Camtasia\nFor recording videos, lots of features, still finding my way around them.\nSlack and Discord\nOnline communities. I sometimes wish there was a native app for discourse too (is there?)\nKeynote\nPresentations - main alternative: Beamer + LaTeX + pgf/TikZ; or one of the JS-based slide generator tools from Markdown files (I did use react.js for one entire term).\nDEVONthink\nUse this fairly minimally (especially relative to the possibilities). At the moment DT indexes a couple of key finder folders and pulls in information from a lot of RSS feeds and even Twitter accounts. I try to review the stuff that automatically piles up in DT regularly, but — at the moment — it’s mostly a dumping ground and… messy.\nMicrosoft Teams, Skype, and Zoom\nUse this for classes and online meetings.\nOffice suite: Word/Powerpoint/Excel\nUse it only to open files I receive.\nFruitjuice\nUseful battery health monitoring, discovered the app from a MPU podcast episode IIRC.\nMathsnip\nSurprisingly good LaTeX-aware OCR.\n\n\n\n\n\n\n\n\n\n\nWebapps\n\n\n\n\n\n\nYNAB\nBudgeting and finance management.\nGmail\nUntil I setup Mailmate again, I’m checking email in my browser. 🙈\nGSuite (Docs, Sheets, Slides, and Calendar)\nI use these when others use them.\nZapier, IFTTT, Integromat\nA few automations here and there, still on my bucket list to take full advantage here. Integromat has been great for tracking Exportober contributions, incidentally!\n\n\n\n\n\n\n\n\n\n\nOmissions\n\n\n\n\n\n(aka stuff I used to use but don’t use as much now.)\n\nKarabiner Elements. I was quite taken in by the possibilities offered by “God Mode”, but I realised that I prefer sequential shortcuts - like the ones I managed to setup in KM - to ones powered by arbitrary combinations of simultaneous keypresses.\nMailmate. Will very likely be back in the workflow soon!\nThings. Retired when I switched to “Notion for Everything”. That said, Things is absolutely awesome!\nUlyssess. Replaced by Notion → Craft → Obsidian → Notion.\nBear. Replaced by Notion → Craft → Obsidian → Notion.\nSublime Text. Replaced by VSCode.\n2Do. Replaced by Things a long time ago, but a really nice app!\nShift. Combines many windows in one, basically. Not sure if it was sufficiently useful, living without it and not missing it much.\nIM+. Similar to Shift in scope, although this one is available on Setapp.\n\n\n\n\nWhat’s on your list? Do share in the comments below!\n\n\n\n\nFootnotes\n\n\nNB. This list does not include fonts and scripts — that’s for a separate round up in due course.↩︎\nI have nothing against paid subscriptions for software in general, but Fantastical’s pricing for the feature set does seem to have an unclear cost-benefit tradeoff, at least for users like me. I haven’t missed much since moving on.↩︎"
  },
  {
    "objectID": "blog/moving-blocks-ctis/index.html",
    "href": "blog/moving-blocks-ctis/index.html",
    "title": "Moving Blocks at CTIS 2021",
    "section": "",
    "text": "I am very excited about third conference on Computational Thinking in Schools (CTiS2021)1, a CSpathshala event, that’s coming up from the 29th September to 2nd October 2021 at School of Scholars, Nagpur.\nSome background from the conference website:\n\nThe CTiS (Computational Thinking in Schools) conference is an annual event organised by the ACM (Association of Computing Machinery) and the CSpathshala community. It aims to bring together teachers, educators and researchers to discuss issues of curriculum, pedagogy, policy and implementation, related to bringing computational thinking to schools.\n\nCTiS2021 aims to provide a platform for teachers, educators and experts to share their best practices as well as challenges faced in implementing computational thinking in education. The discussions will focus on integrating CT activities (both plugged and unplugged) in various school subjects, on student learning outcomes and on disseminating findings of CT based experiments or classroom research conducted by teachers and educators across the country.\nOur 4-day conference features key note speakers, Hal Abelson, MIT, USA, Manish Jain, IIT Gandhinagar, Patricia Ordóñez, University of Puerto Rico Río Piedras and Wolfgang Slany, TU Graz, Austria. The conference also features a workshop on CT and inclusion, conducted by Supriya Dey, Vision Empower and Manohar Swaminathan, Microsoft Research, Bengaluru and presentations of selected abstracts with sessions on implementation of computational thinking, fun activities and innovative examples used by teachers in classrooms!\nNeedless to say, I’m looking forward to this very exciting program! As a PC member, I also know that the contributed content is fantastic as well, and the aim of this little writeup is to offer a glimpse into this section of the conference.\nIn particular, I want to share with you a puzzle that was described by Rema Nair, who teaches Computer Science at the Mallya Aditi International School in Bangalore, grades 9-12.\nTo begin with, we have an equal number of blue and green boxes positioned as follows:\n🟦 🟦 🟦 🟩 🟩 🟩\nSo the blue boxes are lined up first from left to right, followed by a space that’s exactly enough to fit one box, and then we have the green boxes lined up after the space. The goal is to arrive at the following position, which is essentially what you would have if the blue and green boxes were to switch positions:\n🟩 🟩 🟩 🟦 🟦 🟦\nThe moves of the boxes are subject to the following rules:\n\nThe boxes from the left (i.e, the blue ones) can only move towards the right, and the boxes from the right (i.e, the green ones) can only move towards the left.\nBoxes can move forward one space, or move two spaces by jumping over/moving past another box of a different colour (never over a box of the same colour).\nThe moves are to be made in one direction only.\n\nThe puzzle is solved when the two sets of boxes have switched positions.\nSo how would you get the boxes to switch positions? Are there multiple ways to do it successfully? If so, which strategy leads to the smallest number of moves? This should be a fun conversation-starter in class — and beyond!\nThis is a great activity with actual boxes in a physical setting, but for now, here’s a quick version that you can try out right here, thanks to Polypad by Mathigon* - be careful to not overlap the boxes one on top of the other, they will end up merging! You can always refresh this page to reset 😀\n*Note that the numbers on the boxes are immaterial; notice that given the constraints on the directions, the relative ordering of the numbers is fixed anyway.\nEnjoy playing for now, and join us at CTiS to meet Rema (and other participants).\n\n\n\n\n\n\nFootnotes\n\n\nRegistration is free but mandatory. The deadline is 28th September. Please head over here to register!↩︎"
  },
  {
    "objectID": "blog/cp/sam-i-am/index.html",
    "href": "blog/cp/sam-i-am/index.html",
    "title": "Sam I Am",
    "section": "",
    "text": "This is mostly about solving Sam I Am (UVa 11419); en route, we will end up discovering Kőnig’s theorem, which is a delightful fact about the special relationship shared by vertex covers and maximum matchings in bipartite graphs."
  },
  {
    "objectID": "blog/cp/sam-i-am/index.html#the-problem",
    "href": "blog/cp/sam-i-am/index.html#the-problem",
    "title": "Sam I Am",
    "section": "The Problem",
    "text": "The Problem\nHere’s an abridged version of the problem statement.\n\nSam is facing a temple which can be described by a m \\times n grid and he has the locations of all enemies in the temple (each location can be thought of as the intersection of a row and a column in this grid).\n\nAll of a sudden, he realizes that he can kill the enemies without entering the temple using the great cannon ball which spits out a gigantic ball bigger than him killing anything it runs into and keeps on rolling until it finally explodes.\nBut the cannonball can only shoot horizontally or vertically and all the enemies along the path of that cannon ball will be killed.\nSam wants to know the minimum number of cannon balls and the positions from which he can shoot the cannonballs to eliminate all enemies from outside that temple. >"
  },
  {
    "objectID": "blog/cp/sam-i-am/index.html#some-initial-observations-with-an-example",
    "href": "blog/cp/sam-i-am/index.html#some-initial-observations-with-an-example",
    "title": "Sam I Am",
    "section": "Some initial observations with an example",
    "text": "Some initial observations with an example\nSo to begin with, we have a grid with some cells identified as locations where Sam’s enemies are positioned, and here’s an example:\n\n\n\nA first example of a configuration of Sam’s enemies location\n\n\nConveniently for us, the enemies don’t move around.\nWe want to hit all of these locations, and what we have at our disposal is giant cannon balls which can destroy all enemies that are positioned on a single row, or a single column. For example, if we were obsessed about only firing along rows, we would need four cannon balls to tackle ’em all, like so:\n\n\n\nA solution were we fire along rows alone\n\n\nIf Sam was superstitious about shooting along columns only, then he would again need four of these cannon balls to take care of everything:\n\n\n\nA solution were we fire along columns alone\n\n\nHowever, our friend Sam is smart, not superstitious! And if there is anything that he is obsessed about, it is ruthlessly optimal destruction! In other words, he wants to fix everything up, but while using the smallest number of cannon balls possible… and if that means mixing up ranks and files, so be it — notice that you can manage with just three once you combine the use of both axes:\n\n\n\nA solution leveraging a combination of rows and columns\n\n\nAnd for this example in particular, notice that three cannon balls are necessary, because we have at least three enemies positioned at locations that share neither a row nor a column, implying that no row-fire or column-fire can handle more than one of these locations at once:\n\n\n\nDemonstrating that three canonballs are in fact necessary\n\n\nSo for this example, we know that:\n\nthree cannon balls are necessary &\nthree cannon balls are sufficient.\n\nIn general, let’s say that two enemy positions are mutually independent if they are on different columns and on different rows. Let k be the size of a largest collection of mutually independent positions. Then it is clear that:\n\nk cannon balls are necessary to handle all enemy locations;\n\nbecause any \\ell fires that handle all enemy locations must in particular handle these k mutually independent ones, and each individual fire can get to (at best) one of them — by definition of what it means for two positions to be mutually independent. So if we have a valid solution involving \\ell cannon balls, then \\ell \\geq k.\nWhat is a less obvious, but considerably fascinating, is the fact that:\n\nthere is always a strategy to hit all locations using just k cannon balls. 🤯\n\nA striking situation, no pun intended — the obvious estimate of what is needed turns out to be enough as well! The easy lower bound has a matching upper bound ❤️"
  },
  {
    "objectID": "blog/cp/sam-i-am/index.html#an-auxiliary-graph",
    "href": "blog/cp/sam-i-am/index.html#an-auxiliary-graph",
    "title": "Sam I Am",
    "section": "An auxiliary graph",
    "text": "An auxiliary graph\nAlright, I think that’s enough with the advertising.\nHow does this work?\nLet’s construct the following graph G = (V,E) associated with the grid and the information about enemy positions:\n\nIntroduce a vertex for every row in the grid; say r_i for 1 \\leq i \\leq m. These are the row vertices.\nIntroduce a vertex for every column in the grid; say c_j for 1 \\leq j \\leq n. These are the column vertices.\n\n\n\n\nThe vertices of the auxiliary graph\n\n\n\nIntroduce the edge (r_i,c_j), 1 \\leq i \\leq n; 1 \\leq j \\leq m if and only if the location at the intersection of the i^{th} row and the j^{th} column corresponds to an enemy position.\n\n\n\n\nThe edges of the auxiliary graph\n\n\n\n\n\nA bipartite graph!\n\n\nObserve that:\n\nAny matching in G (a collection of mutually disjoint edges) corresponds to a collection of mutually independent enemy positions back in the grid.\nWhat we are looking for is a smallest-sized subset S of V(G) such that every edge e in G has at least one of its endpoints in S. Such a subset is called a vertex cover.\n\n\n\n\nA vertex cover\n\n\nSo our claim in the language of grids now translates to:\n\n📝 The size of a maximum matching in G is equal to the size of a minimum vertex cover in G.\n\nin the language of graphs. Keep in mind that as graphs go G, happens to be a bipartite graph; which is to say that its vertex set can be parittioned into two parts† such that every edge has exactly one endpoint in each part.\n† In this example, these parts correspond to subsets of row vertices and column vertices."
  },
  {
    "objectID": "blog/cp/sam-i-am/index.html#bring-in-the-flows",
    "href": "blog/cp/sam-i-am/index.html#bring-in-the-flows",
    "title": "Sam I Am",
    "section": "Bring in the flows",
    "text": "Bring in the flows\nIs this much ado for nothing? We seem to have done some translation work, but there’s no proof of this bold claim in sight just yet… 😬\nFair. So here’s a roadmap for what we plan to do next:\n\nUse the graph G as the basis of a flow network.\nRecall the maxflow-mincut duality.\nProfit. Show the duality that we are interested in by hooking it up the known one.\n\nSo first things first: we are going to setup a flow network around the graph G, and here’s a partial picture of what it looks like:\n\n\n\nThe flow graph\n\n\nHere’s the official description of how we build this up:\n\nStart with the graph G, and orient every edge between a row vertex and a column vertex so that every such edge originates from the row vertex and latches on to the column vertex.\nWe assign infinite capacities to all the edges in G. Go unlimited on the originals! We will even dub these edges original edges going forward.\nAdd a source vertex s and add unit-capacity edges (s,r) for every row vertex r. We will call these edges the row selectors.\nAdd a target vertex t and add unit-capacity edges (c,t) for every column vertex c. We will refer to these edges as column selectors.\n\nThat’s it, that’s the flow network (\\tilde{G},\\kappa) based on G, where I’m using \\kappa to denote the capacity function. Now let’s stare at any valid integral flow in this network — what does it pull out from the middle? 🤔\n\n\n\nA matching hiding in plain sight\n\n\nLet’s make the following quick observations in the context of a valid integral flow f in (\\tilde{G},\\kappa):\n\nThe flow on any edge e from G (i.e, an original edge) is either zero or one. Indeed, if f(e) > 1, then we violate conservation constraints at both endpoints of e.\nFor any row or column vertex, at most one original edge incident to it is used by the flow f. In other words, f(e) = 0 for all but at most one original edge incident to any row or column vertex. Again, if not, combined with the fact that f is integral and that the row and column selectors have unit capacity, we will violate conservation constraints on the vertex under consideration.\n\nBased on these observations, we have that the set of original edges for which f(e) = 1 forms a matching in back in G, and in particular, if f was maximum flow, then this set would correspond to a maximum-sized matching. Now, let’s look at the corresponding mincut by building the residual graph:\n\n\n\nEdges in the residual graph that have a residual capacity of zero are not shown. Also, the original edges that were used by f have infinite residual capacity but their corresponding back-edges have unit capacity, but this distinction is not emphasised in the picture because it’s not particularly relevant to our discussion.\n\n\nEdges in the residual graph that have a residual capacity of zero are not shown. Also, the original edges that were used by f have infinite residual capacity but their corresponding back-edges have unit capacity, but this distinction is not emphasised in the picture because it’s not particularly relevant to our discussion.\nand considering what vertices are reachable from s:\n\n\n\nThe vertices reachable from s are marked green, while all remaining vertices are marked red.\n\n\nThe vertices reachable from s are marked green, while all remaining vertices are marked red.\nIn the residual graph, I would like to draw your attention to:\n\nrow vertices that are unreachable from s,\ncolumn vertices from where it is impossible to reach t.\n\nWe will refer to these vertices as the misfits — they are highlighted for you in the picture below:\n\n\n\nThe misfits\n\n\nNow roll up your sleeves for some magic. Let’s pull up the cut — which we know is in fact a mincut — obtained by considering the set of vertices reachable from s the residual graph corresponding to the maxflow f. In pictures, note how we have attracted some column vertices to the s-side, and pushed away some row vertices to the t-side:\n\n\n\nSome reorganization\n\n\nNote that this is a minimum cut, that is to say, the total capacity of the edges crossing the cut is as small as possible — which means that, in particular, the total capacity is at least (or should that be at most?) finite, and that implies, even more particularly, that none1 of the original edges cross this cut.1 Remember how their capacities were infinite? So they just cannot afford to cross a minimum-capacity cut.\nSo every original edge is confined to the s-camp or the t-camp; but note that every original edge is an edge between a row vertex and a column vertex; so if you put two and two together, you see that, in fact, every edge must be incident to a misfit vertex. This means that the misfits are what we were looking for all along — they form a vertex cover of G!\nSo at least we have some solution. Is this the best we can hope for?\nWhy yes!\nNote that every misfit vertex contributes exactly one unit-capacity edge to the minimum cut: the misfits on the s-side are incident to column selectors, and these edges connect with t on the other side; while misfits on the t-side are incident to row selectors, and these edges connect with s, which is again on the opposite end. So every misfit vertex contributes exactly one edge to the minimum cut — and there are no other edges that cross the cut, so we have the following sequence of equalities:\n\nsize of the proposed solution = #misfits\n#misfits = capacity of the minimum cut\ncapacity of the minimum cut = value of the maximum flow\nvalue of the maximum flow = size of a maximum matching back in G\nsize of a maximum matching back in G = lower bound on our solution\n\nTherefore, we have proposed a solution whose cost matches a lower bound on it, making it optimal! With a slight adjustment of language (dropping misfits in favor of vertex cover), the sequence of inequalities above also shows that the size of a minimum vertex cover in a bipartite graph equals the size of a maximum matching in the graph.\nThis was the relationship I’d promised to cover when we started, and it goes by Kőnig’s theorem in case you’d like to find out more — the argument we came up with here isn’t perhaps the traditional proof, and this is a fact that can be established in several different ways, all fun in their own way ❤️"
  },
  {
    "objectID": "blog/poems/seek/index.html",
    "href": "blog/poems/seek/index.html",
    "title": "Seek",
    "section": "",
    "text": "Seek poetry in a wisp of smoke, or closure in some ashes\nstories below newspaper headlines peace after bygone deadlines\na castle in the air a choice that is fair\nthe absence of regret on a death bed a reason, or otherwise to stay alive —\nand quite likely it will be a quest unfulfilled.\nFind a smile instead, and you will find some strength to stay another day."
  },
  {
    "objectID": "blog/poems/sprinkles-of-the-sky/index.html",
    "href": "blog/poems/sprinkles-of-the-sky/index.html",
    "title": "Sprinkles of the Sky",
    "section": "",
    "text": "A dubious draft of air comes, goes as if wondering if the air’s welcoming\nSoft rays tiptoe by the window as if shy to come inside\nSprinkles of the sky lie in drops of dew as if captive, somewhat pensive\nAnd I snuggle deeper into a distant dream as if I could see a better place to be\n\nI stole the title from a phrase in Hairat, a song that features in Anjaana Anjaani. Incidentally - I am very addicted to the entire album!"
  },
  {
    "objectID": "blog/poems/bloom/index.html",
    "href": "blog/poems/bloom/index.html",
    "title": "Bloom",
    "section": "",
    "text": "Velvet-like violet erupts in a riot on miniscule white canvases harp-like; focused at a bunch of seeds.\nAll trouble to no avail, one day the bee will come and take it all away.\n\nHonorable Mention in the The Binnacle Second Annual Ultra Short Competition."
  },
  {
    "objectID": "blog/poems/on-the-fence/index.html",
    "href": "blog/poems/on-the-fence/index.html",
    "title": "On the Fence",
    "section": "",
    "text": "At least you are dead. To which the ghost said, The grass is not greener here - But it did become paler there…\nAt least you have a chance, To wait for the rains’ dance, To live and fight, To make things right."
  },
  {
    "objectID": "blog/exportober/2022-tracker/index.html#the-tweets",
    "href": "blog/exportober/2022-tracker/index.html#the-tweets",
    "title": "Exportober 2022",
    "section": "The Tweets",
    "text": "The Tweets"
  },
  {
    "objectID": "blog/exportober/2022-tracker/index.html#what-was-this-about-again",
    "href": "blog/exportober/2022-tracker/index.html#what-was-this-about-again",
    "title": "Exportober 2022",
    "section": "What was this about again?",
    "text": "What was this about again?\nYou can find the original announcement here and more specifics clarifying the format (or the lack of it) here. Here’s the short version:\n\nPut up a piece of content everyday between 1st October and 30th October, with the possibility of skipping one day per week;\nPost a link to your content on Twitter with #exportober\nThat’s it, actually. 🤷‍♀️\n\nPsst. It’s quite fine to sign up even if you’re reading this after the 1st of October. The automated tracking exercise here will stop after the 15th of November, so you can be a part of this by just contributing in this window. It certainly does’t have to be daily and it doesn’t have to be 30 things, although I found those to be useful default targets to work with for myself."
  },
  {
    "objectID": "blog/exportober/about/index.html",
    "href": "blog/exportober/about/index.html",
    "title": "About Exportober",
    "section": "",
    "text": "In a massively impulsive move nudged by some Twitter feedback, I recently launched the Exportober challenge.\nThe TL;DR version:\n\nPut up a piece of content* everyday between 27th September and 30th October, with the possibility of skipping one day per week;\nPost a link to your content on Twitter with #exportober\nThat’s it, actually. 🤷‍♀️\n\n\n\n\n\nAnyone else procrastinating on starting a blog, CS or otherwise? Would you be interested in being held mutually accountable for a few weeks to overcome the initial inertia? Do let me know! I’ll try to setup something systematic-looking if there’s interest 🙂\n\n— Neeldhara (@neeldhara) September 19, 2021"
  },
  {
    "objectID": "blog/exportober/about/index.html#whats-allowed-in-exportober",
    "href": "blog/exportober/about/index.html#whats-allowed-in-exportober",
    "title": "About Exportober",
    "section": "What’s allowed in #exportober?",
    "text": "What’s allowed in #exportober?\nI was deliberately vague about the terms-and-conditions that goes with the piece of content piece above. The rules I mentioned were minimal: since there are no restrictions of age, keep the content SFW and generally legal. Other than that, anything goes, for example:\n\nCan I doodle? Yes.\nCan I meme? Yes.\nCan I make a comic? Yes.\nCan I quip? Yes.\nCan I tweet a thread? Yes.\nCan I tweet a single tweet? Yes.\nCan I song and/or hum and/or dance? Yes.\nCan I react? I am unfamiliar with this genre, but yeah, why not?\nCan I just quote? Uhh, ok-fine, sure — maybe be sure to include a reaction?\nCan I commit? Yes, please! Oh, you mean — can it be a GitHub commit? Right, yeah, sure.\n\n\n\n\n\nOne a day is a lot! (Unless tweets count). I used to blog regularly but not even one a week at its peak, I think.\n\n— Rahul Siddharthan (@rsidd120) September 22, 2021\n\n\n\n\n\nin case anyone is looking for inspiration, in true student fashion, i am already planning on cheating by turning all the math puns i have in mind to comics ['ring arthur and his knights of the round table' but where ring arthur is a noncommutative ring without unity]\n\n— tiiiiredddd (@vuisnotabot) September 22, 2021\n\n\n\nAs you can see, there are no restrictions on format or length or quality. It can be whatever you want, and however long or short you want it to be. The point is to get into the habit of putting a bit of yourself into something tangible that you’d want to share.\nSo while you could technically schedule thirty pieces of Harry Potter trivia in advance — that would kind of defeat the purpose."
  },
  {
    "objectID": "blog/exportober/about/index.html#is-this-for-me-whybother-with-exportober",
    "href": "blog/exportober/about/index.html#is-this-for-me-whybother-with-exportober",
    "title": "About Exportober",
    "section": "Is this for me? #whybother with #exportober",
    "text": "Is this for me? #whybother with #exportober\nIn general, I imagine only you would know if this is for you — this may not be a priority or a point of interest for you right now, but if you’re reading this, possibly your interest is at least mildly piqued?\nWhat this is about is setting aside some time for yourself and to participate alongside friends who’re in it for fun and profit:\n\n\nWe often avoid taking action because we think \"I need to learn more,\" but the best way to learn is often by taking action.\n\n— James Clear (@JamesClear) September 23, 2020\n\n\n\nThe fun bit is in the making and sharing.\nThe profit bit is the hope that we trick ourselves into making this a bit of a regular habit for life.\n\nLonger term, you may or may not want to be sharing or publishing on a daily basis. But hopefully, longer term, you are engaged with the process on a regular basis.\nPersonally, there’s almost nothing that I do consistently on a daily basis, not counting the things one needs to do continue being alive. I’d like to see if I can change that a bit1, and apparently doing such things bit by bit — and with some public commitment — is a good idea, hence the micro-nature of the challenge.\n\n\nSo overall I’ve gotten to a point where I’m just afraid to even think about putting something together because I think it’s an unrealistic commitment of time. I’m also really bad at chunking - everything I do of this sort manifests at the wrong end of an all-nighter 🙈\n\n— Neeldhara (@neeldhara) September 19, 2021"
  },
  {
    "objectID": "blog/exportober/about/index.html#i-want-to-be-in-but-i-stoop-no-lower-than-meaningful-masterpieces",
    "href": "blog/exportober/about/index.html#i-want-to-be-in-but-i-stoop-no-lower-than-meaningful-masterpieces",
    "title": "About Exportober",
    "section": "I want to be in, but I stoop no lower than meaningful masterpieces…",
    "text": "I want to be in, but I stoop no lower than meaningful masterpieces…\nHmm. One way that you could still make this work for you is to build out your masterpiece bit by bit. If it’s a tutorial, you could plan it out in advance and work through one coherent section a day. If it’s a sketch, you could share your partial progress as you go along, and even put it together in a timelapse at the end? That would be great to see!\nThere are some types of long-form content that aren’t naturally amenable to this type of chunking; say you want to put together a video exposition, make an origami sculpture, or crochet a Klein bottle. In this situation, you could either use the challenge to document your process and progress; or you could just claim to engage in #exportoberlite with a reduced frequency of production — say once a week, or one masterpiece at the end — you’ll just have to still tweet it out so I can catalog it ❤️\n\n\nI really don’t like the illusion that there is one process for making and that it involves writing every day. Thinking is work to. So is reading. So is doing things that seem unrelated to writing. Our brains are always thinking about what we’re making, whether we’re typing or not\n\n— ChristianAntonGerard (@CAGerardPoet) January 25, 2020\n\n\nAlso, while on the subject of masterpieces, there’s the parable of the pots. On the other hand, everyone does have their own process, and the idea isn’t to force a format: this process is temporary, flexible, and optional 🙌"
  },
  {
    "objectID": "blog/exportober/about/index.html#this-sounds-like-fun-but-i-have-no-idea-what-to-make.",
    "href": "blog/exportober/about/index.html#this-sounds-like-fun-but-i-have-no-idea-what-to-make.",
    "title": "About Exportober",
    "section": "This sounds like fun, but I have no idea what to make.",
    "text": "This sounds like fun, but I have no idea what to make.\nOooh. Maybe just ping on Twitter if you are in this situation. I do imagine that there are folks who have more ideas than they can handle, so if you have the bandwidth, it’ll even out nicely! For some starter inspiration, just in case it is useful, here are some of the post types that I’m planning for the duration of this challenge, in roughly increasing order of desperation:\n\nTrying some of the Chai and Why? experiments and documenting any accidents learnings.\nPuzzles and programming contest roundups.\nLecture notes for classes/talks I’m teaching and/or attending.\nHighlights from whatever podcasts I’m tuned into.\nClean up draft essays from previous lives.\nRandom doodles. And VSCode keyboard shortcuts.\nHot takes on inconsequential debates.2\n\nI also have a few black holes nurtured over time — I’m looking at you, all my Read-It-NeverLater apps, the starred section in my RSS app, my YouTube watchlist, and relatives. Maybe about time to go down some of these rabbit holes with the excuse of commentary to follow.\nSo yes, that’ll be all for now! Let’s see how this goes 🤞 Meanwhile, please hop on and spread the word for all of us? Thank you! 🎉\n\nPS. You might be curious about what participating will look like. I’m trying to setup a separate page for each participant in the challenge that will pull in all your tagged tweets. I’ll share a preview soon!"
  },
  {
    "objectID": "blog/exportober/2021-tracker/index.html#the-tweets",
    "href": "blog/exportober/2021-tracker/index.html#the-tweets",
    "title": "Exportober 2021",
    "section": "The Tweets",
    "text": "The Tweets"
  },
  {
    "objectID": "blog/exportober/2021-tracker/index.html#what-was-this-about-again",
    "href": "blog/exportober/2021-tracker/index.html#what-was-this-about-again",
    "title": "Exportober 2021",
    "section": "What was this about again?",
    "text": "What was this about again?\nYou can find the original announcement here and more specifics clarifying the format (or the lack of it) here. Here’s the short version:\n\nPut up a piece of content everyday between 27th September and 30th October, with the possibility of skipping one day per week;\nPost a link to your content on Twitter with #exportober\nThat’s it, actually. 🤷‍♀️\n\n📝 If you’d like to participate you can sign up below; and if you’d like to help, please encourage everyone participating by checking out the tweets coming in above!\nPsst. It’s quite fine to sign up even if you’re reading this after the 27th of September. The automated tracking exercise here will stop after the 30th of October, so you can be a part of this by just contributing in this window. It certainly does’t have to be daily and it doesn’t have to be 30 things, although I found those to be useful default targets to work with for myself."
  },
  {
    "objectID": "blog/exportober/2021-tracker/index.html#sign-up",
    "href": "blog/exportober/2021-tracker/index.html#sign-up",
    "title": "Exportober 2021",
    "section": "Sign up!",
    "text": "Sign up!\nWhile you can participate simply by using #exportober in your tweets, it’ll be great if you could explicitly enter your Twitter username in the form below, so we can check in on each other! 🤝\nWhile I’m not going to write a Twitter bot that will send you daily reminders over DM, I do hope to create a separate page for each registered participant at the end of the challenge that shows off just their entries in one place, so it’s helpful to know who you are 😀"
  },
  {
    "objectID": "blog/exportober/2021/index.html",
    "href": "blog/exportober/2021/index.html",
    "title": "An Invitation to Exportober 2021",
    "section": "",
    "text": "📝 Update: You can now track everyone’s progress from here!\n\n\n\n\n\n\n\n\n\nYou can also check out a little more about the format, intent and background here.\n\n\n\nAs you can see — at least at the time of this writing — this is a blog under construction with some mild ambition, going by the long list of empty categories on the homepage.\nI’ve heard a lot about the effectiveness of something something public something something accountability, so I’m going to give this a shot: if there’s anyone else who wants a bit of a jumpstart and encouragement for getting into the habit of putting stuff out there, this is for you!\nPresenting the EXPress yOuR Thoughts, i.e, export, challenge.\nHere be some rules, or not, make this your own!\n\nPut something out there — could be an essay, a video, a sketchnote, some code, a piece of music, a photograph — I think the only criteria is that this should be something you put together that you feel compelled to share, and something that can be accessed via a public URL. I suppose quotes and curated round-ups are good too, but ideally you want this to be something that has a bit of you in it.\nShare it on Twitter with #exportober (umm, the export challenge in October 😬 … it had to be something that wasn’t already taken so I can scrape it off and put it up in one place, and everyone participating can keep an eye out on others participating — the general hope is that everyone finds themselves encouraged by everyone else 🎉).\nI’m going to find a way of listing everything that comes up starting 27th September. This gives you five weeks until the end of October. Try and get something up everyday - this puts the challenge in the Export Challenge 😀 That said, allowing ourselves one cheat day per week means that we all hopefully end up with 30 things by the 30th of October. Yays 🤞\nSince I’ll hopefully find a way of tracking all the content tagged this way and automatically pushing it to a page where we can find it all in one place, please don’t put up anything illegal or damaging. Other than this, practically anything goes, but please do respect the basic idea, which is is to build up some positive vibes and keep this a fun exercise!\n\nSo I hope you spend the coming week getting setup — figure out what you want to do and how you’ll do it, and maybe even cheating a little and preparing some buffer content for the rainy days? We’ve already had some great suggestions for tools you can use to get started:\n\n\n\n\nGitHub pages is great for this. I don't use Markdown, but it still works as a quick, lightweight publishing system, automatic ssh setup, etc. Since I store the content on GitHub anyway, everything is nicely unified.\n\n— ShriramKrishnamurthi (@ShriramKMurthi) September 19, 2021\n\n\n\n\n\n\nMay not commit for mutual accountability :) But a suggestion.Instead of blogging platforms, how about markdown/Jupyter notebooks in a github repo and/or short code/docs as github gists?Can use versioning to improve - no need to get the content \"right\" at the first \"publish\".\n\n— A. Sundararajan (@sundararajan_a) September 19, 2021\n\n\n\n\nThrow in your Twitter username in the form below to add your name to the list of people who are thinking about will be participating! The list will evolve automatically below, and I’ll probably clean it out of spurious entries manually every so often. Thanks to everyone who participated! The form is no longer relevant, but you can check out the posts by looking for #exportober on Twitter :)"
  },
  {
    "objectID": "blog/notion-powered-websites/index.html",
    "href": "blog/notion-powered-websites/index.html",
    "title": "Notion-powered websites",
    "section": "",
    "text": "Given that I have been spending most of my time in Notion of late, it made sense to wonder if I could use Notion, directly or otherwise, for whenever I have a need to put something up on a public website — e.g, course pages, event websites, and the like. It should go without saying that there are now a gazillion ways of putting a website together — ranging from Wordpress to modern frameworks that have made good old static sites cool again (I’m looking at you, SSGs on the JAMstack), and a whole bunch of things in between. All of this is way out of scope of this discussion, which is really limited to exploring the most reasonable ways of turning your Notion content into a website and is largely in the spirit of a no-code setup.\n\n\n\n\nIt’s almost like there’s something missing between static HTML and full JavaScript software.\n\n— Wes Souza 🏳️‍🌈⬣ (@__WesSouza) September 1, 2021\n\n\n\n\n\n\n\nYeah, it feels like we are now at a point where it’s easier to make complex websites but somehow oddly harder to make the simple ones!\n\n— Neeldhara (@neeldhara) September 1, 2021\n\n\n\n\n\n💡 Most options here ultimately amount to SSGs in the background, but with varying levels of exposure to what’s happening at the low-level.\n\nThere are a few different options out there if you are interested in this as well, and here’s a handwritten TLDR-summary1 if you find the rest of this little discussion too long:1 TIL that this style of summarization is also called a Pugh chart, thanks to Justin Lai.\n\n\n\nNotion Website Options Compared\n\n\n\nNow for the more detailed run-down:\n\nJust Use Notion\nThe official Notion documentation shows us how to build nice websites with Notion:\n\nThis is a great option for putting together something quick and temporary or for testing something out. It can be free (if you are on the Notion free plan) and/or will cost you nothing on top of what you might be paying for already if you are paying Notion user.\n\n\n\"What's the link to your site?\"\"Oh it's acmedesign dot notion dot site slash dd5a6abe47444a53b7170afd67942d77\"🙅🏾‍♂️🙅🏼🙅🏻‍♀️Now for folks with paid plans, you can set a public home page like https://t.co/tf1bBQcNJy! pic.twitter.com/LFWYQtgloq\n\n— Notion (@NotionHQ) September 21, 2021\n\n\n\n💡 If you have a more serious use-case, however, and are concerned about things like performance, SEO, custom domains, and such, and want to exercise more control over the look and feel of your site, you probably want to move beyond what you can get with xyz.notion.site. Still, a great option — involving no extra costs and right out of the box — and I’d imagine this covers a number of use-cases! 👍\n\n\n\nFruition and Cloudflare Workers\nA popular way to get your domain to point to your Notion setup and customize the look and feel of the final setup just a little bit is via Fruition:\n\nAs mentioned on the website already, one downside is the setup time — but I don’t think this is a very serious drawback at all, it’s a one-time exercise and not very difficult at all given the very clear instructions given on the website. However, I think there is a more significant concern with this option, which was highlighted by @bensomething in this Tweet thread:\n\n\nPerhaps a good example of why you should avoid custom domain solutions for Notion that use those damn Cloudflare worker scripts. But hey, super excited for my new startup (fartup?) to be featured on the Founded by Monzonauts website! @monzo @hugocornejo https://t.co/0FH916uvd2\n\n— Ben Smith (@bensomething) January 26, 2021\n\n\nYou could have a (potentially your) Fruition site intercepted with random content, as is the case here. As Ben points out, it’s much safer to convert your Notion content into a static site:\n\n\nAnything that converts your Notion pages to static versions is fine! It definitely seems like Super's leading the pack, but I'd say a substantial number of people are still using something like Fruition.\n\n— Ben Smith (@bensomething) January 26, 2021\n\n\n\n💡 To summarize what we have with Fruition: it’s probably okay for a small test setup, and it’s a cool experiment — largely free (you might hit up Cloudflare’s limits eventually and be prompted to upgrade) and not much work to setup — but I’d be wary of using it in production for any non-trivial project.\n\n…and so we’re going to explore a few ways of doing that now.\n\n\nnextjs-notion-starter-kit and react-notion-x\nThe nextjs-notion-starterkit is a NextJS template built by @transitive_bs, which is in active use here:\n\nYou can check out the repository here. If you are feeling even braver, you might even want to explore what powers this under the hood, which is the react-notion-x repository here:\n\n\n💡 Using nextjs-notion-starterkit is definitely a whole lot safer than Fruition, but it’s also clearly a whole lot more intensive in terms of setup! This option is great in terms of being free and highly customizable, but is best-suited to those who are already familiar with Next.js and who generally know what they are doing. So if the readme pages on those repositories did not make much sense, it’s probably best to either get some help on the initial setup or move on to more user-friendly, truly no-code options. That’s what we have up next!\n\nreact-notion-x — from a safe distance as far as I am concerned — appears to be very well-documented and actively maintained. The documentation speaks of hosting on Vercel, and my guess is that hosting on Netlify should also be possible. Both of these options have generous free tiers, so this could potentially be a no-cost option, although it’s far from being a true no-code option, at least for the initial setup!\nInterestingly, react-notion-x appears to be supported by Super, and from a quick glance at the source code, it seems like both Super and Potion (which are the last two options that we’ll be getting to) generate static sites using the Next.js framework… chances are that what is in these repositories is suggestive of at least a part of what’s going on behind-the-scenes with Super and Potion.\nMy understanding from exchanges with support at both Super and Potion is that there are differences in the implementation details — there are definitely visible differences that indicate this too, and apparently Super is more closely-knit into the Notion API, but I am not sure what to make of that just yet… it possibly makes their implementation a little less vulnerable to being broken by updates at Notion’s end, but I don’t know enough to say this for sure.\n\n\nSuper\nSuper (on ProductHunt), built by @Traf and @TrillCyborg (Jason Werner) appears to be one of the leading options in terms of a no-code way of porting a Notion page to a website. This will set you back $12/site/month; but you get a substantial feature set in return:\n\nI should point out that some Super templates are premium and will cost separately, but there are some really nice free ones that you can run with right away. One that I really liked happens to be free and is in use on the website I have for my courses. I had a completely painless setup experience and very responsive support on the minor things that I did get stuck on (h/t: @camincoll).\nSites made with Super are performant, SEO-friendly, and fairly customizable. There are only two minor snags I ran into with Super: one is that updates on Notion take some time to reflect on the website (typically a minute or so — this is no big deal in general, but it’s just not real-time, and can feel slow while in testing and development). The other is that their terms of service seem a bit unusually restrictive — for instance, see the discussion initiated by @kulikalov here:\n\n\nThat's a shaky foundation to work with @super_ 😐 pic.twitter.com/yYQYuGZk3u\n\n— Anton Kulikalov 🇺🇦 (@kulikalov) August 27, 2021\n\n\n\n💡 At $12/site/month Super is the most expensive option on this list, but if the combination of performance and convenience is what you are looking for, you might find that it is totally worth it.\n\nFrom Super’s responses in this conversation, I am optimistic that the ToS will change for the better. From my direct experience, my instinct is that there isn’t really anything to worry about here, but if you are someone who cares about the fine print, this is an aspect you might want to be aware of.\n\n\nPotion\nFinally, we have Potion (on ProductHunt), made by @noahwbragg (Noah Bragg), which is yet another way of getting a static site out of your Notion content in a fairly straightforward way:\n\n\n💡 While oversimplified, it is tempting to summarize Potion’s offering as “Super, but cheaper”. See the next section for a more detailed discussion of differences and similarities between the two. Overall, Potion has a very similar feature set and is slightly more affordable in comparison — definitely worth checking out the same way that Super is.\n\nThe pricing is a bit different from Super — it can cost you as little as $6.25/site/month on their 8-sites plan, which will set you back $50/month, and the other two possibilities are $10/month for one site or $25/month for three.\nIn terms of what it does, it feels rather similar to Super, but as I mentioned earlier, I think there are differences in the actual implementation. In particular, one difference that is conspicuous is the way Potion renders changes — much like what happens with Notion’s own public pages, the rendering of changes with Potion happens practically in real-time. This is very helpful, especially when you are working on quick edits, or are testing things out.\nMany other features are at par with Super: the sites created by Potion appear to be equally performant and SEO-friendly; and sites on Potion are customizable in almost the same ways.\nThis page (and the whole blog) is rendered with Potion. Like Super, setup was largely frictionless and I had prompt help whenever I needed it. Potion also has a bunch of templates that work out of the box — a couple of which are premium — but the vast majority of them are available for free and already there are some fairly nice options.\n\n\nPotion v/s Super\nGiven the similarities between Potion and Super, I felt it was worth having a separate discussion comparing the two, and I felt like I could do a brief take on this given that I’ve spent a fair amount of time trying out both and being conflicted about which one to go with! As you can probably tell if you read this far, I could not positively conclude one way or the other, so my setups are split between the two at the moment, and it’ll probably stay this way for a while now 😀\nBack to the comparison — there are a few differences on the minor features, here are a couple of examples off the top of my head:\n\nSuper allows password protection on individual pages, on Potion it’s all-or-none (at least at the time of this writing).\nPotion automatically generates preview images based on titles — this is what shows up when you share a link on, say, Twitter or Discord or WhatsApp. It does this automatically for all pages, even ones within databases.\nI could not get jquery to work in Potion (from trying very briefly), but it worked out fine on Super.\nSuper has a community forum and an arguably restrictive ToS. Potion has neither at the time of this writing.\nPotion’s dashboard has a live preview editor which lets you make simple changes to the CSS and preview them real-time — this may not be something you use often if you have made sophisticated customizations, but for quick edits to the default templates, it’s very handy:\n\n\nSuper has a great dashboard too, there’s a page-by-page breakup on the sidebar and a live preview of the site to the right, which shows up even when the individual pages are password-protected (by design):\n\n\nIn terms of custom code, a small difference is that Super allows you to insert your own content inside both the <head> and <body> tags while Potion is restricted to just the <head> tag. That said, additional possibilities for custom code injection are on Potion’s roadmap.\nThere are differences of implementation under the hood, but I am not aware of the exact details here. Super uses the Notion API and a Content Delivery Network (CDN) - this explains why changes take 1-2 mins to flow through from Notion in Super automatically, but what it does get you is reliable performance at scale. Potion uses Vercel for hosting and generates static sites that feel fast and robust, and also uses a CDN.\n\nHere are some of the things that I think work out rather similarly on both platforms:\n\nAccessible and very friendly support 🤩\nConvenient to setup and use.\nSEO, pretty URLs, custom domains, pretty-URLs, and mostly performant websites.\nCustomized output thanks to the ability to insert your own scripts and CSS.\nPromising roadmaps on both with exciting features on the way 🎉\nBoth options seem generally reliable - I have been monitoring my websites using Fathom and I’ve had a few downtimes reported here and there from both platforms. There was nothing that lasted more than a few minutes at a time. Because both Super and Potion use a CDN, it turns out that even if these services go down, hopefully the sites will still be served as usual.\nYou will find that both have great feedback on ProductHunt (and possibly other platforms too, but PH is the one I’m familiar with).\n\n\n\nShould you use Notion for your website at all?\nWell. In general, if future-proofness is crazy important to you, and you want complete control over how your website renders down to the last pixel — then you might want to consider looking beyond Notion.\n\n\n\n\n\n\nNote\n\n\n\nIndeed, these are early days, in some sense even for Notion, and much more so for all the options listed here. A few ways of turning Notion content into websites have come-and-gone, and that, I think, is in the nature of this kind of a setup.\nAt the moment, all options here other than the native Notion setup will have some obligation to keeping up with changes from the Notion side. I think most options are doing great on this front — as a recent example that comes to mind, globally synced blocks were supported shortly on all platforms after release (you do have to make sure that the pages on which such blocks originate have public access permissions).\nI am definitely keeping my fingers crossed for the long-term viability of these options 🤞 Until then, I’m looking forward to enjoying the convenience of being able to work on my website(s) without getting out of Notion at all, at least hopefully not very much 😎\nIncidentally, Notion’s markdown export is pretty good too, so you could just keep markdown versions of your work as you go along, so in case you decide to port things over into a more direct SSG setup in the future, it would be relatively painless to do.\n\n\nAssuming you are all-in on using Notion for delivering your website, then here’s a summary of your options:\n\nIf you are looking for a free setup:\n\nIf need to use custom domains, and need sites that look and behave like regular websites, then you might want to check out react-notion-x or nextjs-notion-starterkit if you are an expert, but otherwise, the Notion route may not be the best for you.\nIf you are already a Notion user and you just need a URL with content that can go around for a super-specific purpose (i.e, website-y features not so crucial) — you can likely just use Notion’s default facility with a public URL.\n\nIf you have a budget that is compatible with Super and/or Potion, I would definitely recommend either of them - they are both great solutions in this context! There are some nuances in terms of how they are different (e.g, pricing; Super’s apparently deeper integration with the Notion API v/s Potion’s real-time implementation, etc.), and if that level of detail is important to you, you might need to try out both — which is fortunately easy to do — before deciding.\n\n\n\nOther ways of getting a website out of Notion?\nThere are a few options that I didn’t cover here, including, for example, Notion2Blog, Notion Dog, Notelet, Nocodepages (now defunct), and a couple of others that I did evaluate — at least briefly — but I unfortunately can’t remember any more. If you know of other examples, please let me know and I’ll be happy to append them to this list here!\n\n\n💡 Please share your comments on Twitter @neeldhara. Also, special thanks to @camincoll and @noahwbragg for their inputs and help with Super and Potion, respectively! 👋🏽"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Background\n\n \n\n👋 My name is Neeldhara Misra. I am a faculty member with the discipline of Computer Science and Engineering at IIT Gandhinagar. My research interests include the interplay of structural graph theory and graph algorithms; tools and techniques in parameterized complexity; computational perspectives on combinatorial games; voting mechanisms, with a special focus on strategic behaviour; fair allocations of resources.\nI am also keen on understanding means of bringing computational thinking to school education, and using visual tools and narratives for exposition in general.\nIn 2007, I finished a Bachelors in Science in three majors — Computer Science, Mathematics, and Statistics, from Mount Carmel College (Bangalore). The Joint Entrance Screening Test (JEST) was one of the very few national exams that I was eligible to write at this point, and this eventually led me to graduate school — specifically an integrated PhD program — at the Institute for Mathematical Sciences (IMSc).\nAfter graduating from IMSc in 2012, I spent the next three years at the Department of Computer Science and Automation (CSA) at the Indian Institute of Science (IISc).\nOne of the things I enjoy most about my work is the opportunities that it brings to connect with others, so in case you feel similarly and would like to exchange notes, give me a heads up! I am moving from Twitter to Mastodon and am trying to get better at email, so I’ll look forward to hearing from you 🙌\n\n\nClick here for a short bio, suitable for introductions.\n\n \n\n\n \n\n\n\n\n\n\n\n\n2021 — Present\nSmt. Amba and Sri. V S Sastry Chair Associate Professor Computer Science and Engineering Indian Institute of Technology, Gandhinagar\n\n\n2016 — 2022\nAssociate Dean External Communications, Indian Institute of Technology, Gandhinagar\n\n\n2015 — 2021\nAssistant Professor, Computer Science and Engineering Indian Institute of Technology, Gandhinagar\n\n\n2012 — 2015\n2012. Research Associate 2013. DST-INSPIRE Fellow Computer Science & Automation Indian Institute of Science\n\n\n\nEarlier\n2012. Integrated PhD, Institute for Mathematical Sciences (Theoretical Computer Science) 2007. BSc, Mount Carmel College (Computer Science, Mathematics, and Statistics)\n\n CV (Last Updated: ~mid-2022)\n\n\n\n\n\n\n\n\n\n\n \n\n×\n\nNeeldhara Misra is a Smt. Amba and Sri. V S Sastry Chair Associate Professor of Computer Science and Engineering at the Indian Institute of Technology, Gandhinagar. She completed her PhD from the Institute for Mathematical Sciences in 2012 in Theoretical Computer Science. Her research interests include the design and analysis of algorithms and computational social choice. She is also interested in visualizations and other methods to communicate computational thinking at an elementary level. She also enjoys learning about new card tricks, especially self-working ones — even though she can’t remember any!"
  },
  {
    "objectID": "courses/2022/visualscicomm.html",
    "href": "courses/2022/visualscicomm.html",
    "title": "Visual Science Communication | Ipsa Jain",
    "section": "",
    "text": "— Dr Ipsa Jain\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nScience can be communicated to a target audience through different avenues including written, visual, audio, and a combination thereof. The use of visual communication through art and illustrations, video, audio-visual content and more, has been noted to have a wider reach and breach new barriers.\nThrough this two-day course, students will engage with science communication through images. They will be introduced to some fundamentals of visual science communication, understand how to tell stories using images, learn to tailor their content to different target audiences, and gain perspectives on how different visual language can impact science communication.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nIpsa Jain is a scientist turned illustrator, who uses the visual medium to tell tales of science. She makes images, zines, and books among other things. Her latest book, co-authored with Minhaj Sirajuddin, called Actually, Colors Speak is about coloration in the animal kingdom.\nShe is a Visual Communication faculty at Srishti Manipal Institute, Bangalore. She has collaborated with various institutes like Centre for Cellular and Molecular Biology (CCMB), inStem (CCMB), Azim Premji University and more on projects that centred around science illustrations, video, and sci-art. She also does independent work under the moniker ipsawonders. She works and lives in Bangalore.\nTo know more about her work visit ipsawonders.com or connect with her through Twitter, Linkedin, Instagram or email: ipsajain.31@gmail.com\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\nTentative dates: 5th November and 6th November\nTiming: 11 am to 1:00 pm • lunch break • 2:30pm to 4:00 pm • tea break • 4:30 pm to 6:00 pm\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly with ample exercises. The only prerequisite is enthusiasm to learn science communication through art.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught in person and will feature in-class practice exercises as well. The sessions will be interactive with lots of drawing (without judgement on skill levels) and peer discussions and critique sessions.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to help students build conceptual frameworks to understand, appreciate, and critique images in science.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nThe participants can develop their unique style of science communication and engage with subject matters in a more creative and unencumbered manner. The course will help them develop and polish their ideas for various visual science communication efforts.\n\n\n\n\n\n\n\nDay 1: Images in science\n\nClassification and classical examples\nScientific progress from observational drawings (Haeckel’s images, personal work)\nTransformation of images, meaning making, storytelling (DNA story or Darwin story)\n\nDay 2: Visual Science communication\n\nMediums, audiences, intent-content-context bridges\nComparing visual media for similar content made for different audiences\nClarity vs complexity in scientific work\nGroup activity based on give brief, followed by peer review"
  },
  {
    "objectID": "courses/2022/scicomm.html",
    "href": "courses/2022/scicomm.html",
    "title": "Fundamentals of Science Communication | Siddharth Kankaria",
    "section": "",
    "text": "— Siddharth Kankaria\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nScience communication is an act of connecting people with knowledge, emotions and shared experiences within the field of science. It is both an art to be practised creatively as well as a science to be studied systematically.\nThis week-long course will provide an introduction to the theory and practice of science communication and outline some fundamental tenets of communicating science strategically. Using interactive approaches like discussions, games, and activities, this course will provide Early Career Researchers with an introduction to the frameworks, formats and importance of science communication, and equip them to design, implement and evaluate their science communication efforts effectively.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nSiddharth Kankaria is a science communication practitioner and researcher working at NCBS Bangalore and the Founder of the SciCommSci Club – a flagship initiative for engaging with the science of science communication. He is keenly interested in developing the research-practice continuum within science communication, contributing to mentorship, capacity-building & DEI efforts, and developing intersectional science engagement practices for the Global South. Connect with him on Twitter or LinkedIn at @SiddhrthKnkaria.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n25th July to 29th July 2022 • 4PM — 6PM\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly and hands-on. The only prerequisite is enthusiasm to learn science communication.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught in person and feature in-class practice exercises as well. A collection of resources will be ready for the students’ reference from the first class onwards.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to introduce the fundamentals of effective science communication.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nParticipants will have the skills to craft their own science communication pieces and be able to convey their specialized research work in a manner that is accessible and interesting to a non-specialist, broad audience.\n\n\n\n\n\n\n\nDay 1\n\nDefining SciComm & Public Engagement\nSciComm Strategy & Fundamentals\nExercise: Choose a SC & PE project and develop a strategy zine for it\n\nDay 2\n\nHistory of Science Communication\nSciComm Models\nExercise: Write a 200 word piece describing a suitable model for your SC & PE project\n\nDay 3\n\nImportance of Narratives for SciComm + Storytelling techniques for SciComm\nDealing with Jargon + Metaphors & Analogies + Balancing Accuracy vs. Accessibility\nExercise: Storyboarding a concept for your SC & PE project\n\nDay 4\n\nEthics of doing SciComm\nUnderstanding your SciComm Audiences\nExercise: Write a 300-word profile of a specific target audience for your SC & PE activity \n\nDay 5\n\nExercise: Present your SC & PE project overview with reflections from course modules \nChallenges of doing SciComm in India\nBuilding a SciComm Career in India"
  },
  {
    "objectID": "courses/2022/03-ES242/labs/lab-w02.html",
    "href": "courses/2022/03-ES242/labs/lab-w02.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Four Points\n\n\n\n\n\nThere is a rectangle in the xy-plane. Each edge of this rectangle is parallel to the 2or y-axis, and its area is not zero.\nGiven the coordinates of three of the four vertices of this rectangle, (P,Q), (A,B), and (X,Y), find the coordinates of the other vertex.\n\n\nAll numbers are between -100 and +100.\nThere uniquely exists a rectangle with all of (P,Q), (A,B), and (X,Y) as vertices, edges parallel to the xor y-axis, and a non-zero area.\nAll values in input are integers.\n\n\n\nInput is given from Standard Input in the following format:\nP Q\nA B\nX Y\n\n\n\nPrint the sought coordinates (x,y) separated by a space in the following format:\nR S\n\n\n\nSample Input 1\n-1 -1\n-1 2\n3 2\nSample Output 1\n3 -1\nThe other vertex of the rectangle with vertices (−1,−1),(−1,2),(3,2) is (3,−1).\n\n\n\n\n\n\n\n\n\n\nProblem 2. Waking Up\n\n\n\n\n\n\n\nOne day, Tina got up at exactly B minutes past A o’clock (in 24-hour clock), and Rahul got up at exactly D minutes and 1 second past C o’clock.\nIf Tina got up earlier than Rahul, print Tina; otherwise, print Rahul.\n\n\n\n\n0 < A < 23\n0 ≤ B ≤ 59\n0< C < 23\n0 ≤ D ≤ 59\nAll values in input are integers.\n\n\n\n\nInput is given from Standard Input in the following format:\nA B C D\n\n\n\nIf Tina got up earlier than Rahul, print Tina; otherwise, print Rahul.\n\n\n\nSample Input 1\n7 0 6 30\nSample Output 1\nRahul\nSample Input 2\n7 30 7 30\nSample Output 2\nTina\n\n\n\n\n\n\n\n\n\n\nProblem 3. Ratings\n\n\n\n\n\nCodeforces separates its users into 4 divisions by their rating:\n\nFor Division 1: 1900 ≤ rating\nFor Division 2: 1600 ≤ rating ≤ 1899\nFor Division 3: 1400 ≤ rating ≤ 1599\nFor Division 4: rating ≤ 1399\n\nGiven a rating, print in which division the rating belongs.\n\n\nThe first line of the input contains an integer 𝑡 (1≤𝑡≤10^4) — the number of testcases.\nThe description of each test consists of one line containing one integer rating (−5000≤rating≤5000).\n\n\n\nFor each test case, output a single line containing the correct division in the format “Division X”, where 𝑋 is an integer between 1 and 4 representing the division for the corresponding rating.\n\n\n\nSample Input 1\n7\n-789\n1299\n1300\n1399\n1400\n1679\n2300\nSample Output 1\nDivision 4\nDivision 4\nDivision 4\nDivision 4\nDivision 3\nDivision 2\nDivision 1\nNote\nFor test cases 1−4, the corresponding ratings are −789, 1299, 1300, 1399, so all of them are in division 4.\nFor the fifth test case, the corresponding rating is 1400, so it is in division 3.\nFor the sixth test case, the corresponding rating is 1679, so it is in division 2.\nFor the seventh test case, the corresponding rating is 2300, so it is in division 1.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Meta Tic-Tac-Toe [Open Ended]\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is an optional and open-ended problem. Feel free to get creative.\n\n\nExamine the rules of Ultimate Tic Tac Toe and write your own implementation of the game."
  },
  {
    "objectID": "courses/2022/03-ES242/labs/lab-w01.html",
    "href": "courses/2022/03-ES242/labs/lab-w01.html",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "",
    "text": "Problem 1. Finding the Coefficient\n\n\n\n\n\np(x) is a polynomial whose coefficients are between 0 and 9.\nYou are given the value of p(10) and a number d.\nReturn the coefficient of x^d in p(x).\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(10) and the second line is the value of d.\nIt is guaranteed that p(10) will be at most 10^9 and d will be at most 10.\n\n\n\nFor each test case, print a single integer on a new line, which is the coefficient of x^d in p(x). DO NOT output anything else!\n\n\n\nSample Input\n1\n9042\n3\nExpected Output\n9\n\n\n\n\n\n\n\n\n\n\nProblem 2. Finding the Coefficient Redux\n\n\n\n\n\np(x) is a polynomial whose coefficients are either 0 or 1.\nYou are given the value of p(2) and a number d.\nReturn YES if the coefficient of x^d in p(x) is 1 and NO otherwise.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(2) and the second line is the value of d.\nIt is guaranteed that p(2) will be at most 10^9 and d will be at most the degree of p(x).\n\n\n\nFor each test case, print a single integer on a new line, which is YES or NO depending on if the coefficient of x^d in p(x) is 1 or 0. DO NOT output anything else!\n\n\n\nSample Input\n6\n45\n0\n45\n1\n45\n2\n45\n3\n45\n4\n45\n5\nExpected Output\nYES\nNO\nYES\nYES\nNO\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\n\n\nWrite a simulation for the Game of Trust when played by a copycat player for R rounds.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value R and the second line is R space-separated integers. The i-th integer on the second line is 1 if the other player cooperated in the i-th round, and 0 otherwise.\n\n\n\nFor each test case, print two space-separated integers on a new line. The first integer is the total number of coins earned by the copycat player, while the second integer is the total number of coins earned by the other player. Note that you have to output the net balance. DO NOT output anything else!\n\n\n\nSample Input\n1\n3\n1 1 1\nExpected Output\n6 6\n\n\n\n\n\n\n\n\n\n\nProblem 4. Game of Trust [Open Ended]\n\n\n\n\n\nThere are no tests or templates for this problem. Implement variations of the Game of Trust and feel free to get creative about I/O, language, and even come up with your own strategies.\nCheck out the Sandbox Page on the interactive essay by Nicky Case for inspiration.\n\n\n\n\n\n\n\n\n\nProblem 5. Validating a Self-Working Card Trick [Open Ended]\n\n\n\n\n\nWatch this video and write a program to validate the mechanics of the card trick shown.\nIn other words, your program should take as input a sequence of cards, with the promise that the number of red cards is equal to the number of black cards, and then “perform” the trick as shown in the video, and verify that the final claim about the number of red cards in the red pile being equal to the number of black cards in the black pile is, in fact, true."
  },
  {
    "objectID": "courses/2022/03-ES242/index.html",
    "href": "courses/2022/03-ES242/index.html",
    "title": "ES 242 | Aug-Nov 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nData structures give us principled ways to stow away information. It’s important to do this nicely based on what you want to do with the information.\nFor example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\nThroughout this course, we will try to make sense of trade-offs.\n\n\nsequential data (arrays, dynamic arrays, linked lists and variants) • dequeues, stacks, queues • graph representations • graph traversals (BFS/DFS) and applications (connected components, bipartiteness, topological sort) • searching and sorting • heaps • BSTs • (2,3)-trees\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is aimed at undergraduates in their first or second year, as a first introduction to data structures and algorithms.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is largely self-contained. Working familiarity with a programming language will be useful for the labs, where solutions are expected to be written out in C.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nOpen Data Structures by Pat Morin\nLecture notes by John Bullinaria\nData Structures Using C & C++ by Aaron M. Tenebaum; Moshe J. Augenstein; Yedidyah Lansam\nData Structures and Algorithms by A. Aho, J. Hopcroft, J. Ullman\nAlgorithms by Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures on Tuesdays and Wednesdays • 10AM — 11AM • 1/101 Labs on Wednesdays • 4PM — 6PM • 7/108 and 7/109\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\nBy appointment.\n\n\n\n\nHarshil Mittal (mittal_harshil@iitgn.ac.in)\nSaraswati Nanoti (nanoti_saraswati@iitgn.ac.in)\n\n\n\n\n\nKsheer Agrawal (ksheer.agrawal@iitgn.ac.in)\nProgyan Das (progyan.das@iitgn.ac.in)\nNipun Mahajan (mahajan.n@iitgn.ac.in)\nYash More (yash.mh@iitgn.ac.in)\n\n\n\n\n\nXhitij Choudhary (xhitij.cm@iitgn.ac.in)\nBhavesh Jain (bhavesh.jain@iitgn.ac.in)\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nWeekly Assignments on Google Classroom. 2 * [top 10] = 20\nLab Assignments on repl.it. 1 * [top 10] = 10\nClass participation via Mentimeter. 0.5 points per class capped at 10\nMidsem Exam. 10 (lab) + 10 (theory) = 20\nFinal Exam. 10 (lab) + 15 (theory) = 25\nFour quizzes (two theory, two lab & top 3 outcomes counted). 3 * 5 = 15\n\n\n\n\n\n\n\n\n\n\nRegistration\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nIf you are not from IITGN and are interested in taking up the course, then please send me an email.\nRegistration for the course is now closed. The next edition of this course will be offered in the Jan - Apr 2023 semester.\n\n\n\nNote: contents being actively updated at the time of this writing. Enroled students will find all materials in the Google classroom for this course. Items marked  are coming soon!\n\nLecturesLabsMentimeterAssignmentsQuizzesExams\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n    \n    \n                    \n            \n                02 Aug, 2022\n            \n            \n                1. Introduction to Data Structures\n                Data Structures - philosophy and examples • Representing games\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                03 Aug, 2022\n            \n            \n                2. Introduction to Data Structures\n                Representing Sequential Data • Arrays • Lists\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                09 Aug, 2022\n            \n            \n                 Institute Holiday\n                \n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                10 Aug, 2022\n            \n            \n                 Quiz 0 (Ungraded)\n                \n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                16 Aug, 2022\n            \n            \n                3. Representing Graphs\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                17 Aug, 2022\n            \n            \n                4. Representing Graphs (contd.)\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                23 Aug, 2022\n            \n            \n                5. Dequeues\n                Introducing the cardstack data structure • The Gilbreath Shuffle\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                24 Aug, 2022\n            \n            \n                6. Dequeues\n                Queues and Stacks as special cases of Dequeues\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                30 Aug, 2022\n            \n            \n                7. Euler Tours\n                Euler Tour Demonstration • Card trick • de Bruijn sequences • Constructing de Bruijn sequences using Euler Tours\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                31 Aug, 2022\n            \n            \n                8. Euler Tours\n                Computing Euler Tours • Hierholzer's algorithm\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                06 Sep, 2022\n            \n            \n                9. Stable Marriages\n                The Stable Marriage Problem • Gale-Shapley Algorithm\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                07 Sep, 2022\n            \n            \n                10. Stable Marriages\n                Proof of Termination • Bounding the number of proposals • Proving the stability of the output\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                13 Sep, 2022\n            \n            \n                11. Recap Lecture\n                Review of arrays, linked lists, stacks, queues, and graphs\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                14 Sep, 2022\n            \n            \n                 Theory Quiz 01\n                \n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                20 Sep, 2022\n            \n            \n                12. Navigating Graphs\n                An introduction to navigating graphs\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                21 Sep, 2022\n            \n            \n                13. Navigating Graphs (BFS)\n                Breadth-First Search • Correctness • Analysis of Running Time\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                11 Oct, 2022\n            \n            \n                14. Navigating Graphs (DFS)\n                Depth-First Search • Pre-Post Intervals\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                12 Oct, 2022\n            \n            \n                15. Navigating Graphs (DFS)\n                Depth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                18 Oct, 2022\n            \n            \n                16. DFS Applications\n                Topological Sort (Algorithm)\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                19 Oct, 2022\n            \n            \n                17. DFS Applications\n                Postorder • Preorder • Topological Sort (Analysis)\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                25 Oct, 2022\n            \n            \n                18. Shortest Paths\n                A teaser the challenges in extending BFS to weighted graphs • Pseudopolynomial running time\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                26 Oct, 2022\n            \n            \n                19. Heaps\n                Selection Sort • Supporting only Insert and FindMin • The challenge of ExtractMin\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                01 Nov, 2022\n            \n            \n                20. Heaps\n                The Heap Property • Insert • FindMin • ExtractMin\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                02 Nov, 2022\n            \n            \n                21. Heaps\n                Representing Heaps with Arrays\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                08 Nov, 2022\n            \n            \n                 Institute Holiday \n                \n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                09 Nov, 2022\n            \n            \n                 Theory Quiz 02\n                \n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                15 Nov, 2022\n            \n            \n                22. Heaps Revisited\n                Analysis • Heapify is Linear Time\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                16 Nov, 2022\n            \n            \n                23. Balanced Binary Search Trees\n                (2,3)-Trees • Insertion • Deletion\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                22 Nov, 2022\n            \n            \n                24. Balanced Binary Search Trees\n                (2,3)-Trees Height Analysis\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                23 Nov, 2022\n            \n            \n                25. Recap\n                Review of BFS, DFS, Heaps, and Balanced BSTs\n            \n            \n            \n            \n            \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                03 Aug, 2022\n            \n            \n                W01. Representations\n                Finding the Coefficient Finding the Coefficient Redux Game of Trust Game of Trust [Open Ended] Validating a Self-Working Card Trick [Open Ended]\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    28 Aug, 2022\n            \n        \n                    \n            \n                10 Aug, 2022\n            \n            \n                W02. C Warmup and Recap\n                Four Points  Waking Up  Ratings  Meta Tic-Tac-Toe [Open Ended]\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    28 Aug, 2022\n            \n        \n                    \n            \n                17 Aug, 2022\n            \n            \n                W03. Representing Graphs\n                Swapping Variables  Adjacency Matrix  Edge List  Adjacency List  Getting Even\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    28 Aug, 2022\n            \n        \n                    \n            \n                24 Aug, 2022\n            \n            \n                W04. The Cardstack\n                Print alternate cards  Reverse a list of numbers  Cut shuffle  Overhand Shuffle  de Bruijn sequences\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    11 Sep, 2022\n            \n        \n                    \n            \n                31 Aug, 2022\n            \n            \n                W05. Euler Tours and de Bruijn Sequences\n                Euler Circuit Sanity Check  Highway Orientation  Edge Orientation Puzzle   Generate de Bruin Sequences\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    11 Sep, 2022\n            \n        \n                    \n            \n                07 Sep, 2022\n            \n            \n                W06. Stable Marriages\n                Merge List  Insert Node  Reverse The List  Count Blocking Pairs  Stable Matchings\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    09 Sep, 2022\n            \n        \n                    \n            \n                14 Sep, 2022\n            \n            \n                No Lab\n                Lab Quiz 1 (held on 17 Sep, 2022)\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                21 Sep, 2022\n            \n            \n                W08. Navigating Graphs (BFS)\n                Find My Ancestor!  Longest Path  Unique Servers  Run a Marathon  Just BFS\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    27 Sep, 2022\n            \n        \n                    \n            \n                12 Oct, 2022\n            \n            \n                W09. Practice Lab\n                Cop and Robber  Balanced Brackets  Whispering Joker  Time Series  String Game  Lab Exam (held on 15 Oct, 2022)\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                19 Oct, 2022\n            \n            \n                W10. Navigating Graphs (DFS)\n                2-Colorable Graphs  Topological Sort  Is DAG?  Get Food!\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    01 Nov, 2022\n            \n        \n                    \n            \n                26 Oct, 2022\n            \n            \n                W11. Graph Traversal Applications\n                Learning Languages  Permutation Tree  Make Walls  Palindromic Crosswords\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    01 Nov, 2022\n            \n        \n                    \n            \n                02 Nov, 2022\n            \n            \n                W12. Heaps\n                Heapify  HeapSort  The Unity Project  Largest Number\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    08 Nov, 2022\n            \n        \n                    \n            \n                09 Nov, 2022\n            \n            \n                W13. Practice Lab\n                Visit Me First  Visit Me Last!  Sort a Tree  Predicting Possibility  Can You Register?\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                16 Nov, 2022\n            \n            \n                No Lab\n                Lab Quiz 2 (held on 20 Nov, 2022)\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                23 Nov, 2022\n            \n            \n                W15. Recap Lab\n                Review of Problems  On Writing Tests  Benchmarking\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nHeads Up\n\n\n\nThese questions are integrated into the lectures and may not make sense standalone. Please check the slides and/or notes for additional context.\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                02 Aug, 2022\n            \n            \n                Introduction to Data Structures\n                Data Structures - philosophy and examples • Representing games\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                03 Aug, 2022\n            \n            \n                Introduction to Data Structures\n                Representing Sequential Data • Arrays • Lists\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                16 Aug, 2022\n            \n            \n                Representing Graphs\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                17 Aug, 2022\n            \n            \n                Representing Graphs (contd.)\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                23 Aug, 2022\n            \n            \n                Dequeues\n                Introducing the cardstack data structure • The Gilbreath Shuffle\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                24 Aug, 2022\n            \n            \n                Dequeues\n                Queues and Stacks as special cases of Dequeues\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                30 Aug, 2022\n            \n            \n                Euler Tours\n                Euler Tour Demonstration • Card trick • de Bruijn sequences • Constructing de Bruijn sequences using Euler Tours\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                31 Aug, 2022\n            \n            \n                Euler Tours\n                Computing Euler Tours • Hierholzer's algorithm\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                06 Sep, 2022\n            \n            \n                Stable Marriages\n                The Stable Marriage Problem • Gale-Shapley Algorithm\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                07 Sep, 2022\n            \n            \n                Stable Marriages\n                Proof of Termination • Bounding the number of proposals • Proving the stability of the output\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                13 Sep, 2022\n            \n            \n                Recap Lecture\n                Review of arrays, linked lists, stacks, queues, and graphs\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                20 Sep, 2022\n            \n            \n                Navigating Graphs\n                An introduction to navigating graphs\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                21 Sep, 2022\n            \n            \n                Navigating Graphs (BFS)\n                Breadth-First Search • Correctness • Analysis of Running Time\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                11 Oct, 2022\n            \n            \n                Navigating Graphs (DFS)\n                Depth-First Search • Pre-Post Intervals\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                12 Oct, 2022\n            \n            \n                Navigating Graphs (DFS)\n                Depth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                18 Oct, 2022\n            \n            \n                DFS Applications\n                Topological Sort (Algorithm)\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                19 Oct, 2022\n            \n            \n                DFS Applications\n                Postorder • Preorder • Topological Sort (Analysis)\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                25 Oct, 2022\n            \n            \n                Shortest Paths\n                A teaser the challenges in extending BFS to weighted graphs • Pseudopolynomial running time\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                26 Oct, 2022\n            \n            \n                Heaps\n                Selection Sort • Supporting only Insert and FindMin • The challenge of ExtractMin\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                01 Nov, 2022\n            \n            \n                Heaps\n                The Heap Property • Insert • FindMin • ExtractMin\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                02 Nov, 2022\n            \n            \n                Heaps\n                Representing Heaps with Arrays\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                15 Nov, 2022\n            \n            \n                Heaps Revisited\n                Analysis • Heapify is Linear Time\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                16 Nov, 2022\n            \n            \n                Balanced Binary Search Trees\n                (2,3)-Trees • Insertion • Deletion\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                22 Nov, 2022\n            \n            \n                Balanced Binary Search Trees\n                (2,3)-Trees Height Analysis\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                23 Nov, 2022\n            \n            \n                Recap\n                Review of BFS, DFS, Heaps, and Balanced BSTs\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 0\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 1\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                20 Nov, 2022\n            \n            \n                Lab Quiz 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                28 Sep, 2022\n            \n            \n                MidSem Exam\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    28 Sep, 2022\n            \n        \n                    \n            \n                30 Nov, 2022\n            \n            \n                EndSem Exam\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    30 Nov, 2022\n            \n        \n\n\n\nNo matching items"
  },
  {
    "objectID": "courses/2022/03-ES242/labquiz2.html",
    "href": "courses/2022/03-ES242/labquiz2.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Unity Project\n\n\n\n\n\nThere are n people partaking in a project X. The capability value of the ith person is denoted as C[i]. The manager of the project has proposed the following algorithm to calculate the capability of the group (to undertake project X):\nOn each turn, choose two people, x and y, with capabilities C[x] and C[y] respectively (with C[x] <= C[y]). A unity procedure is followed:\n\nIf the two have same capability value, remove both.\nElse, person x is removed, and capability of person y changes to C[y]-C[x]\n\nIt is obvious that at the end at most one person shall remain. The capability value of the person is stated as the capability value of the group. If no person remains, capability value of the group is taken as 0.\nYou have the find the minimum possible capability value of the group.\n\n\n\n\n\n\nRemark\n\n\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing C[]\n\n\n\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n\nSample Input 1\n6\n2 7 4 1 8 1\nSample Output 1\n1\nSample Input 2\n10\n1 3 5 4 6 13 10 9 8 15 16\nSample Output 2\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Connect the City\n\n\n\n\n\nBangalore has n locations, and m bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\nYour task is to find out the minimum number of roads required.\n\n\nThe first input line has two integers n and m: the number of cities and roads. The cities are numbered 1,2,...,n.\nAfter that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities.\nA road always connects two different cities, and there is at most one road between any two cities.\n\n\n\nPrint an integer k: the number of required roads.\n\n\n\n\n1 \\leq n \\leq 10^5\n1 \\leq m \\leq 2⋅10^5\n1 \\leq a,b \\leq n\n\n\n\n\nSample Input\n4 2\n1 2\n3 4\nSample Output\n1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Spreading News\n\n\n\n\n\nAfter all the dropouts, there are n people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student i to start spread a rumor, you have to pay them in by buying c[i] samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\nTake a look at the notes if you think you haven’t understood the problem completely.\n\n\nThe first line contains two integer numbers n and m (1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5) — the number of students in the class and the number of pairs of friends.\nThe second line contains n integer numbers c[i] –— the amount of samosas i-th student asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x[i], y[i]) which represent that characters x[i] and y[i] are friends (1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i]). It is guaranteed that each pair is listed at most once.\n\n\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n\n\nSample Input\n5 2\n2 5 3 4 8\n1 4\n4 5\nSample Output\n10\nSample Input\n10 0\n1 2 3 4 5 6 7 8 9 10\nSample Output\n55\nNote\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Predicting Possibility\n\n\n\n\n\nYou are playing a decision making game where the output can be either 1 or 0.\nGiven a N X N matrix, the objective of the game is to predict if it’s possible to reach from a given source to a destination in less than or equal to k moves.\nSome constraints are as follows:\n\nYou can only move to adjacent positions in 1 move.\nYou can only move diagonally across the matrix.\n\nGiven the value of n, and the maximum moves k, determine if you can fulfill the requirement: can you reach from source to destination in less than k moves?\n\n\nThe first line contains an integer n.\nThe second line contains an integer k, denoting the maximum number of moves you can make. \nThe third line contains two space-separated integers, i and j. An entry i j denotes i as the x-coordinate and j as y-coordinate of the source location.\nThe fourth line contains two space-separated integers, m and n. An entry m n denotes m as the x-coordinate and n as y-coordinate of the destination.\n\n\n\nReturn 1 if you can reach from source to destination in less than k moves. Else, return 0.\n\n\n\nSample Input 1\n4\n3\n0 0\n3 1\nSample Output 1\n1\n\n\n\n\n\n\n\n\n\n\nProblem 5. Can You Register?\n\n\n\n\n\nYou are a student in a university U.\nYou can only register in a certain program A, if the following condition is met:\nYou have registered for all courses with the course IDs [0,1... num_courses-1]\nIf there exists at least one i in range [0,1... num_courses-1] for which you cannot register, then you cannot register from the program.\nSome constraints are as follows:\n\nSome courses may have prerequisite courses. For example if i is a prerequisite of course ID j, then you must register for i before j\nYou can not repeat a course, you can only register for a course one.\n\nGiven the value of num_courses, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for A (can you register for all the courses in range num_courses)?\n\n\nThe first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i.\n\n\n\nReturn YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "courses/2022/03-ES242/midsem-questions.html",
    "href": "courses/2022/03-ES242/midsem-questions.html",
    "title": "ES242. Data Structures and Algorithms I. MidSem Questions",
    "section": "",
    "text": "Problem 1. A Boastful Cop vs a Clever Robber\n\n\n\n\n\nA robber is trying to escape a cop on an undirected graph G. In the beginning, the cop is at a vertex s and the robber is at a vertex t. (You may assume that s and t are distinct.) They take turns making moves, and each knows the location of the other at all times. A move (by either of them) consists of either staying at the current vertex or moving to a neighbouring one.\nThe cop is boastful, so he announces his moves before making them. Specifically:\n\nbefore anyone makes a move, the cop’s first move is announced - so the robber knows where the cop is headed.\nThen, the robber makes an actual move.\nAfter this, each time the cop moves, he must respect the previous announcement (i.e, move to the previously announced vertex), and then decide his next move and announce it.\nThe robber hears the announcements, so she always knows the cop’s next move before making her own. She makes her move.\n\nIf the cop and the robber are at the same vertex after either of them moves, then the robber is caught. Otherwise, the chase is on!\nThe robber chooses her moves optimally to escape. If she cannot escape, she chooses her moves to maximize the total number of moves until she is caught. The cop chooses his moves optimally to try to catch the robber in as few total moves as possible.\nGiven the graph’s layout and the initial locations of both the cop and the robber, find out whether robber will be caught by the cop and, if so, in how many moves. We say that the game is won by the robber if she’s never caught, and by the cop otherwise.\nIn the figures below, the square vertex depicts the initial location of the robber, and the star depicts the initial location of the cop. Indicate what happens under optimal play. If you choose that the cop wins, indicate how many moves the game lasts assuming optimal play. Each move made by each player counts as a distinct move.\n\n[2 marks] Who wins? __________________\n[2 marks] Who wins? __________________\n[2 marks] If the robber starts on a vertex that is a part of a cycle, then which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is equal to the length of the cycle.\n⭕️ The cop wins this game and the number of moves is twice the length of the cycle.\n⭕️ The cop wins this game and the number of moves depends on the initial distance between the cop and the robber.\n⭕️ The outcome depends on where the cop starts.\n[3 marks] Suppose the game is being played on a path (i.e, a graph with vertices u_1, \\ldots, u_n and edges (u_1,u_2), (u_2, u_3), \\cdots, (u_{n-1},u_n). Suppose the cop starts at u_1 and the robber starts at u_n. Which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is n.\n⭕️ The cop wins this game and the number of moves is 2n.\n⭕️ The cop wins this game and the number of moves is 2n-1.\n⭕️ The cop wins this game and the number of moves is 2(n-1).\n[3 marks] Suppose the graph G has a cycle on the vertices vv_1, v_2, \\ldots, v_kand these are the only vertices that belong to any cycle in G. The robber is initially on a vertex uuand the closest vertex on the cycle is vv_1 via the path ((u,p),(p,q),(q,v_1) The cop is initially on a vertex wwand the closest vertex on the cycle is vv_n via the path ((w,r),(r,v_n) Which of the following statements is true? Assume there are no other vertices in the graph G.\n⭕️ The robber wins this game.\n⭕️ The cop wins this game.\nExplain your answer: if you think the robber wins the game, explain how the robber will evade the cop forever, and if you think the cop wins this game, explain what is the sequence of moves in an optimal game. (You can use the space on the next page.)\n\n\n\n\n\n\n\n\n\n\nProblem 2. Cheating the Stable Marriage Algorithm\n\n\n\n\n\nConsider a stable marriage instance with A,B,C being the men and X,Y,Z being the women. The input is the following:\n\n[2 marks] What is the output of the stable matching algorithm for this instance? Assume that the men are proposing.\n[3 marks] Consider again the algorithm where men are proposing. One of the women can misreport her preferences to get a better outcome from this algorithm. Identify the woman and explain what preference she can submit instead of her true preference to improve the output from her perspective.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Preserving Fixed-Points while Sorting\n\n\n\n\n\n[5 marks] When an array is to be sorted, it may happen that some data values start out being in the same position where they should end up. For example, in the array which is originally:\n45,-4,32,0\nthe 32 is right where it will be in the final sorted output:\n-4,0,32,45\nBut as a particular sorting algorithm operates, it might (depending on the algorithm) move such an element out of the position where it belongs and move it back eventually.\nLet’s say that a sorting algorithm respects fixedpoints if it never moves an element that is in its proper position, on any input.\nConsider the following methods of sorting:\nSelection sort. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\nEg: 4 3 2 1 → 1 3 2 4 → 1 2 3 4\nInsertion sort. Insertion sort iterates over the array, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\nEg: 4 3 2 1 → 3 4 2 1 → 2 3 4 1 → 1 2 3 4\nWhich of the following statements are true?\n⭕️ Insertion sort does not respect fixedpoints but selection sort does.\n⭕️ Selection sort does not respect fixedpoints but insertion sort does.\n⭕️ Neither insertion sort nor selection sort respects fixed points.\n⭕️ Both insertion sort and selection sort respect fixed points.\nJustify your answer. If you claim that a particular sorting method does not respect fixed points, then give an example. If you claim that an algorithm does respect fixed points, argue why.\n\n\n\n\n\n\n\n\n\nProblem 4. Eliminating Jealousy\n\n\n\n\n\nYou have distributed M objects among N children. The set of objects given to a child is called his or her bundle. Each child has a specific value for their bundle: let us say child k has value v_k for their bundle. Each child also has a value for all the other bundles: so let us say that child k has value v_{k,\\ell} for the bundle that was given to child \\ell.\nWe say that child a is jealous of child b if v_{a,b} > v_a, i.e, s/he values the bundle given to b more than the bundle that s/he has.\nConsider the following directed graph G. Introduce one vertex for every child, and add an edge from a to b if a is jealous of b.\n\n[2 marks] Suppose G has a directed cycle u_1 \\rightarrow u_2 \\rightarrow \\cdots \\rightarrow u_q \\rightarrow u_1. Describe a way to reassign the bundles (without changing them) so that with the new assignment, all the edges in the cycle disappear (i.e, there is no jealousy between u_1 and u_2, between u_2 and u_3, and so on, with respect to the new assignment). Explain your answer on the next page.\n[1 marks] Suppose G has no directed cycles. Is it true that there is a child who is not jealous of anyone?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n[1 marks] Suppose G has no directed cycles. Is it true that there is a child who is nobody is jealous of?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n\n\n\n\n\n\n\n\n\n\nProblem 5. Make Strongly Connected\n\n\n\n\n\n[2 marks] In the graph below, what is the smallest number of edges you need to add to make the graph strongly connected? Recall that a strongly connected graph is one where there is a path from u to v for any pair of vertices u and v.\n\n\n\n\n\n\n\n\n\nProblem 6. Counting Gifts\n\n\n\n\n\n[2 marks] The following is true for n guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any groups of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nProve that the total number of gifts given is at most 6n.\nHint: what can you say about the maximum degree of this graph?"
  },
  {
    "objectID": "courses/2022/csresearch.html",
    "href": "courses/2022/csresearch.html",
    "title": "CS Research 101 | Shashank Srikant",
    "section": "",
    "text": "— Shashank Srikant\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWhen starting off their undergrad degrees in science and engineering, most are fueled by an idealism to do great science. However, no formal resources tell us what research—an established path to great science and engineering—is all about, and how one can get started. As a result, many don’t end up figuring out these details, have no idea what the journey promises to offer, and as a consequence, move on to other well-documented jobs and careers. While there’s nothing wrong with taking up well-documented careers, academia and scholarship loses out on quality talent.\nIn another extreme, among those few who are exposed to the idea of research while still in undergrad, there exists a frenzy to apply to graduate programs by the end of undergrad. And to achieve this, students tend to optimize working on projects which will land them ‘the best possible’ publications and letters from professors. While few successfully discover their interests this way, it generally fails as an approach.\nThis course aims to fast-track the process of learning more about research-first graduate programs and/or jobs. It will nudge you to introspect whether problem solving and research is something you will enjoy, and provide some concrete steps for your discovery. It is not designed to merely provide instructions on applying successfully to graduate programs or advanced degrees. Rather, it aims to introduce you to the realities of doing research, which should in turn help you gauge your preparedness for graduate school or a career in research.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nShashank is currently a Ph.D. candidate in computer science at the CS & AI Lab (CSAIL), in the department of Electrical engineering and Computer science (EECS) at MIT. He is advised by Una-May O’Reilly. His research interests are at the intersection of machine learning, program analysis, and cognitive neuroscience. He has published his work at top-tier academic venues and has authored multiple patents.\nPrior to his Ph.D. studies, he was a senior researcher at Aspiring Minds’ research lab, where he helped build, deploy, and manage a number of innovative products involving machine learning. These products are used by >1M job applicants across the world today. In this role, he also helped organize international workshops, led academic collaborations, and helped set up communities in India to participate and engage in ML and data science (http://www.datasciencekids.org, http://ml-india.org).\nHe is also interested in governance, and science education and policy. To understand the nuances of how state governments deliver benefits to the last-mile, he worked with Seva Setu, an organization which aims to bridge the gap between governments and people, for a year in rural Bihar in India.\nDetails on his work can be found on his webpage.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n31st October – 5th November • Timing: 6:30PM to 8:30PM • Mode: Online (over Zoom)\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly: the only pre-requisite is a willingness to commit time and curiosity about research pursuits in computer science (broadly interpreted).\nThe course is designed for undergraduates in computer science and allied areas in any year looking to plan out their first or second research projects, however, participation is not restricted and all are welcome.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught over Zoom and will involve several hands-on assignments. The course has the following three sections, with two modules in each section:\n1.The first section focuses on the various motivations for pursuing research projects, the wrong reasons to take up research, exposure to different research-related careers available.\n2.The second section is about the mechanics of getting started with your first research(-ish) project. We introduce some common set of skills every researcher benefits from—taking initiative, reading and writing code, knowing domain-specific tools, parsing papers, communicating over email, and presenting your work. Also learn about the balances you will likely have to strike as you go along, and prepare with us for battles like imposter syndrome or loneliness you may face.\n\nThe third section covers exploring and approaching research opportunities after having cleared the first two sections. We will have pointers to generic opportunities that you can consider applying to. We will also leave you with suggestions for how to level up from after your first research apprenticeship, including information about preparing for graduate school, and discussions about relevant career options within and beyond academia. Pre-class reading: Each lecture will have a recommended short video or text we expect students to watch/read before attending class.\n\nFinal assessment: The final assessment will involve identifying a project relevant to your interest and skills, and drafting an email expressing your interest in getting started with it.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to equip students with toolkits to — (a) determine if research projects are well-aligned with their interests and aspirations, and (b) prepare for relevant research opportunities.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nThe participants will be well-positioned to determine if a career in research is for them; and if yes, also to find and pursue relevant research opportunities.\n\n\n\n\n\n\n\n Course materials also available from here.\n\n\n\nTopics\nResources\n\n\n\n\nDay 1: Motivation::Module 1 - Why research?\n[Notes], [Survey], [Youtube], [Slides]\n\n\nDay 2: Motivation::Module 2 - The fundamentals\n[Notes], [Reading: Taking initative], [Youtube], [Slides]\n\n\nDay 3: Mechanics::Module 3 - Skills 1\n[Notes], [Reading: Working with a professor], [Youtube], [Slides]\n\n\nDay 4: Mechanics::Module 4 - Skills 2\n[Notes], [Reading: Writing emails], [Youtube], [Slides]\n\n\nDay 5: Begin journey::Module 5 - Next steps\n[Notes], [Reading: CS PhD application FAQs], [Youtube], [Slides]\n\n\nDay 5: Begin journey::Module 6 - Resources\n[Notes]\n\n\n\n\n\n\n\n\nShare the URL to your webpage.\nIf you do not have a webpage, make a simple one on Github pages. Let the page just have your name: there’s no need to fill it with any content. See the corresponding course webpage for relevant resources to get started with Github pages.\nMention the names and web URLs of 3 professors in India who you think do interesting work. Importantly, for each professor you list, mention in 1-2 sentences why you selected them. This may be informed by your romantic notion of interests in a few areas of CS – that’s okay.\nPick one paper authored by any one professor you listed in (2) that they have published in the last five years. What area of computer science is this paper from?\nWhere was this paper published? Mention the venue and year.\nRead the abstract of this paper and describe in 3-4 sentences your understanding of what the paper achieves. You do not have to read the whole paper. Attempt to just understand broadly what the paper achieves.\nAsk one question about this paper. This may have been answered in the paper—you do not have to read and understand the whole paper to see if they have already answered it. We want you to demonstrate that you have thought about the content of the paper.\nUse CS Rankings to find out the top publishing venues in the area the paper you read belongs to (e.g. databases, machine vision, etc.).\nUsing CS Rankings, find out the best venues in the following fields of computer science:\n\nComputer architecture\nHuman-computer interface\nGraphics and computational geometry\nComputing education\n\nSee this section in Module 6 of our course webpage for a list of popular areas in computer science.\nFor each area listed, we also document a researcher’s journey who specializes in that area.\nWrite out an email to this professor expressing an interest in working on a project related to this paper. Do not send this email to the professor. Just share the draft of this email with us. You can assume you have already done 1-2 relevant projects and courses even if you haven’t–it’s fine to reference these fictitious experiences in your email to make a case for yourself.\n\nSubmit your responses here."
  },
  {
    "objectID": "courses/2022/userbase/index.html",
    "href": "courses/2022/userbase/index.html",
    "title": "191014K02: Randomized Methods for Approximation and Parameterized Algorithms",
    "section": "",
    "text": "Loading…\n\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nLoading to-dos…"
  },
  {
    "objectID": "courses/2022/04-GIAN/index.html",
    "href": "courses/2022/04-GIAN/index.html",
    "title": "191014K02: Randomized Methods for Approximation and Parameterized Algorithms",
    "section": "",
    "text": "A GIAN Course by Prof Daniel Lokshtanov\n\n\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nMost computational problems that model real-world issues are not known to admit efficient algorithms that are provably correct on all inputs. Many of these problems can be reduced to one of the classical problems called NP-complete problems which are unlikely to admit efficient algorithms in practice, and the issue of whether they do is a fundamental open problem in computer science. Although these problems are very unlikely to be solvable efficiently in the immediate future, computer scientists, over the last few decades, have come up with several “workarounds” to “cope” with NP-hardness.\nTwo fundamental approaches in this program include approximation and fixed- parameter tractability. An approximate algorithm is a way of dealing with NP- completeness for optimization problem. This technique does not guarantee the best solution. The goal of an approximation algorithm is to come as close as possible to the optimum value in a reasonable amount of time which is at most polynomial time. On the other hand, parameterized algorithms aim to restrict the exponential blow-up to an identified parameter of the problem, leading to efficient exact algorithms whenever the said parameter is reasonably small. In recent times, there has been substantial research that involves an interplay of techniques from both approaches as well.\nAll paradigms of algorithm design, including efficient polynomial time algorithms as well as the methods of approximation and parameterization discussed above, are substantially more powerful when combined with techniques based on randomness. Carefully employed, randomization leads to approaches that are faster and easier to implement than their deterministic counterparts, making them particularly well-suited to practice.\nOver the last two decades, sophisticated probabilistic techniques have been developed for a broad range of challenging computing applications. To begin with, this course will introduce the basic probabilistic techniques used in the design of randomized algorithms and in probabilistic analysis of algorithms. The course covers the basic probability theory required for working with these techniques and demonstrates their use in various computing applications, especially in the context of parameterized and approximation algorithms.\nThis course will demonstrate the algorithmic techniques in the context of a variety of combinatorial optimization problems that have significant real-world applications. These include: Longest Path, Minimum Cut, Maximum Cut, Clustering, Vertex Cover, Feedback Vertex Set, and Closest String.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course. The course is open to students, postdocs, faculty, industry professionals, and anyone who is interested and is confident about the prerequisites enlisted below.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms.\nProbability Prerequisites\nDiscrete probability spaces • Events • Random variables • Independence (of events, of random variables) • Conditional probability • Expectation of random variable. • Linearity of Expectation • Conditional Expectation (of random variable on event, and on another random variable) • Binomial coefficients (Pascal’s Triangle) • Bernoulli, Binomial, Geometric random variables.\nGeneral Prerequsites\nCorrectness proofs for algorithms • Paradigms: Greedy, DP, Divide and Conquer • Big-Oh and asymptotic runtime analysis • Formulating and solving recurrences • P, NP, NP-completeness\nMath Prerequisites\nLinear algebra (Matrices, vectors, rank, basis, linear independence)\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n5th December 2022: Registration + Coffee: 9AM to 10AM | Outside 1/101\n5th December 2022: Inaugaral Event: 10AM | 1/101\n\nAddress by Prof. Rajat Moona\n(Director, IITGN)\nAddress by Prof. Anirban Dasgupta\n(Discipline Coordinator, Computer Science and Engineering, IITGN and Local GIAN Coordinator for IITGN)\nAddress by Prof. Saket Saurabh\n(Professor, The Institute of Mathematical Sciences)\n\nLectures: Mon - Thu • 11AM — 12:30PM • 2:30PM — 4PM | Fri • 11AM — 12:30PM\nTutorial: Mon - Thu • 4:30PM — 6PM | Fri • 2:30PM — 4PM\nVenue: Mon - Wed: 1/101 • Thu: 7/101 • Fri: 7/102\n\n\n\nZoom links and invitations to a Whatsapp group and Discord server were sent out to all registered participants.\nRegister here.  Registrations are now closed. You can follow along on Youtube if you missed registering!\n\n\n\n\n\n\n\n\n\n\n\nAbout the Instructor: Daniel Lokshtanov\n\n\n\n\n\n\n\n\nDaniel Lokshtanov is a Professor at the Department of Computer Science at the University of California Santa Barbara, before which he was a Professor at the Department of Informatics at the University of Bergen. He received his PhD in Computer Science (2009), from the University of Bergen. He spent two years (2010- 2012) as a Simons Postdoctoral Fellow at University of California at San Diego.\nHis research interests span a wide area of algorithms, and he has made several fundamental contributions in the areas of exact exponential algorithms, parameterized and fine-grained algorithms and approximation algorithms. He has been awarded the Meltzer Prize for Young Researchers for his work at the University of Bergen. He is a recipient of the Bergen Research Foundation young researcher grant and of an ERC starting grant on parameterized algorithms. He is a co-author of two recently published texts — Kernelization (Cambridge University Press, 2019) and Parameterized Algorithms (Springer, 2015).\n\n\n\n\n\n\n\n\n\n\n\n\n\nLecturesTutorialsMemoriesFeedback\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n        Recap\n    \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                1. Introduction\n                Randomized Algorithms  MaxCut  MinCut\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                05 Dec, 2022\n            \n            \n                2. Linear Programs\n                Algorithm: Vertex Cover LP.  2-Approximation by Deterministic Rounding  Algorithm: Set Cover.  Randomized Rounding for O(log n) approximation.\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                06 Dec, 2022\n            \n            \n                3. Vertex Cover and FVS\n                Randomized 2-Approximation algorithm for Vertex Cover, and an exact exponential algorithm algorithm for Vertex Cover  Randomized 4-Approximation algorithm for FVS and an exact exponential algorithm for FVS  Comments on F-Deletion\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                06 Dec, 2022\n            \n            \n                4. Color Coding\n                Color Coding (k-Path)  Chernoff Bounds  Approximate counting of (K-paths)  Chromatic Coding (Feedback Arc Set on Tournaments and d-Clustering)\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                07 Dec, 2022\n            \n            \n                5. Closest String and Max Cut\n                (1+eps) approximation for Closest String by Randomized Rounding and Local SearchMax Cut on Dense Graphs\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                07 Dec, 2022\n            \n            \n                6. Max Cut and SDP\n                Max Cut on Dense Graphs (continued)  Introduction to Semi-Definite Programs  0.87 approximation for Max Cut on General Graphs \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                08 Dec, 2022\n            \n            \n                7. Algebraic Techniques\n                Isolation Lemma  Cut and Count\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                08 Dec, 2022\n            \n            \n                8. Derandomization\n                Method of Conditional Expectation  Splitters\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n                    \n            \n                09 Dec, 2022\n            \n            \n                9. Glimpses of Exact Algorithms\n                1.333^n algorithm for 3-SAT  2-approximation for Tournament Feedback Vertex Set\n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n            \n                    \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n    \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                Tutorial 1\n                \n            \n            \n                    \n                \n            \n                    \n                \n        \n                    \n            \n                06 Dec, 2022\n            \n            \n                Tutorial 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n        \n                    \n            \n                07 Dec, 2022\n            \n            \n                Tutorial 3\n                \n            \n            \n                    \n                \n            \n                    \n                \n        \n                    \n            \n                08 Dec, 2022\n            \n            \n                Tutorial 4\n                \n            \n            \n                    \n                \n            \n                    \n                \n        \n                    \n            \n                09 Dec, 2022\n            \n            \n                Tutorial 5\n                \n            \n            \n                    \n                \n            \n                    \n                \n        \n\n\n\nNo matching items"
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D4L1/index.html",
    "href": "courses/2022/04-GIAN/notes/D4L1/index.html",
    "title": "191014K02 | Day 4 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\nHere’s our key tool for the day!\n\n\n\n\n\n\nIsolation Lemma\n\n\n\nLet U be a universe with |U|=n and let \\cal F be a family of sets over U. Pick a random weight function w: U \\rightarrow\\{1, \\cdots ,W\\}. Then:\n\\operatorname{Pr}[{\\color{indianred}\\cal F \\text{ has a \\textbf{unique} min weight set}}] \\geqslant \\frac{n}{W}\n\n\nCall an element u critical if:\n\nu is in some minimum weight set, and\nif w(u) is increased by 1 then u is no longer in any minimum weight set."
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D2L2/index.html",
    "href": "courses/2022/04-GIAN/notes/D2L2/index.html",
    "title": "191014K02 | Day 2 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\n Work in progress.\n\nA simple path in a graph is a sequence of distinct vertices u_1, \\ldots, u_\\ell such that all consecutive vertices have an edge between them. We are going to talk about the problem of finding long paths in graphs:\n\n\n\n\n\n\nk-Path\n\n\n\nDoes G have a simple path on k vertices?\n\n\nThis problem is “of course”1 NP-complete.\n\nWhat is the probability that a random coloring with k colors makes a fixed k-path “multicolored”? It’s \\frac{k!}{k^k}, and we claim that this is at least \\frac{1}{e^k}.\n\n\n\n\n\n\nLower bound on the probability of the good event\n\n\n\nClaim 1. \\frac{k!}{k^k} \\geqslant \\frac{1}{e^k}\n\n\n\n\n\n\n\n\nProof by induction:\n\n\n\n\n\n\\begin{aligned}\n\\frac{k^k}{k !} & = \\underbrace{{\\color{indianred}\\frac{(k-1)^{k-1}}{(k-1) !} \\cdot \\frac{(k-1) !}{(k-1)^{k-1}}}}_{1} \\cdot \\frac{k^k}{k!} \\\\\n& ~ \\\\\n& = \\underbrace{{\\color{darkseagreen}\\frac{(k-1)^{k-1}}{(k-1) !}}}_{\\text{Induction Hypothesis}} \\cdot \\frac{(k-1) !}{(k-1)^{k-1}} \\cdot \\frac{k^k}{k!} \\\\\n& \\leqslant {\\color{darkseagreen}e^{k-1}} \\cdot \\frac{(k-1)!}{(k-1)^{k-1}} \\cdot \\frac{k^k}{k!} \\\\\n& ~ \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{{\\color{olivedrab}(k-1)!}}{(k-1)^{k-1}} \\cdot \\frac{{\\color{palevioletred}k^k}}{{\\color{olivedrab}k!}} \\\\\n& \\leqslant e^{k-1} \\cdot {\\color{olivedrab}\\frac{1}{k}} \\cdot \\frac{{\\color{palevioletred}k^{k-1}}}{(k-1)^{k-1}} \\cdot {\\color{palevioletred}k} \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{1}{{\\color{indianred}k}} \\cdot \\frac{k^{k-1}}{(k-1)^{k-1}} \\cdot {\\color{indianred}k} \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{k^{k-1}}{(k-1)^{k-1}} \\\\\n& ~ \\\\\n& =e^{k-1} \\cdot {\\color{darkseagreen}\\left(1+\\frac{1}{k-1}\\right)^{k-1}}\\\\\n& \\leqslant e^{k-1} \\cdot {\\color{darkseagreen}e}\\\\\n& =e^k\n\\end{aligned}\n\n\n\n\n\nThe useful way to recall what the Chernoff bound tells us is the following: for independent 0/1 random variables, the probability that X deviates from its expectation by a large amount is extremely small.\n\n\n\n\n\n\nChernoff Bound (informal)\n\n\n\nIf X is the sum of many independent random variables with “small” values, then X is very very likely to be very close to E[X].\n\n\nThe following is the precise statment:\n\n\n\n\n\n\nChernoff Bound: the Theorem.\n\n\n\nLet X= X_1 + X_2 \\cdots+ X_n where:\n\nthe X_i’s take values from \\{0,1\\}, and\nthe X_i’s is are independent,\n\nthen \\operatorname{Pr}[{\\color{indianred}|X-E[X]| \\geqslant \\varepsilon E[X]}] \\leqslant 2e^{-\\varepsilon^2 \\cdot E[X]/3}\n\n\nAnd here is a useful variation, handy for when you don’t know the expectation, but have upper and lower bounds on it.\n\n\n\n\n\n\nChernoff Bound: a Useful Variation\n\n\n\nThe: Let X= X_1 + X_2 \\ldots+ X_n where:\n\nthe X_i’s take values from \\{0,1\\}\nthe X_i’s are independent\n\nLet \\mu_L \\leqslant E[X] \\leqslant \\mu_H\nThen: \n\\begin{aligned}\n& \\operatorname{Pr}\\left[x-\\mu_H \\geqslant \\varepsilon \\mu_H\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_H / 3} \\\\\n& \\operatorname{Pr}\\left[\\mu_L-x \\geqslant \\varepsilon \\mu_L\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_L / 3}\n\\end{aligned}"
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D1L2/index.html",
    "href": "courses/2022/04-GIAN/notes/D1L2/index.html",
    "title": "191014K02 | Day 1 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\n\n\n\nAn integer linear program involves n variables x_1, x_2, \\ldots, x_n \\in \\mathbb{Z} and a linear objective function to be optimized.\nIn particular, we would like to minimize or maximize a function that looks like: \\sum_{i = 1}^n {\\color{indianred}c_i} x_i,\nsubject to m linear inequalities:\n\\begin{aligned}\na_1^1 x_1+a_2^1 x_2+ \\cdots + a_i^1 x_i + \\cdots+a_n^1 x_n & \\leqslant b_1 \\\\\na_1^2 x_1+a_2^2 x_2+ \\cdots + a_i^2 x_i + \\cdots+a_n^2 x_n & \\leqslant b_2 \\\\\n\\vdots & \\\\\na_1^j x_1+a_2^j x_2+ \\cdots + a_i^j x_i + \\cdots+a_n^3 x_n & \\leqslant b_j\\\\\n\\vdots & \\\\\na_1^m x_1+a_2^m x_2+ \\cdots + a_i^m x_i + \\cdots+a_n^m x_n & \\leqslant b_m.\n\\end{aligned}\nHere {\\color{indianred}c_1,\\cdots,c_n} are some constants in \\mathbb{Z} or \\mathbb{Q}\nSo given the a_i^j’s as input (1 \\leqslant i \\leqslant n; 1 \\leqslant j \\leqslant m), the goal is to set the x_i’s such that:\n\nall the inequalities are satisfied, and\nthe objective function is optimized1."
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D3L1/index.html",
    "href": "courses/2022/04-GIAN/notes/D3L1/index.html",
    "title": "191014K02 | Day 3 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n Work in progress.\n\n\n\nFor two strings s_1, s_2 of the same length \\ell, we define the Hamming Distance between S_1 & S_2 to be:\nd\\left(S_1, S_2\\right):=\\left|\\left\\{i: S_1[i] \\neq S_2[i]\\right\\}\\right|\nso, for example, d(horse, force) =2.\nFor a string c and set S of stings of length \\ell:\nd(S, c):=\\max _{t \\in S} d(t,c)\n\n\n\n\n\n\nClosest String [Optimization]\n\n\n\nInput: n strings of length \\ell over an alphabet \\Sigma1\nTask: Find center sting c lot length \\ell such that d(S, c) is minimized\n\n\nGOAL: (1+\\varepsilon) Approximation Algorithm\n\n\nHave an indicator variable for every position p and every letter \\alpha \\in \\Sigma, introduce a binary variable x_{p,\\alpha} with the following semantics:\n\\begin{equation*}\n    x_{p,\\alpha} =\n    \\begin{cases}\n      1 & \\text{if } c[p] = \\alpha\\\\\n      0 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\nThe constraints:\n\nAt every position we have one letter:\n\n\\forall p \\in [\\ell]: \\sum_{\\alpha \\in \\Sigma} x_{p,\\alpha} = 1\n\nWe control the distance:\n\\forall t \\in S: \\quad \\sum_{p=1}^\\ell \\left({\\color{indianred}1-x_{p, t[p]}} \\right) \\leqslant d\n…and ask the ILP to minimize d.\n\n\n\n\n\n\n\nThe distance constraint\n\n\n\n\n\nNote that:\n\\begin{equation*}\n    1 - x_{i,s[i]} =\n    \\begin{cases}\n      0 & \\text{if the solution matches with } s[i] \\text{at location } p,\\\\\n      1 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\n\n\n\nNow, as usual, relax the ILP and solve the associated LP.\nRounding. Think of the OPTLP variable values as “voting” for characters at each position. For example, if \\ell = 5, \\Sigma = \\{A,C,G,T\\}, and the OPTLP values turn out to be:\n\n\n\n\nA\nC\nG\nT\n\n\n\n\n1\n0.9\n0\n0.05\n0.05\n\n\n2\n0.1\n0.2\n0.4\n0.3\n\n\n3\n0.5\n0.1\n0.1\n0.3\n\n\n4\n0.1\n0.7\n0.1\n0.1\n\n\n5\n0.2\n0.2\n0\n0.6\n\n\n\nThen you might be tempted to “round” the solution to AGACT because for each position p \\in [5], the letters A, G, A, C, and T dominate the vote for that position. However: it turns out that this nautral rounding strategy can be arbitrarily bad!\nInstead of picking the top choice, what we do instead is the following: for every position p \\in [\\ell], treat the x_{p,\\alpha}’s as a probability distribution2 over \\Sigma. Now the randomized rounding step involves sampling from this distribution to obtain the solution:\n\nSet c[p] = \\alpha with probability x_{p,\\alpha}.\n\nDefine the indicator random variables q_{p,\\alpha} as indicating for us when c is different from \\alpha at position p, as a stepping stone to capturing distance eventually:\n\\begin{equation*}\n    q_{p,\\alpha} =\n    \\begin{cases}\n      1 & \\text{if } {\\color{indianred}c[p] \\neq \\alpha},\\\\\n      0 & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\nThen we have the natural notion of a random variable to capture the distance between the string output by our randomized algorithm and any fixed string t \\in S:\nd[c,t] := \\sum_{p \\in \\ell} q_{p,t[p]}\nIt’s time for our first cool claim.\nFix a t \\in S. What is E[d(c,t)]?\nIt turns out: at most d, and therefore, at most OPTLP, and in turn, at most OPTILP = OPT \n\n\n\n\n\n\nCalculating the Expectation\n\n\n\n\n\n\\begin{aligned}\nE[d(c,t)] & = \\sum_{p \\in [\\ell]} 1 \\cdot {\\color{indianred}\\operatorname{Pr}[c[p] \\neq t[p]]} + 0 \\cdot \\operatorname{Pr}[c[p] \\neq t[p]] \\\\\n& = \\sum_{p \\in [\\ell]} 1 \\cdot \\left({\\color{indianred}1 - x_{p,t[p]}}\\right) \\\\\n& {\\color{darkseagreen}\\leqslant d},\n\\end{aligned}\nwhere the last inequality follows from the second LP constraint.\n\n\n\nNote that d(c,t) is a sum of independent 0/1 random variables whose expectation is upper bounded by OPT. So our useful Chernoff variation applies here,\n\n\n\n\n\n\nChernoff Bound: a Useful Variation (recall)\n\n\n\n\n\nThe: Let X= X_1 + X_2 \\ldots+ X_n where:\n\nthe X_i’s take values from \\{0,1\\}\nthe X_i’s are independent\n\nLet \\mu_L \\leqslant E[X] \\leqslant \\mu_H\nThen: \n\\begin{aligned}\n& \\operatorname{Pr}\\left[x-\\mu_H \\geqslant \\varepsilon \\mu_H\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_H / 3} \\\\\n& \\operatorname{Pr}\\left[\\mu_L-x \\geqslant \\varepsilon \\mu_L\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_L / 3}\n\\end{aligned}\n\n\n\n\nand we get the following:\n\n\\operatorname{Pr}[d(c,t)-\\text{OPT} > \\varepsilon \\cdot \\text{OPT}] \\leqslant e^{-\\varepsilon^2 \\text{OPT} / 3}.\n\nNow, applying union bound over all n choices of t \\in S, we get:\n\n\\operatorname{Pr}[{\\color{darkseagreen}d(c,S)} > (1+\\varepsilon) \\cdot \\text{OPT}] \\leqslant \\frac{{\\color{darkseagreen}n}}{e^{\\varepsilon^2 \\text{OPT} / 3}}.\n\nSo, if, for example:\n\\frac{n}{e^{\\varepsilon^2 \\text{OPT} / 3}} \\leqslant \\frac{1}{2},\nthen it’s a win! \n\n\n\n\n\n\nWhat’s the bad situation?\n\n\n\n\n\n\\begin{aligned}\n\\frac{1}{2} & \\leqslant \\frac{n}{e^{\\varepsilon^2 \\text{OPT} / 3}}\\\\\n& ~ \\\\\ne^{\\varepsilon^2 \\text{OPT} / 3} & \\leqslant 2n \\\\\n& ~ \\\\\n\\frac{\\varepsilon^2 \\text{OPT}}{3} & \\leqslant \\ln(2n) \\\\\n& ~ \\\\\n{\\color{indianred}\\text{OPT}} & {\\color{indianred}\\leqslant \\frac{3\\ln(2n)}{\\varepsilon^2}}\n\\end{aligned}\n\n\n\nWe don’t have a win when OPT is really really small, in particular, if:\n\\text{OPT} \\leqslant \\frac{3\\ln(2n)}{\\varepsilon^2}\nWe handle this case with a local search algorithm.\nComing Soon."
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D4L2/index.html",
    "href": "courses/2022/04-GIAN/notes/D4L2/index.html",
    "title": "191014K02 | Day 4 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D2L1/index.html",
    "href": "courses/2022/04-GIAN/notes/D2L1/index.html",
    "title": "191014K02 | Day 2 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\nVertex Cover [Optimization]\n\n\n\nInput: A graph G = (V,E).\nTask: Find S \\subseteq V(G) such that for all edges (u,v) \\in E(G), \\{u,v\\} \\cap S \\neq \\varnothing and minimize |S|.\n\n\n\n\n\n\n\n\nVertex Cover [Decision Version Edition]\n\n\n\nInput: A graph G = (V,E) and k \\in \\mathbb{Z}^+.\nTask: Find S \\subseteq V(G) such that for all edges (u,v) \\in E(G), \\{u,v\\} \\cap S \\neq \\varnothing and |S| \\leqslant k.\n\n\nThe naive algorithm by brute force — examining all possible subsets — is O(n^k \\cdot m) in damages. Can we do better?\nThe answer turns out to be yes: we can improve from O(n^k \\cdot m) to deterministic 2^k \\cdot n^{O(1)} time, which is fixed-parameter tractable in k.\nHaving said that, we will begin with a very elegant randomized algorithm for Vertex Cover, which essentially picks an edge at random and then, one of its endpoints at random, for as long as it can.\n\n\n\n\n\n\nCute randomized algorithm ALG\n\n\n\nS=\\varnothing\nwhile G-S has at least one edge:\n\npick u,v \\in E(G-S) u.a.r.\npick s \\in\\{u,v\\} u.a.r\nSet S \\leftarrow S \\cup\\{s\\}\n\nOutput S\n\n\nHere are few claims about cute algorithm:\n\nALG always runs in polynomial1 time.\nS is always a vertex cover.\n\\operatorname{Pr}[S is an optimal vertex cover] \\geqslant 1/2^k. \n\nThe first two claims follow quite directly from the operations of the algorithm and the definition of a vertex cover.\nWhat about the third? Well: let OPT be some fixed optimal vertex cover. Suppose |OPT| \\leqslant k. Initially, note that S \\subseteq OPT. In each round, \\operatorname{Pr}[s \\in S] \\geqslant 1/2, since S \\cap \\{u,v\\} \\neq \\varnothing by definition. If s \\in OPT in every round of the algorithm, then S = OPT, which is awesome: and said awesomeness manifests with probability 1/2^k.\nBonus: repeat the algorithm and retain the smallest solution to get an overall constant success probability:\n1-\\left(1-\\frac{1}{2^k}\\right)^{2^k} \\geqslant 1-1 / e.\nApproximation. Do we expect ALG to be a reasonable approximation? It turns out: yes! \nIn particular: we will show that the size of the vertex cover output by ALG is at most twice |OPT| in expectation.\nFor a graph G, define X_G to be the radom variable returning the size of the set S output by the algorithm.\nFor integers k,n define: \nX_{n,k}=\\max_G E[X_G],\n\nwhere the \\max is taken over all graphs with \\leqslant n vertices2 and vertex cover of size \\leqslant k.\nNow let’s analyze the number X_{n,k}. Let G^\\star be the “worst-case graph” that bears witness to the \\max in the definition of X_{n,k}. Run the first step of ALG on G^\\star. Suppose we choose to pick {\\color{indianred}s} in this step. \n\\begin{aligned}\nX_{n,k}=E[X_{G^\\star}] & = {\\color{indianred}1}+\\left(\\frac{1}{2}+\\varepsilon \\right) E\\left[{\\color{darkseagreen}X_{G^\\star-s} \\mid s \\in \\text{OPT}}\\right]+\\left(\\frac{1}{2} - \\varepsilon\\right) E\\left[{\\color{palevioletred}X_{G^\\star-s} \\mid s \\notin \\text {OPT}}\\right] \\\\\n& = 1 + \\left(\\frac{1}{2} + \\varepsilon \\right){\\color{darkseagreen}X_{n, k-1}}+ \\left(\\frac{1}{2} - \\varepsilon \\right){\\color{palevioletred}X_{n-1, k}}\\\\\n& \\leqslant 1 + \\left(\\frac{1}{2} + \\varepsilon \\right){\\color{darkseagreen}X_{n, k-1}}+ \\left(\\frac{1}{2} - \\varepsilon \\right){\\color{dodgerblue}X_{n, k}}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + \\varepsilon \\cdot X_{n, k-1} + \\frac{1}{2} X_{n, k} - \\varepsilon X_{n, k}\\\\\n& \\leqslant 1 + \\frac{1}{2} X_{n, k-1} + \\varepsilon \\cdot {\\color{dodgerblue}X_{n, k}} + \\frac{1}{2} X_{n, k} - \\varepsilon X_{n, k}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + {\\color{indianred}\\varepsilon \\cdot X_{n, k}} + \\frac{1}{2} X_{n, k} - {\\color{indianred}\\varepsilon X_{n, k}}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + \\frac{1}{2} X_{n, k}\n\\end{aligned}\n\nNote that:\n\n X_{n,k} \\geqslant X_{n-1,k} and X_{n,k} \\geqslant X_{n,k-1}.\n\\operatorname{Pr}[s \\in \\text{OPT}] \\geqslant \\frac{1}{2}, in particular we let \\operatorname{Pr}[s \\in \\text{OPT}] = \\frac{1}{2} + \\varepsilon.\n\\operatorname{Pr}[s \\notin \\text{OPT}] = 1 - \\operatorname{Pr}[s \\in \\text{OPT}] = \\frac{1}{2} - \\varepsilon.\n {\\color{darkseagreen}G^\\star-s} is a graph on at most {\\color{darkseagreen}n} vertices with a vertex cover of size {\\color{darkseagreen}\\leqslant k-1}\n {\\color{palevioletred}G^\\star-s} is a graph on at most {\\color{palevioletred}n} vertices with a vertex cover of size {\\color{palevioletred}\\leqslant k}\n\nRearranging terms, we get:\n\\frac{1}{2} X_{n,k} \\leqslant 1 + \\frac{1}{2} X_{n,k-1} \\equiv X_{n,k} \\leqslant 2 + X_{n,k-1}\nExpanding the recurrence, we have: X_{n,k} \\leqslant 2k, as claimed earlier.\n\n\n\nNow we turn to a problem similar to vertex cover, except that we are “killing cycles” instead of “killing edges”.\n\n\n\n\n\n\nFeedback Vertex Set\n\n\n\nInput: A (multi-)3graph G = (V,E).\nTask: Find S \\subseteq V(G) such that G \\setminus S is a forest4, and minimize |S|.\n\n\nIf we try to mimic the cute algorithm from before, we might easily be in trouble: note that the driving observation — that an edge has at least one of its endpoints in the solution with a reasonable enough probability — can fail spectacularly for FVS:\n\n\n\nAn example showing that for “most edges”, both endpoints do not belong to an optimal solution.\n\n\nOne thing about this example is the large number of pendant vertices sticking out prominently, and these clearly contribute to the badness of the situation. Happily, it turns out that we can get rid of these:\n\n\n\n\n\n\nLemma 1. Delete pendant and isolated vertices\n\n\n\nLet G be a multi-graph and v be a vertex of degree \\leqslant 1. Then:\n\nMinFVS of G-\\{v\\} \\leqslant MinFVS of G\n\\forall S \\subseteq V(G)-\\{v\\}:  S is an FVS for G  \\leftrightarrow S is an FVS for G \\setminus \\{v\\} \n\n\n\nConsider graphs with no pendant vertices and fix an optimal FVS S. Is it true that a reasonable fraction of edges are guaranteed to be incident to S? Well… not yet:\n\n\n\n\n\n\nSpoiler\n\n\n\n\n\n\n\n\nAn(other) example showing that for “most edges”, both endpoints do not belong to an optimal solution, even though the graph has no pendant vertices.\n\n\n\n\n\nHowever, continuing our approach of conquering-by-observing-patterns-in-counterexamples, note that the example above has an abundance of vertices that have degree two. Can we get rid of them? Well, isolated and pendant vertices were relatively easy because they don’t even belong to cycles, but that is not quite true for vertices of degree two. Can we still hope to shake them off?\nOne thing about a degree two vertex u is that if there is a cycle that contains u it must contain both its neighbors5. So you might suggest that we can ditch u and just work with its neighbors instead. This intuition, it turns out, can indeed be formalized:\n\n\n\n\n\n\nLemma 2. Short-Circuiting Degree Two Vertices\n\n\n\nLet:\n\nG be a multi-graph,\nu be a vertex of degree 2 that is not a self-loop,\na and b be the neighbors of u (a=b is possible).\n\nLet H be the graph obtained by adding an edge (a,b) to G-\\{u\\}.\nThen:\n\nevery FVS S of G such that u \\notin S is an FVS of H, and\nevery FVS S of H is an FVS of G.\n\n\n\n\n\n\nIllustrating Lemma 2 scenarios.\n\n\nLet us also get rid of self-loops (because we can):\n\n\n\n\n\n\nLemma 3. Removing self-loops\n\n\n\nIf G has a vertex v with a self loop then\n\nEvery FVS S of G contains v\nFor every S containing v: S is an FVS of G \\leftrightarrow S-v is an FVS of G-\\{v\\}\n\n\n\nNow let’s apply Lemmas 1—3 exhaustively, which is to say we keep applying them until none of them are applicable (as opposed to applying them until we feel exhausted  ). Once we are truly stuck, we have a graph H that is: (a) a graph whose minimum degree is three; and (b) equivalent to the original G in the sense that any minimum FVS for H can be extended to a minimum FVS of G by some time travel: just play back the applications of Lemmas 1—3 in reverse order.\nRecall that all this work was to serve our hope for having a cute algorithm for FVS as well. Let’s check in on how we are doing on that front: consider graphs whose minimum degree is three and fix an optimal FVS S. Is it true that a reasonable fraction of edges are guaranteed to be incident to S? Or can we come up with examples to demonstrate otherwise?\nThis is a good place to pause and ponder: play around with examples to see if you can come up with bad cases as before. If you find yourself struggling, it would be for a good reason: we actually now do have the property we were after! Here’s the main claim that we want to make.\n\n\n\n\n\n\nKey Lemma\n\n\n\nLet:\n\nG be a multigraph with no self loops and minimum degree \\geqslant 3,\nS be an FVS of G,\n(u,v) be a random edge in E(G).\n\nThen:\n\\operatorname{Pr}[{\\color{indianred}\\{u, v\\} \\cap S \\neq \\varnothing}] \\geqslant 1/2\n\n\nWe argue this as follows: call an edge good if it has at least one of its endpoints in S, and bad otherwise.\nWe will demonstrate that the number of good edges is at least the number of bad edges: this implies the desired claim.\n\nThe bad edges. Let X := G \\setminus S. The bad edges are precisely E(G[X]).\nThe good edges. Every edge that has one of its endpoints in X and the other in S is a good edge. Recall that G has minimum degree three, because of which:\n\nfor every leaf in G[X], we have at least two good edges, and\nfor vertex that is degree two in G[X], we have at least one good edge.\n\n\nSo at this point, it is enough to show that twice the number of leaves and degree two vertices is at least |E(G[X])| = |X|-1. But this is quite intuitive if we simple stare at the following mildly stronger claim:\n2 \\cdot (\\text{\\# leaves}) + \\text{\\# deg-} 2 \\text{vertices} \\geqslant |X|\nwhich is equivalent to:\n2 \\cdot ({\\color{darkseagreen}\\text{\\# leaves}}) + {\\color{palevioletred}\\text{\\# deg-}2 \\text{vertices}} \\geqslant ({\\color{darkseagreen}\\text{\\# leaves}}) + {\\color{palevioletred}\\text{\\# deg-}2 \\text{ vertices}} + \\text{\\# deg-}(\\geqslant 3) \\text{ vertices}.\nAfter cancelations, we have:\n(\\text{\\# leaves}) \\geqslant \\text{\\# deg-}(\\geqslant 3) \\text{ vertices}.\nNote that this is true! Intuitively, the inequality is suggesting every branching vertex in a tree pays for at least one leaf — this can be formalized by induction on n.\n\n\n\n\n\n\nInduction proof sketch\n\n\n\n\n\nDenote the tree by G and remove a leaf u to obtain H. Apply the induction hypothesis on H.\n\nIf the neighbor of u in G is a degree two vertex, then the number of leaves and high degree vertices are the same in G and H, so the claim follows directly.\nIf the degree of the neighbor in u is three in G, then both quantities in the inequality for H increase by one when we transition from H to G.\nIn the only remaining case, the quantity on the left increases by one when we come to G, which bodes well for the inequality. \n\n\n\n\nAll this was leading up to cute randomized algorithm v2.0 — i.e, adapted for FVS as follows:\n\n\n\n\n\n\nCute randomized algorithm redux\n\n\n\nALG(G)\nPreprocess:\n\nif G is acyclic return \\varnothing\nif \\exists a self loop v RETURN (ALG(G \\setminus \\{v\\})) \\cup \\{v\\}.\nif \\exists a degree one vertex v RETURN ALG(G-\\{v\\}).\nif \\exists a degree two vertex v RETURN ALG(G/\\{v\\}) (c.f. Lemma 2).\n\n\nMindeg-3 instance:\n\npick an edge (u,v) \\in E(G) u.a.r.\npick s \\in \\{u,v\\} u.a.r.\nRETURN (ALG(G \\setminus \\{s\\})) \\cup \\{s\\}\n\n\n\n\n\n\n\n\n\nClaim 1\n\n\n\nALG always returns a FVS of G.\n\n\nThis follows from Lemmas 1—3 and induction on n.\n\n\n\n\n\n\nClaim 2\n\n\n\nIf G has a FVS of size k, then \\operatorname{Pr}[ALG returns an optimal FVS] \\geqslant 1/4^k.\n\n\nThis follows from Lemmas 1—3, the key lemma, and induction on n.\n\n\n\nComing Soon."
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D5L1/index.html",
    "href": "courses/2022/04-GIAN/notes/D5L1/index.html",
    "title": "191014K02 | Day 5 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n Work in progress.\n\n\n\n\n\n\n\nTournament Feedback Vertex Set (TFVS)\n\n\n\nInput: A tournament T, w: V(T) \\rightarrow \\mathbb{N}.\nTask: Find S \\subseteq V(T) s.t T - S is acyclic & {\\color{indianred}w(S):=\\sum_{\\sigma \\in S} w(v)} is minimized.\n\n\nSuppose:\n\n|\\text{OPT}| \\geqslant n \\cdot 0.6"
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D1L1/index.html",
    "href": "courses/2022/04-GIAN/notes/D1L1/index.html",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "courses/2022/04-GIAN/notes/D3L2/index.html",
    "href": "courses/2022/04-GIAN/notes/D3L2/index.html",
    "title": "191014K02 | Day 3 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "courses/2022/04-GIAN/tutorials/D2Q/index.html",
    "href": "courses/2022/04-GIAN/tutorials/D2Q/index.html",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\n\nSubgraph Isomorphism\n\n\n\nThe input is an n-vertex graph G and a k-vertex graph H, and the objective is to test whether there exists a subgraph \\widehat{H} of G such that H is isomorphic to \\widehat{H}.\nObserve that k-Path (discussed in class earlier today) is a special case of Subgraph Isomorphism where H is a path on k vertices. The problem of finding a Clique on k vertices is a special case of Subgraph Isomorphism as well, where H is a clique on k vertices. It is believed that Clique is not FPT, and, consequently, we do not expect that the general Subgraph Isomorphism problem to be FPT when parameterized by k.\n\n\n\n\n\n\n\n\nHoeffding’s Inequality\n\n\n\nLet X_1, \\ldots, X_n be independent random variables such that a_i \\leq X_i \\leq b_i almost surely. Consider the sum of these random variables, \nS_n=X_1+\\cdots+X_n .\n Then Hoeffding’s theorem states that, for all t>0, \n\\begin{gathered}\n\\mathrm{P}\\left(S_n-\\mathrm{E}\\left[S_n\\right] \\geq t\\right) \\leq \\exp \\left(-\\frac{2 t^2}{\\sum_{i=1}^n\\left(b_i-a_i\\right)^2}\\right) \\\\\n\\mathrm{P}\\left(\\left|S_n-\\mathrm{E}\\left[S_n\\right]\\right| \\geq t\\right) \\leq 2 \\exp \\left(-\\frac{2 t^2}{\\sum_{i=1}^n\\left(b_i-a_i\\right)^2}\\right)\n\\end{gathered}\n\nHere \\mathrm{E}\\left[S_{\\mathrm{n}}\\right] is the expected value of S_n.\n\n\n\n\n\n\nShow that the number of inclusion minimal vertex covers of size at most k is at most 2^k. (Use the algorithm from class.)\nGeneralize the Vertex Cover algorithm that we saw today to Set Cover in which every element appears in at most d sets.\nFeedback Vertex Set as Hitting Set. Why don’t we get a O(\\log n) approximation for FVS via the O(\\log n) approximation for Set Cover1?\nUse Markov inequality to show that: \n\\operatorname{Pr}[{\\color{indianred}|S| \\leqslant 2 \\cdot |\\text{OPT}|}] \\geqslant \\Omega(1 /|\\text{OPT}|)\n\nCome up with an algorithm to solve an instance of subgraph isomorphism (G, H) in time 2^{d k} k ! n^{\\mathcal{O}(1)} and in time 2^{d k} k^{\\mathcal{O}(d \\log d)} n^{\\mathcal{O}(1)}. Here, |V(G)|=n,|V(H)|=k, and the maximum degree of G is bounded by d.\nGeneralize the color coding approach for Longest Path to: (a) k-Cycle where H is a cycle on k vertices, (b) Tree Subgraph Isomorphism, where H is restricted to being a tree on k vertices.\nDesign a randomized algorithm running in time 2^{O\\left(\\sqrt{k} \\log ^2 k\\right)}+n^{O(1)} for the problem of finding a feedback arc set of size at most k in a tournament on n vertices."
  },
  {
    "objectID": "courses/2022/04-GIAN/tutorials/D1Q/index.html",
    "href": "courses/2022/04-GIAN/tutorials/D1Q/index.html",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\n\nc-approximate mincut\n\n\n\nA c-approximate mincut is a set of at most cr edges if r is the number of edges in a mincut.\n\n\n\n\n\n\n\n\nmin k-way cut\n\n\n\nA minimum k-cut is a smallest set of edges whose removal would partition the graph to at least k connected components\n\n\n\n\n\n\n\n\nG(n,p) graphs\n\n\n\nThe G(n, p) model, due to Erdös and Rényi, has two parameters, n and p. Here n is the number of vertices of the graph and p is the edge probability. For each pair of distinct vertices, v and w, p is the probability that the edge (v, w) is present. The presence of each edge is statistically independent of all other edges. The graph-valued random variable with these parameters is denoted by G(n, p). When we refer to “the graph G(n, p)”, we mean one realization of the random variable.\n\n\n\n\n\n\nGeneralize the mincut argument to c-approximate mincuts.\nGeneralize the mincut argument to min k-way cut.\nProve #min k-cuts is at most n^{O(k)}.\nShow that G(n, 1/2) graphs have:\n\nmany cliques of size 2 \\log n-o(\\log n) in expectation, and\nno cliques of size 2 \\log n+o(\\log n) in expectation (and with high probability).\n\nConsider the following algorithm for finding a minimum cut. Assign a random score to each edge, and compute a minimum spanning tree. Removing the heaviest edge in the tree breaks it into two pieces. Argue that with probability \\omega(1/n^2), those pieces will be the two sides of a minimum cut. Hint: relate this algorithm to the contraction algorithm we did in the class. Also think about Kruskal’s algorithm.\nShow that for every n \\geq 4, there is a simple graph G_n on n vertices that has at least {n \\choose 2} distinct minimum cuts.\nShow that for every n \\geq 3, there is a simple graph G_n on n vertices such that the value of ILPOPT of the vertex cover ILP associated with G_n is at least one less than twice the value of LPOPT of the vertex cover LP associated with G_n, i.e:\n\n\\text{ILPOPT}(G_n) \\geq 2\\cdot \\text{LPOPT}(G_n) - 1.\n\nConsider the Set Cover instance shown in the figure below.\n\nShow that all-half is the unique LPOPT for this instance.\nShow that if you include every set in \\mathcal{F}^\\prime with probability x_s, then the probability that \\mathcal{F}^\\prime covers U is at most 2^{-\\Omega(n)}."
  },
  {
    "objectID": "courses/2022/04-GIAN/tutorials/D5Q/index.html",
    "href": "courses/2022/04-GIAN/tutorials/D5Q/index.html",
    "title": "191014K02 | Day 5 Tutorial",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\nStart the local search algorithm discussed in class and suppose that initially d(\\gamma, \\beta) \\leqslant d. Consider a random walk from d with down-probability 1/k. Show that \\forall s \\geqslant 0 and j \\geqslant 0: \n\\operatorname{Pr}[{\\color{indianred}d(\\gamma, \\beta) \\leqslant j \\text { in step } s}] \\geqslant \\operatorname{Pr}\\left[P_s \\leqslant j\\right].\n\nWe saw in class that the probability that the walk eventually visits 0 is q_d=\\left(\\frac{1}{k-1}\\right)^d. We want to now show that the probability that this happens in “not too many” i.e, (O(d)) steps, is \\geqslant q_d/2. To this end:\n\nShow that starting at position d+3 the probability of reaching 0 is \\leqslant q_d/8.\nShow that \\forall k, \\exists c such that \\forall d1, after cd steps, the probability of being at position \\leqslant d+3 is \\leqslant q_d/8.\nShow that the probability of reaching 0 from d after at least cd steps is at most q_d/2.\nShow that the probability of reaching 0 from d after at most cd steps is at least q_d/2.\n\nShow that a tournament has a directed cycle if and only if it has a directed triangle.\nDemonstrate a 3-approximation algorithm for the Tournament Feedback Vertex Set problem."
  },
  {
    "objectID": "courses/2022/04-GIAN/tutorials/D4Q/index.html",
    "href": "courses/2022/04-GIAN/tutorials/D4Q/index.html",
    "title": "191014K02 | Day 4 Tutorial",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\nThe statement of the isolation lemma discussed in class was the following:\nLet U be a universe with |U|=n and let \\cal F be a family of sets over U. Pick a random weight function w: U \\rightarrow\\{1, \\cdots ,W\\}. Then:\n\\operatorname{Pr}[{\\color{indianred}\\cal F \\text{ has a \\textbf{unique} min weight set}}] \\geqslant 1-\\frac{n}{W}\nRecall that we called an element u critical if:\n\nu is in some minimum weight set, and\nif w(u) is increased by 1 then u is no longer in any minimum weight set.\n\nArgue that \\cal F has a unique set of the minimum weight if and only if there are no critical elements.\n:::{.callout-tip} Foo Bar. :::\n\n\n\n\n\n\n\nTip\n\n\n\nFoo Bar.\n\n\n\nDesign a dynamic programming algorithm for Steiner Tree on graphs of bandwidth k with running time k^{O(k)} n^{O(1)}.\nDemonstrate (via a direct argument) that the greedy algorithm for the maxcut problem discussed in class outputs a cut that cuts at least half the edges in the graph.\nRecall the greedy algorithm for Set Cover discussed in class. In each round, show that at least one set S_i \\in F covers at least 1/OPT fraction of uncovered elements.\nWhy did we need to define U to have edges in the k-path algorithm?\nDesign an algorithm for solving the Steiner Tree problem on graphs of bounded FVS.\nDesign an algorithm for the Hamiltonian Path problem on graphs of bounded bandwidth."
  },
  {
    "objectID": "courses/2022/04-GIAN/tutorials/D3Q/index.html",
    "href": "courses/2022/04-GIAN/tutorials/D3Q/index.html",
    "title": "191014K02 | Day 3 Tutorial",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\n\nMax Bisection\n\n\n\nIn the Max Bisection problem we are given a (weighted) graph G=(V, E), and the objective is to find a bisection\nV=S \\cup \\bar{S},|S|=|\\bar{S}|=|V| / 2\nsuch that the number (weight) of edges between S and \\bar{S} is maximized.\n\n\n\n\n\n\n\n\nk-SAT-Local Search\n\n\n\nGiven an instance of k-SAT, find a satisfying assignment that sets at most d variables to true.\n\n\n\n\n\n\nCome up with an instance where the majority rounding idea for the Closest String LP does not give an optimal solution. How much can you push the gap between OPT and the quality of the solution obtained by the greedy rounding.\nShow that the majority rounding idea for the Closest String LP is a valid 2-approximation.\nMake the local search phase for Closest String (discussed in class) work without any knowledge of OPT (i.e, you are not allowed to guess the value of OPT).\nDesign a randomized algorithm for k-SAT-Local Search with running time O(k^d).\nDesign a PTAS for Max Bisection on graphs of minimum degree dn.\nProve that selecting coordinates according to the normal distribution gives unifom distribution on unit sphere.\nProve that the projection of a random unit vector in \\mathbb{R}^d on any plane through the origin has a “u.a.r. direction”."
  },
  {
    "objectID": "courses/2023/01-CS614/index.html",
    "href": "courses/2023/01-CS614/index.html",
    "title": "CS 614 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis course is an introduction to techniques in achieving specific trade-offs, and understanding the theoretical foundations of frameworks that help us establish when certain tradeoffs are simply not feasible.\n\n\n\nFig. Exploring tradeoffs between the demands of accuracy, speed, and coverage.\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary. For students of IITGN, this course naturally follows up on DSA-II.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\nSpecific Pointers:\n\nMatroids: Erickson, the entire chapter and Section 12.2.1 from Parameterized Algorithms.\nVertex Cover:\n\nBranching: see Section 3.1 in Parameterized Algorithms.\nKernels: see Section 2.2.1 for the simple kernel, and Section 2.3.1 for the kernel based on Crown Decomposition in Parameterized Algorithms.\n2-approximation via matchings and LP: Section 21.3 in these notes.\n\nSet Cover:\n\nf-Approximation via LP rounding: Section 1.2 and 1.3 in The Design of Approximation Algorithms.\nRounding a dual solution: Sections 1.4 and 1.5 in The Design of Approximation Algorithms. Also see Chapter A in the appendix for more background on weak duality and complementary slackness.\nGreedy approximation: Section 1.6 in The Design of Approximation Algorithms.\n\nFeedback Vertex Set:\n\nThe O(\\log n)-approximation: Section 7.2 in The Design of Approximation Algorithms.\nThe 2-approximation: Section 14.2 in The Design of Approximation Algorithms.\n\nMiscellaneous\n\nColor Coding: Section 5.2 in Parameterized Algorithms.\nInclusion-Exclusion for Hamiltonian Path: Section 10.1.1 in Parameterized Algorithms.\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures on Mondays and Wednesdays • 2PM — 3:30PM • 7/206\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs TBA.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach class will have a quiz worth 2 points. The quizzes will be integrated into the lecture via Mentimeter. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThe are three assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nIf you are not from IITGN and are interested in taking up the course, then please send me an email.\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n    \n    \n                    \n            \n                04 Jan, 2023\n            \n            \n                1. Matroids and Greedy Algorithms - I\n                Matroids - definitions and examples • GreedyBasis Algorithm • Example: Scheduling with Deadlines\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                09 Jan, 2023\n            \n            \n                2. Matroids and Greedy Algorithms - II\n                Proof of correctness of GreedyBasis\n            \n            \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                11 Jan, 2023\n            \n            \n                3. Matroid Intersection - I\n                Matroid Intersection and Matroid Parity (Section 12.2.1) • Connections with Matchings • 3-Matroid Intersection is NP-complete (Theorem 12.6)\n            \n            \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                16 Jan, 2023\n            \n            \n                4. Matroid Intersection - II\n                A polynomial time algorithm for Matroid Intersection\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                18 Jan, 2023\n            \n            \n                5. Vertex Cover\n                Definition • Applications • Introduction to Approximation Algorithms • 2-approximation for Vertex Cover via maximal matchings\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                23 Jan, 2023\n            \n            \n                6. Vertex Cover\n                Introduction to Linear Programming • 2-approximation via rounding • A simple randomized algorithm for Vertex Cover\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                25 Jan, 2023\n            \n            \n                7. Vertex Cover\n                Introduction to Fixed-Parameter Tractability • An O(2^k) FPT algorithm by branching\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                01 Feb, 2023\n            \n            \n                8. Vertex Cover\n                Introduction to Kernelization • A Quadratic Kernel for Vertex Cover based on degree reductions\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                02 Feb, 2023\n            \n            \n                9. Vertex Cover\n                A Linear Kernel for Vertex Cover based on the LP formulation\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                13 Feb, 2023\n            \n            \n                10. Set Cover\n                A Greedy Approximation Algorithm • A LP formulation\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                15 Feb, 2023\n            \n            \n                11. Set Cover\n                Dual LP formulation • Weak Duality • Complementary Slackness Conditions • Rounding a Dual Solution\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                20 Feb, 2023\n            \n            \n                12. Detour: Long Path\n                Principle of Inclusion-Exclusion for a poly-space single-exponential algorithm for HAMPATH • Color Coding for Longest Path\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                22 Feb, 2023\n            \n            \n                13. Feedback Vertex Set\n                Dual LP Recap • Introduction to Feedback Vertex Set\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                27 Feb, 2023\n            \n            \n                14. Feedback Vertex Set\n                A first Primal-Dual-based O(log n)-approximation for FVS\n            \n            \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                01 Mar, 2023\n            \n            \n                15. No Class\n                \n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                13 Mar, 2023\n            \n            \n                16. Feedback Vertex Set\n                A 2-approximation algorithm for FVS: motivating the formulation\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                15 Mar, 2023\n            \n            \n                17. Feedback Vertex Set\n                A 2-approximation algorithm for FVS: the key combinatorial lemma\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                20 Mar, 2023\n            \n            \n                18. Feedback Vertex Set\n                Iterative Compression • An O*(3.619^k) algorithm for FVS on general graphs\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                19. Lower Bounds\n                Introduction to NP-completeness • 3-Partition and friends • Multiprocessor Scheduling • Packing rectangles into a rectangle\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                29 Mar, 2023\n            \n            \n                20. Lower Bounds\n                Reductions from 3-Partition\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                03 Apr, 2023\n            \n            \n                21. Lower Bounds\n                SAT and Circuit SAT • CNF SAT • 3SAT • 3SAT-4 • Monotone 3SAT • Polynomial-time variants\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                05 Apr, 2023\n            \n            \n                22. Lower Bounds\n                Schaefer's Dichotomy Theorem • 2-colorable perfect matching\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                10 Apr, 2023\n            \n            \n                23. Lower Bounds\n                Parameterized Intractability • The W-hierarchy • Reductions from CLIQUE\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                12 Apr, 2023\n            \n            \n                24. Lower Bounds\n                Kernel Lower Bounds • Composition and Distillation • Examples of compositions • Parameter preserving transformations\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                17 Apr, 2023\n            \n            \n                25. Lower Bounds\n                The (Strong) Exponential Time Hypothesis • Sparsification Lemma • Implications for parameterized algorithms\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                19 Apr, 2023\n            \n            \n                26. Lower Bounds\n                Reductions based on the ETH\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                24 Apr, 2023\n            \n            \n                27. Lower Bounds\n                Inapproximability Introduction • NP optimization problems • PTAS, APX • Stronger notions of reductions that preserve approximability • APX-hardness of vertex cover\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                26 Apr, 2023\n            \n            \n                28. Lower Bounds\n                Gap Inapproximability • Gap Problems • Gap-producing and gap-preserving reductions • PCP theorem • Unique Games Conjecture\n            \n            \n            \n            \n            \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\nThese are some practice assignments: the due date is simply the recommended completion deadline. There is no need to submit these assignments.\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                11 Jan, 2023\n            \n            \n                Assignment 1\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    01 Feb, 2023\n            \n        \n                    \n            \n                20 Feb, 2023\n            \n            \n                Assignment 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    20 Mar, 2023\n            \n        \n                    \n            \n                03 Apr, 2023\n            \n            \n                Assignment 3\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    26 Apr, 2023\n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                09 Jan, 2023\n            \n            \n                Matroids and Greedy Algorithms - II\n                Proof of correctness of GreedyBasis\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    09 Jan, 2023\n            \n        \n                    \n            \n                11 Jan, 2023\n            \n            \n                Matroid Intersection - I\n                Matroid Intersection and Matroid Parity (Section 12.2.1) • Connections with Matchings • 3-Matroid Intersection is NP-complete (Theorem 12.6)\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    11 Jan, 2023\n            \n        \n                    \n            \n                16 Jan, 2023\n            \n            \n                Matroid Intersection - II\n                A polynomial time algorithm for Matroid Intersection\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    16 Jan, 2023\n            \n        \n                    \n            \n                18 Jan, 2023\n            \n            \n                Vertex Cover\n                Definition • Applications • Introduction to Approximation Algorithms • 2-approximation for Vertex Cover via maximal matchings\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    18 Jan, 2023\n            \n        \n                    \n            \n                23 Jan, 2023\n            \n            \n                Vertex Cover\n                Introduction to Linear Programming • 2-approximation via rounding • A simple randomized algorithm for Vertex Cover\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    23 Jan, 2023\n            \n        \n                    \n            \n                25 Jan, 2023\n            \n            \n                Vertex Cover\n                Introduction to Fixed-Parameter Tractability • An O(2^k) FPT algorithm by branching\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    25 Jan, 2023\n            \n        \n                    \n            \n                01 Feb, 2023\n            \n            \n                Vertex Cover\n                Introduction to Kernelization • A Quadratic Kernel for Vertex Cover based on degree reductions\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    01 Feb, 2023\n            \n        \n                    \n            \n                03 Feb, 2023\n            \n            \n                Vertex Cover\n                A Linear Kernel for Vertex Cover based on the LP formulation\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    03 Feb, 2023\n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                Set Cover\n                A Greedy Approximation Algorithm • A LP formulation\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    15 Apr, 2023\n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                Detour: Long Path\n                Principle of Inclusion-Exclusion for a poly-space single-exponential algorithm for HAMPATH • Color Coding for Longest Path\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    15 Apr, 2023\n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                An O(log n)-approximation via primal dual\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    15 Apr, 2023\n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                A 2-approximation algorithm using a different LP formulation\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    15 Apr, 2023\n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                Iterative Compression • An O*(3.619^k) algorithm for FVS on general graphs • A polynomial-time algorithm on graphs of maximum degree 3\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    15 Apr, 2023\n            \n        \n                    \n            \n                27 Mar, 2023\n            \n            \n                Lower Bounds\n                Introduction to NP-completeness • 3-Partition and friends • Multiprocessor Scheduling • Packing rectangles into a rectangle\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    27 Mar, 2023\n            \n        \n                    \n            \n                29 Mar, 2023\n            \n            \n                Lower Bounds\n                Reductions from 3-Partition\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    29 Mar, 2023\n            \n        \n                    \n            \n                03 Apr, 2023\n            \n            \n                Lower Bounds\n                SAT and Circuit SAT • CNF SAT • 3SAT • 3SAT-4 • Monotone 3SAT • Polynomial-time variants\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    03 Apr, 2023\n            \n        \n                    \n            \n                05 Apr, 2023\n            \n            \n                Lower Bounds\n                Schaefer's Dichotomy Theorem • 2-colorable perfect matching\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    05 Apr, 2023\n            \n        \n                    \n            \n                10 Apr, 2023\n            \n            \n                Lower Bounds\n                Parameterized Intractability • The W-hierarchy • Reductions from CLIQUE\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    10 Apr, 2023\n            \n        \n                    \n            \n                12 Apr, 2023\n            \n            \n                Lower Bounds\n                Kernel Lower Bounds • Composition and Distillation • Examples of compositions • Parameter preserving transformations\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    12 Apr, 2023\n            \n        \n                    \n            \n                17 Apr, 2023\n            \n            \n                Lower Bounds\n                The (Strong) Exponential Time Hypothesis • Sparsification Lemma • Implications for parameterized algorithms\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    17 Apr, 2023\n            \n        \n                    \n            \n                19 Apr, 2023\n            \n            \n                Lower Bounds\n                Reductions based on the ETH\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    19 Apr, 2023\n            \n        \n                    \n            \n                24 Apr, 2023\n            \n            \n                Lower Bounds\n                Inapproximability Introduction • NP optimization problems • PTAS, APX • Stronger notions of reductions that preserve approximability • APX-hardness of vertex cover\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    24 Apr, 2023\n            \n        \n                    \n            \n                26 Apr, 2023\n            \n            \n                Lower Bounds\n                Gap Inapproximability • Gap Problems • Gap-producing and gap-preserving reductions • PCP theorem • Unique Games Conjecture\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    26 Apr, 2023\n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    -\n            \n        \n                    \n            \n                TBA\n            \n            \n                Exam 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    -\n            \n        \n                    \n            \n                TBA\n            \n            \n                Exam 3\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    -\n            \n        \n\n\n\nNo matching items"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L02.html",
    "href": "courses/2023/01-CS614/quizzes/L02.html",
    "title": "CS614. Advanced Algorithms. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet G be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe U is the set of edges of G, i.e, E(G);\nthe family \\mathcal{F} of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet G be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe U is the set of edges of G, i.e, E(G);\nthe family \\mathcal{F} of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet G be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe U is the set of vertices of G, i.e, V(G);\nthe family \\mathcal{F} of independent sets is the collection of all subsets S of that are independent in G, i.e, the subgraph G[S] has no edges.\n\nIs this a matroid? Why or why not? Justify your answer."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L03.html",
    "href": "courses/2023/01-CS614/quizzes/L03.html",
    "title": "CS614. Advanced Algorithms. L03 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Partition Matroid\n\n\n\nShow that the exchange axiom holds for the Partition Matroid defined in class.\n\n\n\n\n\n\n\n\nProblem 2. Representing the Graphic Matroid\n\n\n\nThe graphic matroid of a graph G can be represented by the following matrix: we have one row for each vertex, and one column for each edge. The column for edge e has +1 in the row for one endpoint, -1 in the row for the other endpoint, and 0 elsewhere; the choice of which endpoint to give which sign is arbitrary.\nArgue that this is a valid representation (i.e, that the forests correspond to linearly independent columns and the subsets of edges that have cycles in them correspond to dependent columns)."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/A03.html",
    "href": "courses/2023/01-CS614/quizzes/A03.html",
    "title": "CS614. Advanced Algorithms. L03 Solutions.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Partition Matroid\n\n\n\nShow that the exchange axiom holds for the Partition Matroid defined in class.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLet (U := U_1 \\cup \\cdots \\cup U_\\ell, \\mathcal{F}) be a partition matroid with budgets a_1,\\ldots,a_\\ell.\nSuppose S, T \\subseteq U_1 \\cup \\cdots \\cup U_\\ell such that S,T \\in \\mathcal{F}, and |T| > |S|.\nThen, there exists at least one part U_i where |T \\cap U_i| > |S \\cap U_i|. Now let x \\in (T \\setminus S) \\cap U_i. Note that S \\cup \\{x\\} \\in \\mathcal{F} since:\n\\begin{equation*}\n    |S \\cap U_j| =\n    \\begin{cases}\n      < a_j & \\text{if } j = i,\\\\\n      \\leqslant a_j & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\nand therefore:\n\\begin{equation*}\n    |(S \\cup \\{x\\}) \\cap U_j| =\n    \\begin{cases}\n      |S \\cap U_i| + 1 \\leqslant a_j & \\text{if } j = i,\\\\\n      \\leqslant a_j & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\n\n\n\n\n\n\n\n\n\nProblem 2. Representing the Graphic Matroid\n\n\n\nThe graphic matroid of a graph G can be represented by the following matrix: we have one row for each vertex, and one column for each edge. The column for edge e has +1 in the row for one endpoint, -1 in the row for the other endpoint, and 0 elsewhere; the choice of which endpoint to give which sign is arbitrary.\nArgue that this is a valid representation (i.e, that the forests correspond to linearly independent columns and the subsets of edges that have cycles in them correspond to dependent columns).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSuppose we have a subset of edges that contains a cycle. For simplicity, suppose the cycle is given by:\n\\{pq, qr, rs, st\\}\nNow consider the column vectors c_p, c_q, c_r, c_s:\n\\begin{bmatrix}\nc_p & c_q & c_r & c_s\\\\\n1 & 0 & 0 & -1 \\\\\n-1 & 1 & 0 & 0 \\\\\n0 & -1 & -1 & 0 \\\\\n0 & 0 & 1 & 1\n\\end{bmatrix}\nNote that:\n1 \\cdot c_p + 1 \\cdot c_q + (-1) \\cdot c_r + 1 \\cdot c_s\nis a linear combination with constants (1,1,-1,1) that establish that these vectors are linearly dependent. In general, write down the columns in the order in which they appear on the cycle. If the first entry in the column is not +1, then multiply the column by -1 (except the last column, where we do the reverse: if the first entry is +1, then we multiply the column by -1). This way, we have a situation where every row contains exactly one +1 entry and one -1 entry, and the linear combination sums to 0.\nThis shows that dependent subsets of the matroid correspond to linearly dependent columns of M.\nTo see that independent subsets S \\subseteq E(G) correspond to linearly independent columns, consider the set of columns that correspond to S:\n\\{c_e ~|~ e \\in S\\    }\nSuppose, for the sake of contradiction, that there was some non-trivial linear combination of these columns that vanished, i.e, for non-empty subset T \\subseteq S, there exist constants \\{\\alpha_e\\}_{e \\in T} where:\n\\sum_{e \\in T} \\alpha_e c_e = 0\nBut now consider the subgraph consisting of the edges in T. Note that the minimum degree of T must be two (suppose u \\in T has degree one, and its unique neighbor is v: then consider the entry in the row corresponding to u in the column corresponding to the edge uv: this is non-zero and there is no cancelation possible in the sum above). However, a graph whose minimum degree is two cannot be acyclic, and this is a contradiction."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/A02.html",
    "href": "courses/2023/01-CS614/quizzes/A02.html",
    "title": "CS614. Advanced Algorithms. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet G be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe U is the set of edges of G, i.e, E(G);\nthe family \\mathcal{F} of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe circuits of the graphic matroid are the cycles of the graph G.\n\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet G be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe U is the set of edges of G, i.e, E(G);\nthe family \\mathcal{F} of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\{a,b,c,d\\} with the edges \\{ab, cd, ad\\}.\nThere are two matchings in this instance:\n\nM_1 := \\{ab,cd\\}\nM_2: \\{ad\\}\n\nHowever, although |M_1| > |M_2|, neither of the edges from M_1 can be added to M_2.\n\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet G be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe U is the set of vertices of G, i.e, V(G);\nthe family \\mathcal{F} of independent sets is the collection of all subsets S of that are independent in G, i.e, the subgraph G[S] has no edges.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\{a,b,c\\} with the edges \\{ab, ac\\}. There are two independent sets: S_1 := \\{b,c\\} and M_2: \\{a\\}, but neither of the vertices from S_1 can be added to S_2.\n\nIf the independent sets formed a matroid the problem of finding a maximum independent set would not be NP-complete. \n— Comment in class"
  },
  {
    "objectID": "courses/2023/01-NPTEL-CS30/index.html",
    "href": "courses/2023/01-NPTEL-CS30/index.html",
    "title": "NPTEL | CS82 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis is a course on algorithm design with a focus on issues of modeling and implementation. Each lecture will be focused entirely on one or two problems that reveal the use of a specific algorithmic technique. The techniques themselves are chosen to be in line with those covered in existing NPTEL courses on data structures and algorithms, so that students who complete those courses can find in this course a natural follow up.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is intended for anyone who wants to deepen their appreciation for algorithmic techniques that they have learned in a foundational course and/or would like to take a first step towards preparing for coding competitions such as the ICPC.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course assumes some background in the design and analysis of algorithm and a working familiarity with some programming language. Knowing C++ is useful but not required.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nBooks.\n\nAlgorithms by Jeff Erickson\nOpen Data Structures by Pat Morin\nAlgorithms Illuminated by Tim Roughgarden\nAlgorithm Design by J. Kleinberg and E. Tardos\nProblem Solving with Algorithms and Data Structures using C++ by Brad Miller, David Ranum, and Jan Pearce\nProblem Solving with Algorithms and Data Structures using Python by Brad Miller and David Ranum\nThink Data Structures by Allen B. Downey\nSome introductory notes on Design and Analysis of Algorithms (PDF) by Venkatesh Raman\nCompetitive Programming (4th Edition) by Steven Halim, Felix Halim, and Suhendry Effendy\nCompetitive Programmer’s Handbook by Antti Laaksonen\n\n\nOther NPTEL Courses.\n\nDSA with Python by Madhavan Mukund\nDSA by Naveen Garg\n\n\nYouTube Channels.\n\nCodechef\nErrichto\nWilliam Lin\nWilliam Fiset\n\n\nVisualizations.\n\nVisualgo\nOpenDSA\n\n\nBlogs.\n\nPetr Mitrichev\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures are pre-recorded. Any remote live sessions will be announced directly over email.\n\n\n\n\n\n\n\n\n\nTAs\n\n\n\n\n\nTBA\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nIf you have taken up this course through Swayam, then you would need to be formally enrolled in the course, and register for the certification exam to get a certificate of completion for the course.\nThe grading policy is as follows.\n\n12.5% of the final grade comes from the weekly quiz-based assignments. The best 8 out of 12 scores are considered.\n12.5% of the final grade comes from the weekly programming assignments, where the weekly score is the average of the programming assignments every week. Again, only the best 8 out of 12 are considered.\n75% of the final grade comes from the final exam, which is held at a physical location and whose format is similar to the weekly quizzes. Please note that there are no programming-based assessments in the final exam.\n\n Important Note. You will be eligible for a certificate only if average assignment score (quizzes and programming assignments combined) \\geq 10/25 and exam score \\geq 30/75. If one of the two criteria is not met, you will not get the certificate even if the final score is \\geq 40/100.\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nSign up for the course from here. (Note: enrollment ends on 30 Jan 2023!)\nAlso, you might find the following links useful:\n\nInvitation to the Discord Community\nGitHub repository of solutions to the problems discussed in the lectures\nLink to YouTube Playlist for the course\n\n\n\n\n\nLecturesAssignmentsExams\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n    \n    \n                    \n            \n                04 Jan, 2023\n            \n            \n                1. Ad-Hoc and Implementation\n                In this week, we explore some puzzle-based problems in competitive programming. These don’t require any specific algorithmic background, but instead rely on ad-hoc observations and often simple implementations.\n            \n            \n            \n            \n            \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\nThese are some practice assignments: the due date is simply the recommended completion deadline. There is no need to submit these assignments.\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                11 Jan, 2023\n            \n            \n                Assignment 1\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    01 Feb, 2023\n            \n        \n                    \n            \n                20 Feb, 2023\n            \n            \n                Assignment 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    20 Mar, 2023\n            \n        \n                    \n            \n                03 Apr, 2023\n            \n            \n                Assignment 3\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    26 Apr, 2023\n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    -\n            \n        \n                    \n            \n                TBA\n            \n            \n                Exam 2\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    -\n            \n        \n                    \n            \n                TBA\n            \n            \n                Exam 3\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    -\n            \n        \n\n\n\nNo matching items"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w02.html",
    "href": "courses/2023/01-ES242/labs/lab-w02.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Arrays and Linked Lists\n\n\n\n\n\n\n\n\n\nProblem 1. Sorting a List\n\n\n\n\n\nYou are given a permutation p1 of length n and a positive integer k \\leq n.\nIn one operation, you:\n\nChoose k distinct elements p_{i_1}, p_{i_2}, \\ldots, p_{i_k}.\nRemove them and then add them sorted in increasing order to the end of the permutation.\n\nFor example, if p=[2,5,1,3,4] and k=2 and you choose 5 and 3 as the elements for the operation, then:\n[2,5,1,3,4] \\rightarrow[2,1,4,3,5].\nFind the minimum number of operations needed to sort the permutation in increasing order. It can be proven that it is always possible to do so.\n\n\nThe first line contains a single integer t\\left(1 \\leq t \\leq 10^4\\right)- the number of test cases. The description of test cases follows.\nThe first line of each test case contains two integers n and k\\left(2 \\leq n \\leq 10^5, 1 \\leq k \\leq n\\right).\nThe second line of each test case contains n integers p_1, p_2, \\ldots, p_n\\left(1 \\leq p_i \\leq n\\right). It is guaranteed that p is a permutation.\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\n\n\nFor each test case output a single integer - the minimum number of operations needed to sort the permutation. It can be proven that it is always possible to do so.\n\n\n\nSample Input\n4\n3 2\n1 2 3\n3 1\n3 1 2\n4 2\n1 3 2 4\n4 2\n2 3 1 4\nSample Output\n0\n1\n1\n2\nExplanation\nIn the first test case, the permutation is already sorted.\nIn the second test case, you can choose element 3, and the permutation will become sorted as follows: [3,1,2]\\rightarrow[1,2,3].\nIn the third test case, you can choose elements 3 and 4, and the permutation will become sorted as follows: [1,3,2,4]\\rightarrow[1,2,3,4]\nIn the fourth test case, it can be shown that it is impossible to sort the permutation in one operation. However, if you choose elements 2 and 1 in the first operation, and choose elements 3 and 4 in the second operation, the permutation will become sorted as follows: [2,3,1,4]\\rightarrow[3,4,1,2]\\rightarrow[1,2,3,4].\n\n\n\n\n\n\n\n\n\n\nProblem 2. Sorting a List: Challenge the Solution\n\n\n\n\n\nConsider the following algorithm for solving the first problem:\ncurrent = 1\nanswer = 0\nwhile current < n:\n    if the array is sorted:\n        break\n    if current + k - 1 <= n:\n        Apply the operation to the elements [current, current+1, ..., current+k-1]\n    else:\n        Apply the operation to the elements [current, current+1, ..., n] \n    answer += 1\n    current += k\nreturn answer\nGive an example of input where this algorithm fails.\nName your input file tests.txt and make sure it has exactly two lines in the following format:\nN K\np1 p2 ... pn\nwhere the first line consists of two space-separated integers corresponding to N and K and the second line has n space-separated integers that form a permutation. You get a full score on this problem if your input is valid, and it causes the algorithm above to output a sub-optimal solution.\n\n\n\n\n\n\n\n\n\nProblem 3. Maintain a Network\n\n\n\n\n\nYou have just launched a social network for the IITGN community, called GYAN.\nQ operations have been performed since GYAN was launched. The i-th (1 \\leq i \\leq Q) operation is represented by three integers T_i, A_i, and B_i, whose meanings are as follows:\n\nIf T_i=1 : it means that user A_i follows user B_i. If user A_i is already following user B_i at the time of this operation, it does not make any change.\nIf T_i=2 : it means that user A_i unfollows user B_i. If user A_i is not following user B_i at the time of this operation, it does not make any change.\nIf T_i=3 : it means that you are asked to determine if users A_i and B_i are following each other. You need to print Yes if user A_i is following user B_i and user B_i is following user A_i, and No otherwise.\n\nWhen the service was launched, no users were following any users.\nPrint the correct answers for all operations such that T_i=3 in ascending order of i.\n\n\n\n2 \\leq N \\leq 10^4\n1 \\leq Q \\leq 2 \\times 10^5\nT_i=1,2,3(1 \\leq i \\leq Q)\n1 \\leq A_i \\leq N(1 \\leq i \\leq Q)\n1 \\leq B_i \\leq N(1 \\leq i \\leq Q)\nA_i \\neq B_i(1 \\leq i \\leq Q)\nThere exists i(1 \\leq i \\leq Q) such that T_i=3.\nAll values in the input are integers.\n\n\n\n\nThe input is given from Standard Input in the following format: \n\\begin{array}{lll}\nN & Q & \\\\\nT_1 & A_1 & B_1 \\\\\nT_2 & A_2 & B_2 \\\\\n\\vdots & & \\\\\nT_Q & A_Q & B_Q\n\\end{array}\n\n\n\n\nPrint X lines, where X is the number of i ’s (1 \\leq i \\leq Q) such that T_i=3. The j-th (1 \\leq j \\leq X) line should contain the answer to the j-th operation such that T_i=3.\n\n\n\nSample Input\n3 9\n1 1 2\n3 1 2\n1 2 1\n3 1 2\n1 2 3\n1 3 2\n3 1 3\n2 1 2\n3 1 2\nSample Output\nNo\nYes\nNo\nNo\nSample Input\n2 8\n1 1 2\n1 2 1\n3 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n3 1 2\nSample Output\nYes\nNo\nSample Input\n10 30\n3 1 6\n3 5 4\n1 6 1\n3 1 7\n3 8 4\n1 1 6\n2 4 3\n1 6 5\n1 5 6\n1 1 8\n1 8 1\n2 3 10\n1 7 6\n3 5 6\n1 6 7\n3 6 7\n1 9 5\n3 8 6\n3 3 8\n2 6 9\n1 7 1\n3 10 8\n2 9 2\n1 10 9\n2 6 10\n2 6 8\n3 1 6\n3 1 8\n2 8 5\n1 9 10\nSample Output\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nYes\n\n\n\n\n\n\n\n\n\n\nProblem 4. Stable Matchings\n\n\n\n\n\nThere are n men and n women. Each woman ranks all men in order of her preference (her first choice, her second choice, and so on). Similarly, each man sorts all women according to his preference. The goal is to arrange n marriages in such a way that if a man m prefers some woman w more than his wife, and w prefers m more then her husband a new marriage occurs between w and m. If w prefers her husband more, then she stays married to him. This problem always has a solution and your task is to find one.\n\n\nThe first line contains a positive integer t<=100 indicating the number of test cases. Each test case is an instance of the stable marriage problem defined above. The first line of each test case is a positive integer n<=500 (the number of marriages to find). The next n lines are the woman’s preferences: i-th line contains the number i (which means that this is the list given by the ith woman) and the numbers of men (the first choice of ith woman, the second choice,…). Then, the men’s preferences follow in the same format.\n\n\n\nFor each test case print n lines, where each line contains two numbers m and w, which means that the man number m and the woman number w should get married.\n\n\n\nSample Input\n2\n4\n1 4 3 1 2\n2 2 1 3 4\n3 1 3 4 2\n4 4 3 1 2\n1 3 2 4 1\n2 2 3 1 4\n3 3 1 2 4\n4 3 2 4 1\n7\n1 3 4 2 1 6 7 5\n2 6 4 2 3 5 1 7\n3 6 3 5 7 2 4 1\n4 1 6 3 2 4 7 5\n5 1 6 5 3 4 7 2\n6 1 7 3 4 5 6 2\n7 5 6 2 4 3 7 1\n1 4 5 3 7 2 6 1\n2 5 6 4 7 3 2 1\n3 1 6 5 4 3 7 2\n4 3 5 6 7 2 4 1\n5 1 7 6 4 3 5 2\n6 6 3 7 5 2 4 1\n7 1 7 4 2 6 5 3\nSample Output\n1 3\n2 2\n3 1\n4 4\n1 4\n2 5\n3 1\n4 3\n5 7\n6 6\n7 2\n\n\n\n\n\n\n\n\n\n\nProblem 5. Linked Lists\n\n\n\n\n\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head->data   = 10;\n  middle->data = 20;\n  last->data   = 30;\n\n  //connecting each nodes. head->middle->last\n  head->next   = middle;\n  middle->next = last;\n  last->next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d->\",temp->data);\n      temp = temp->next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, p_1, \\ldots, p_n.\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input i, output the number in the linked list that comes before the number i.\n\n\n\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\n\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1."
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w01.html",
    "href": "courses/2023/01-ES242/labs/lab-w01.html",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Practice problems to get used to C syntax.\n\n\n\nLearn C syntax:\n\nInteractive Tutorial\nCodeacademy Lessons\n\nMore practice problems:\n\nTry the first problem in any Codechef/Codeforces contest.\n\n\n\n\n\n\n\nProblem 1. CountDown\n\n\n\n\n\nPrint all non-negative integers less than or equal to N in descending order.\n\n\n\n1 \\leq N \\leq 100\nN is an integer.\n\n\n\n\nThe input is given from Standard Input in the following format:\nN\n\n\n\nPrint X lines, where X is the number of non-negative integers less than or equal to N. For each i = 1, 2, \\ldots, X, the i-th line should contain the i-th greatest non-negative integer less than or equal to N.\n\n\n\nSample Input\n22\nExpected Output\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Life Goal\n\n\n\n\n\n\nYou are standing at the origin of a number line. You want to make it to a treasure chest at coordinate X.\nThere is a guard at coordinate Y, who will block you if you encounter him on the way.\nHowever, there is a magic phrase written on a paper which is kept at coordinate Z. If you pick up that paper, then you can whisper the magic phrase to the guard, who will then let you go.\nDetermine whether you can reach the goal. If you can, find the minimum total distance you need to travel to do so.\n\n\n\n−1000 \\leq X,Y,Z \\leq 1000\nX, Y, Z are distinct, and none of them is 0.\nAll values in the input are integers.\n\n\n\n\nThe input is given from Standard Input in the following format:\nX Y Z \n\n\n\nIf you can reach the goal, print the minimum total distance he needs to travel to do so. If he cannot, print -1 instead.\n\n\n\nSample Input\n10 -10 1\nSample Output\n10\nYou can go straight to the goal.\nSample Input\n20 10 -10\nSample Output\n40\nThe goal is beyond the guard. You can get there by first picking up the magic phrase and then getting past the guard.\nSample Input\n100 1 1000\nSample Output\n-1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\n\n\nWrite a simulation for the Game of Trust when played by an always cheat player for R rounds.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value R and the second line is R space-separated integers. The i-th integer on the second line is 1 if the other player cooperated in the i-th round, and 0 otherwise.\n\n\n\nFor each test case, print two space-separated integers on a new line. The first integer is the total number of coins earned by the always cheat player, while the second integer is the total number of coins earned by the other player. Note that you have to output the net balance. DO NOT output anything else!\n\n\n\nSample Input\n1\n5\n1 1 1 0 1\nExpected Output\n12 -4\n\n\n\n\n\n\n\n\n\n\nProblem 4. Rock Papers Scissors\n\n\n\n\n\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nYou are preparing for your first big RPS match. Someone has tipped you off with a strategy guide against your opponent on the first match, which consists of many rounds. The strategy guide can be interpreted as follows:\n\nThe first column of the i-th row is what your opponent is going to play in the i-th round: A for Rock, B for Paper, and C for Scissors.\nThe second column of the i-th row is what you should play in response in the i-th round: X for Rock, Y for Paper, and Z for Scissors.\n\nWinning every time would be suspicious, so the responses must have been carefully chosen.\nYour total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nYour task is to calculate the score you would get if you were to follow the strategy guide.\n\n\nThe first line of the input is a number N, which is the total number of rounds. The next N lines contain two space separated characters. The first character is one of A or B or C, and the second character is one of X or Y or Z.\n\n\n\nThe output shound be a single integer, your total score across all rounds based on the strategy guide.\n\n\n\nSample Input\n3\nA Y\nB X\nC Z\nExpected Output\n15\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n\nIn this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\n\n\n\n\n\n\n\n\n\nProblem 5. Finding the Coefficient\n\n\n\n\n\np(x) is a polynomial whose coefficients are either 0 or 1.\nYou are given the value of p(2) and a number d.\nReturn YES if the coefficient of x^d in p(x) is 1 and NO otherwise.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(2) and the second line is the value of d.\nIt is guaranteed that p(2) will be at most 10^9 and d will be at most the degree of p(x).\n\n\n\nFor each test case, print a single integer on a new line, which is YES or NO depending on if the coefficient of x^d in p(x) is 1 or 0. DO NOT output anything else!\n\n\n\nSample Input\n6\n45\n0\n45\n1\n45\n2\n45\n3\n45\n4\n45\n5\nExpected Output\nYES\nNO\nYES\nYES\nNO\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 6. Validating a Self-Working Card Trick [Optional]\n\n\n\n\n\nWatch this video and write a program to validate the mechanics of the card trick shown.\nIn other words, your program should take as input a sequence of cards, with the promise that the number of red cards is equal to the number of black cards, and then “perform” the trick as shown in the video, and verify that the final claim about the number of red cards in the red pile being equal to the number of black cards in the black pile is, in fact, true.\n\n\n\n\n\n\n\n\n\nProblem 7. Stable Marriage [Optional]\n\n\n\n\n\nImplement the Stable Marriage algorithm discussed in class. You can practice on this Codechef problem."
  },
  {
    "objectID": "courses/2023/01-ES242/index.html",
    "href": "courses/2023/01-ES242/index.html",
    "title": "ES 242 | Aug-Nov 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nData structures give us principled ways to stow away information. It’s important to do this nicely: and what that means is to work backwards from what you want to do with your information, so that your storage style is optimized for the specific way in which you need to work with your data.\nFor example, the notes you might be taking in this class is a kind of information.\nIf you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\nThroughout this course, we will understand such trade-offs in several scenarios.\n\n\nsequential data (arrays, dynamic arrays, linked lists and variants) • dequeues, stacks, queues • graph representations • graph traversals (BFS/DFS) and applications (connected components, bipartiteness, topological sort) • searching and sorting • heaps • BSTs • (2,3)-trees\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is aimed at undergraduates in their first or second year, as a first introduction to data structures and algorithms.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is largely self-contained. Working familiarity with a programming language will be useful for the labs, where solutions are expected to be written out in C.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nOpen Data Structures by Pat Morin\nLecture notes by John Bullinaria\nData Structures Using C & C++ by Aaron M. Tenebaum; Moshe J. Augenstein; Yedidyah Lansam\nData Structures and Algorithms by A. Aho, J. Hopcroft, J. Ullman\nAlgorithms by Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures: Tuesdays and Thursdays, 9PM - 10:30PM\nLab: Fridays, 9PM - 10:30PM\nVenue: 1/102 (all sessions)\nNote: Please bring your laptops to all classes.\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\nBy appointment.\n\n\n\n\nYash More\nGaurav Viramgami\nReuben Devanesan\nXhitij\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade. The first and last exams will be pen-and-paper exams, while the second exam will be a lab exam.\nLabs for Weeks 1 — 4 count for two points each on an all-or-none basis. The seven problems in labs for Weeks 6,8 and 10 have seven problems worth 2 points each. Labs for Weeks 12 and 13 will count for two points each on an all-or-none basis. The total number of points you can earn from quizzes and assignments combined is capped at 20.\nQuizzes 2, 3, and 4 count for 2 points each. Assignments 1, 2, and 3 count for 7 points each. The total number of points you can earn from quizzes and assignments combined is capped at 20.\nThere is no mandatory attendance requirement for this course, although it is strongly recommended that you attend classes, labs, and the ADH sessions.\n\n\n\n\n\n\n\n\n\n\nRegistration & Logistics\n\n\n\n\n\nIf you are at IIT Gandhinagar and would like to take up this course for credit, please fill up this form by midnight on the 30th of December to indicate your interest. \nAll weekly quizzes, labs, and exams will be managed via Gradescope. You can sign up using the entry code G2ZG3X.\nCourse announcements will be posted on this page. They will also be mirrored to this broadcast-only Whatsapp group.\nYou are welcome to post any comments/questions/feedback related to the course in the discussions tab of this page.\n\n\n\nNote: contents being actively updated at the time of this writing.\n\nLecturesLabsQuizzesExamsAnnouncementsDiscussions\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n    \n    \n                    \n            \n                03 Jan, 2023\n            \n            \n                1. Introduction to Data Structures [W1]\n                Data Structures - philosophy and examples • Representing games\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                05 Jan, 2023\n            \n            \n                2. Stable Marriages [W1]\n                The Stable Marriage Problem • Gale-Shapley Algorithm\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                10 Jan, 2023\n            \n            \n                3. Representing Sequential Data [W2]\n                Arrays • Lists • Implementing the Gale-Shapley Algorithm\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                12 Jan, 2023\n            \n            \n                4. Representing Graphs [W2]\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                17 Jan, 2023\n            \n            \n                5. Dequeues [W3]\n                The Gilbreath Shuffle • Properties of the shuffle\n            \n            \n                    \n            \n            \n            \n            \n            \n        \n                    \n            \n                19 Jan, 2023\n            \n            \n                6. Dequeues [W3]\n                Queues and Stacks as special cases of Dequeues\n            \n            \n                    \n            \n            \n            \n            \n            \n        \n                    \n            \n                24 Jan, 2023\n            \n            \n                7. Euler Tours [W4]\n                Euler Tour Demonstration • The Bridges of Königsberg\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                31 Jan, 2023\n            \n            \n                8. Euler Tours [W5]\n                Computing Euler Tours • Hierholzer's algorithm\n            \n            \n                    \n            \n            \n                    \n            \n            \n            \n        \n                    \n            \n                02 Feb, 2023\n            \n            \n                9. Recap Class [W5]\n                Review of topics covered so far.\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                09 Feb, 2023\n            \n            \n                10. Navigating Graphs (BFS) [W6]\n                Breadth-First Search • Correctness • Analysis of Running Time\n            \n            \n                    \n            \n            \n            \n            \n            \n        \n                    \n            \n                14 Feb, 2023\n            \n            \n                11. BFS Applications [W7]\n                Shortest Paths • Pseudopolynomial algorithm for weighted graphs\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                16 Feb, 2023\n            \n            \n                12. Exam [W7]\n                Syllabus: representations, arrays, lists, stacks, queues, dequeues, Euler tours, stable marriages\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                21 Feb, 2023\n            \n            \n                13. Navigating Graphs (DFS) - I [W8]\n                Depth-First Search • Implementation with Stacks\n            \n            \n                    \n            \n            \n            \n            \n            \n        \n                    \n            \n                23 Feb, 2023\n            \n            \n                14. Navigating Graphs (DFS) - II [W8]\n                Depth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n            \n            \n                    \n            \n            \n            \n            \n            \n        \n                    \n            \n                03 Mar, 2023\n            \n            \n                15. BFS and DFS Applications [W9]\n                Testing Bipartiteness • Topological Sort\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                16 Mar, 2023\n            \n            \n                16. Sorting Algorithms [W10]\n                Selection Sort • Properties of sorting algorithms\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                21 Mar, 2023\n            \n            \n                17. Asymptotics [W10]\n                Comparing Algorithms by Performance • Big-O Notation\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                28 Mar, 2023\n            \n            \n                18. Heaps [W12]\n                Supporting only Insert and FindMin • The challenge of ExtractMin • The Heap Property • Insert • FindMin • ExtractMin\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                06 Apr, 2023\n            \n            \n                19. Heaps [W13]\n                Representing Heaps with Arrays • Analysis: Heapify in Linear Time\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                11 Apr, 2023\n            \n            \n                20. Trees [W14]\n                Rooted Trees • Inorder, Preorder, and Postorder Traversals\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                13 Apr, 2023\n            \n            \n                21. Search [W14]\n                Binary Search • Ternary Search\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                18 Apr, 2023\n            \n            \n                22. Balanced Binary Search Trees [W15]\n                Introduction to BSTs • (2,3)-Trees\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                20 Apr, 2023\n            \n            \n                23. Balanced Binary Search Trees [W15]\n                Insertion in (2,3)-Trees • Analysis of Height\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                25 Apr, 2023\n            \n            \n                24. Balanced Binary Search Trees [W16]\n                Deletion in (2,3)-Trees\n            \n            \n            \n            \n            \n            \n            \n        \n                    \n            \n                27 Apr, 2023\n            \n            \n                25. Recap [W16]\n                Review of topics covered so far.\n            \n            \n            \n            \n            \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                06 Jan, 2023\n            \n            \n                W01. Introduction to C\n                CountDown •  Life Goal •  Game of Trust •  Rock Papers Scissors •  Finding the Coefficient •  Validating a Self-Working Card Trick [Optional] •  Stable Marriage [Optional]\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                13 Jan, 2023\n            \n            \n                W02. Lists and Arrays\n                Sorting a List • Sorting a List: Challenge the Solution • Maintain a Network • Stable Matchings\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                20 Jan, 2023\n            \n            \n                W03. The Cardstack\n                Linked Lists • Parentheses • Challenge the Parentheses Solution • Print Alternate Cards\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                27 Jan, 2023\n            \n            \n                W04. Graph Representations and Euler Tours\n                Adjacency Matrix • Adjacency List • Edge List • Sanity Check • Which Way is the Highway? [Optional] • Edge Orientation Puzzle [Optional]\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                03 Feb, 2023\n            \n            \n                W05. Recap Lab\n                Reviewed unsolved and practice problems.\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                10 Feb, 2023\n            \n            \n                W06. Navigating Graphs (BFS)\n                BFS Implementation • Unique Servers\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                17 Feb, 2023\n            \n            \n                W07. No Lab\n                Classes Suspended\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                24 Feb, 2023\n            \n            \n                W08. Navigating Graphs (DFS)\n                DFS Implementation • Is it a DAG?\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                28 Feb, 2023\n            \n            \n                W09. BFS Implementation\n                BFS Implementation Recap\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                02 Mar, 2023\n            \n            \n                W09. DFS Implementation\n                DFS Implementation Recap\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                17 Mar, 2023\n            \n            \n                W10. BFS/DFS Practice Problems\n                Make It Happen • Switching Lines • Prolonged Vacation\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                31 Mar, 2023\n            \n            \n                W12. Sorting Algorithms\n                TBA\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                07 Apr, 2023\n            \n            \n                W13. Heaps\n                TBA\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                14 Apr, 2023\n            \n            \n                W14. Binary Search Trees - I\n                TBA\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n                21 Apr, 2023\n            \n            \n                W15. Binary Search Trees - II\n                TBA\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuizzes will be administered online and in the classroom via Gradescope. If a quiz is submitted for evaluation in absence, then it amounts to a violation of the honor code and will result in a disqualification from the course.\nUpdate: The quizzes in the course have been discontinued, and will be replaced with assignments. There will be 12 assignments worth 2 points each that will be made available in due course.\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                05 Jan, 2023\n            \n            \n                Quiz 01\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    05 Jan, 2023\n            \n        \n                    \n            \n                12 Jan, 2023\n            \n            \n                Quiz 02\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    12 Jan, 2023\n            \n        \n                    \n            \n                19 Jan, 2023\n            \n            \n                Quiz 03\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    19 Jan, 2023\n            \n        \n                    \n            \n                24 Jan, 2023\n            \n            \n                Quiz 04\n                \n            \n            \n                    \n                \n            \n                    \n                \n            \n                    24 Jan, 2023\n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problem Set\n        Solutions\n        Due\n    \n    \n                    \n            \n                16 Feb, 2023\n            \n            \n                Exam 1\n                Syllabus: representations, arrays, lists, stacks, queues, dequeues, Euler tours, stable marriages\n            \n            \n                    \n                \n            \n                    \n                \n            \n                    16 Feb, 2023\n            \n        \n                    \n            \n            \n            \n                Exam 2 (Lab)\n                Syllabus: arrays, lists, stacks, queues, graphs, BFS/DFS\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n                    \n            \n            \n            \n                Exam 3\n                Syllabus: BFS/DFS, heaps, sorting algorithms, tree traversals, 2,3-trees\n            \n            \n                    \n                \n            \n                    \n                \n            \n            \n        \n\n\n\nNo matching items\n\n\n\n\n02/17. Solutions to Exam 1 are now available.\n02/03. Lecture slides and notes up to date for the lectures so far.\n01/25. Solutions to Quiz 04 are now available.\n01/20. Solutions to Quiz 03 are now available.\n01/13. Solutions to Quiz 02 are now available.\n01/11. Materials for the first two weeks (i.e, notes and slides the first four lectures) are now available.\n01/10. Solutions to Quiz 01 are now available.\n01/01. The timings are now fixed. The lectures will be held on Tuesdays and Thursdays, 9PM - 10:30PM while the lab will be during Fridays, 9PM - 10:30PM. The venue for all sessions is AB 1/102. Please bring your laptops to all sessions.\n29/12. The course is open for enrolments and will be available from IMS soon. The timings are TBD. Please fill up this form to indicate your interest in joining the course."
  },
  {
    "objectID": "courses/2023/01-ES242/labquiz2.html",
    "href": "courses/2023/01-ES242/labquiz2.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Unity Project\n\n\n\n\n\nThere are n people partaking in a project X. The capability value of the ith person is denoted as C[i]. The manager of the project has proposed the following algorithm to calculate the capability of the group (to undertake project X):\nOn each turn, choose two people, x and y, with capabilities C[x] and C[y] respectively (with C[x] <= C[y]). A unity procedure is followed:\n\nIf the two have same capability value, remove both.\nElse, person x is removed, and capability of person y changes to C[y]-C[x]\n\nIt is obvious that at the end at most one person shall remain. The capability value of the person is stated as the capability value of the group. If no person remains, capability value of the group is taken as 0.\nYou have the find the minimum possible capability value of the group.\n\n\n\n\n\n\nRemark\n\n\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing C[]\n\n\n\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n\nSample Input 1\n6\n2 7 4 1 8 1\nSample Output 1\n1\nSample Input 2\n10\n1 3 5 4 6 13 10 9 8 15 16\nSample Output 2\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Connect the City\n\n\n\n\n\nBangalore has n locations, and m bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\nYour task is to find out the minimum number of roads required.\n\n\nThe first input line has two integers n and m: the number of cities and roads. The cities are numbered 1,2,...,n.\nAfter that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities.\nA road always connects two different cities, and there is at most one road between any two cities.\n\n\n\nPrint an integer k: the number of required roads.\n\n\n\n\n1 \\leq n \\leq 10^5\n1 \\leq m \\leq 2⋅10^5\n1 \\leq a,b \\leq n\n\n\n\n\nSample Input\n4 2\n1 2\n3 4\nSample Output\n1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Spreading News\n\n\n\n\n\nAfter all the dropouts, there are n people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student i to start spread a rumor, you have to pay them in by buying c[i] samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\nTake a look at the notes if you think you haven’t understood the problem completely.\n\n\nThe first line contains two integer numbers n and m (1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5) — the number of students in the class and the number of pairs of friends.\nThe second line contains n integer numbers c[i] –— the amount of samosas i-th student asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x[i], y[i]) which represent that characters x[i] and y[i] are friends (1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i]). It is guaranteed that each pair is listed at most once.\n\n\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n\n\nSample Input\n5 2\n2 5 3 4 8\n1 4\n4 5\nSample Output\n10\nSample Input\n10 0\n1 2 3 4 5 6 7 8 9 10\nSample Output\n55\nNote\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Predicting Possibility\n\n\n\n\n\nYou are playing a decision making game where the output can be either 1 or 0.\nGiven a N X N matrix, the objective of the game is to predict if it’s possible to reach from a given source to a destination in less than or equal to k moves.\nSome constraints are as follows:\n\nYou can only move to adjacent positions in 1 move.\nYou can only move diagonally across the matrix.\n\nGiven the value of n, and the maximum moves k, determine if you can fulfill the requirement: can you reach from source to destination in less than k moves?\n\n\nThe first line contains an integer n.\nThe second line contains an integer k, denoting the maximum number of moves you can make. \nThe third line contains two space-separated integers, i and j. An entry i j denotes i as the x-coordinate and j as y-coordinate of the source location.\nThe fourth line contains two space-separated integers, m and n. An entry m n denotes m as the x-coordinate and n as y-coordinate of the destination.\n\n\n\nReturn 1 if you can reach from source to destination in less than k moves. Else, return 0.\n\n\n\nSample Input 1\n4\n3\n0 0\n3 1\nSample Output 1\n1\n\n\n\n\n\n\n\n\n\n\nProblem 5. Can You Register?\n\n\n\n\n\nYou are a student in a university U.\nYou can only register in a certain program A, if the following condition is met:\nYou have registered for all courses with the course IDs [0,1... num_courses-1]\nIf there exists at least one i in range [0,1... num_courses-1] for which you cannot register, then you cannot register from the program.\nSome constraints are as follows:\n\nSome courses may have prerequisite courses. For example if i is a prerequisite of course ID j, then you must register for i before j\nYou can not repeat a course, you can only register for a course one.\n\nGiven the value of num_courses, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for A (can you register for all the courses in range num_courses)?\n\n\nThe first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i.\n\n\n\nReturn YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "courses/2023/01-ES242/midsem-questions.html",
    "href": "courses/2023/01-ES242/midsem-questions.html",
    "title": "ES242. Data Structures and Algorithms I. MidSem Questions",
    "section": "",
    "text": "Problem 1. A Boastful Cop vs a Clever Robber\n\n\n\n\n\nA robber is trying to escape a cop on an undirected graph G. In the beginning, the cop is at a vertex s and the robber is at a vertex t. (You may assume that s and t are distinct.) They take turns making moves, and each knows the location of the other at all times. A move (by either of them) consists of either staying at the current vertex or moving to a neighbouring one.\nThe cop is boastful, so he announces his moves before making them. Specifically:\n\nbefore anyone makes a move, the cop’s first move is announced - so the robber knows where the cop is headed.\nThen, the robber makes an actual move.\nAfter this, each time the cop moves, he must respect the previous announcement (i.e, move to the previously announced vertex), and then decide his next move and announce it.\nThe robber hears the announcements, so she always knows the cop’s next move before making her own. She makes her move.\n\nIf the cop and the robber are at the same vertex after either of them moves, then the robber is caught. Otherwise, the chase is on!\nThe robber chooses her moves optimally to escape. If she cannot escape, she chooses her moves to maximize the total number of moves until she is caught. The cop chooses his moves optimally to try to catch the robber in as few total moves as possible.\nGiven the graph’s layout and the initial locations of both the cop and the robber, find out whether robber will be caught by the cop and, if so, in how many moves. We say that the game is won by the robber if she’s never caught, and by the cop otherwise.\nIn the figures below, the square vertex depicts the initial location of the robber, and the star depicts the initial location of the cop. Indicate what happens under optimal play. If you choose that the cop wins, indicate how many moves the game lasts assuming optimal play. Each move made by each player counts as a distinct move.\n\n[2 marks] Who wins? __________________\n[2 marks] Who wins? __________________\n[2 marks] If the robber starts on a vertex that is a part of a cycle, then which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is equal to the length of the cycle.\n⭕️ The cop wins this game and the number of moves is twice the length of the cycle.\n⭕️ The cop wins this game and the number of moves depends on the initial distance between the cop and the robber.\n⭕️ The outcome depends on where the cop starts.\n[3 marks] Suppose the game is being played on a path (i.e, a graph with vertices u_1, \\ldots, u_n and edges (u_1,u_2), (u_2, u_3), \\cdots, (u_{n-1},u_n). Suppose the cop starts at u_1 and the robber starts at u_n. Which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is n.\n⭕️ The cop wins this game and the number of moves is 2n.\n⭕️ The cop wins this game and the number of moves is 2n-1.\n⭕️ The cop wins this game and the number of moves is 2(n-1).\n[3 marks] Suppose the graph G has a cycle on the vertices vv_1, v_2, \\ldots, v_kand these are the only vertices that belong to any cycle in G. The robber is initially on a vertex uuand the closest vertex on the cycle is vv_1 via the path ((u,p),(p,q),(q,v_1) The cop is initially on a vertex wwand the closest vertex on the cycle is vv_n via the path ((w,r),(r,v_n) Which of the following statements is true? Assume there are no other vertices in the graph G.\n⭕️ The robber wins this game.\n⭕️ The cop wins this game.\nExplain your answer: if you think the robber wins the game, explain how the robber will evade the cop forever, and if you think the cop wins this game, explain what is the sequence of moves in an optimal game. (You can use the space on the next page.)\n\n\n\n\n\n\n\n\n\n\nProblem 2. Cheating the Stable Marriage Algorithm\n\n\n\n\n\nConsider a stable marriage instance with A,B,C being the men and X,Y,Z being the women. The input is the following:\n\n[2 marks] What is the output of the stable matching algorithm for this instance? Assume that the men are proposing.\n[3 marks] Consider again the algorithm where men are proposing. One of the women can misreport her preferences to get a better outcome from this algorithm. Identify the woman and explain what preference she can submit instead of her true preference to improve the output from her perspective.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Preserving Fixed-Points while Sorting\n\n\n\n\n\n[5 marks] When an array is to be sorted, it may happen that some data values start out being in the same position where they should end up. For example, in the array which is originally:\n45,-4,32,0\nthe 32 is right where it will be in the final sorted output:\n-4,0,32,45\nBut as a particular sorting algorithm operates, it might (depending on the algorithm) move such an element out of the position where it belongs and move it back eventually.\nLet’s say that a sorting algorithm respects fixedpoints if it never moves an element that is in its proper position, on any input.\nConsider the following methods of sorting:\nSelection sort. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\nEg: 4 3 2 1 → 1 3 2 4 → 1 2 3 4\nInsertion sort. Insertion sort iterates over the array, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\nEg: 4 3 2 1 → 3 4 2 1 → 2 3 4 1 → 1 2 3 4\nWhich of the following statements are true?\n⭕️ Insertion sort does not respect fixedpoints but selection sort does.\n⭕️ Selection sort does not respect fixedpoints but insertion sort does.\n⭕️ Neither insertion sort nor selection sort respects fixed points.\n⭕️ Both insertion sort and selection sort respect fixed points.\nJustify your answer. If you claim that a particular sorting method does not respect fixed points, then give an example. If you claim that an algorithm does respect fixed points, argue why.\n\n\n\n\n\n\n\n\n\nProblem 4. Eliminating Jealousy\n\n\n\n\n\nYou have distributed M objects among N children. The set of objects given to a child is called his or her bundle. Each child has a specific value for their bundle: let us say child k has value v_k for their bundle. Each child also has a value for all the other bundles: so let us say that child k has value v_{k,\\ell} for the bundle that was given to child \\ell.\nWe say that child a is jealous of child b if v_{a,b} > v_a, i.e, s/he values the bundle given to b more than the bundle that s/he has.\nConsider the following directed graph G. Introduce one vertex for every child, and add an edge from a to b if a is jealous of b.\n\n[2 marks] Suppose G has a directed cycle u_1 \\rightarrow u_2 \\rightarrow \\cdots \\rightarrow u_q \\rightarrow u_1. Describe a way to reassign the bundles (without changing them) so that with the new assignment, all the edges in the cycle disappear (i.e, there is no jealousy between u_1 and u_2, between u_2 and u_3, and so on, with respect to the new assignment). Explain your answer on the next page.\n[1 marks] Suppose G has no directed cycles. Is it true that there is a child who is not jealous of anyone?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n[1 marks] Suppose G has no directed cycles. Is it true that there is a child who is nobody is jealous of?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n\n\n\n\n\n\n\n\n\n\nProblem 5. Make Strongly Connected\n\n\n\n\n\n[2 marks] In the graph below, what is the smallest number of edges you need to add to make the graph strongly connected? Recall that a strongly connected graph is one where there is a path from u to v for any pair of vertices u and v.\n\n\n\n\n\n\n\n\n\nProblem 6. Counting Gifts\n\n\n\n\n\n[2 marks] The following is true for n guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any groups of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nProve that the total number of gifts given is at most 6n.\nHint: what can you say about the maximum degree of this graph?"
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/q01.html",
    "href": "courses/2023/01-ES242/quizzes/q01.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01",
    "section": "",
    "text": "Issued: 5 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The 15-Puzzle\n\n\n\nSuppose you are implementing the 15 puzzle game:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to rearrange the tiles and place them in increasing numerical order.\n\nHere’s an example configuration:\n\n\n\nAn Example 15-Puzzle Instance\n\n\nYou decide to record the game state as a list of length 16, with elements between 0-15 (0 denotes the empty cell), using the following convention:\n\nthe first four elements contain the numbers in the first row of the board,\nthe fifth-eighth elements contain the numbers in the second row of the board,\nthe ninth-twelfth elements contain the numbers in the third row of the board, and\nthe thirteenth-sixteenth element csontain the numbers in the fourth row of the board.\n\nSuppose you generalise this to a game involving a N \\times N board, using a list of size N^2. The user indicates how they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to N\nproportional to N^2\nconstant\n\n\n\n\n\n\n\n\n\nProblem 2. 2048\n\n\n\nSuppose you are implementing the 2048 game:\n\n2048 is played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.\n\nFeel free to play the game at the link above to get a feel for it.\nSuppose you are implementing a version of 2048 on a N \\times N board, using a list of size N^2. As in the previous question, the list carries information about the state of the board: the first N elements correspond to the numbers in the first row, and so on. The user indicates in which direction they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to N\nproportional to N^2\nconstant\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\nDescribe how to define a set of marriage preferences among n men and n women such that there is exactly one stable marriage possible."
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/q02.html",
    "href": "courses/2023/01-ES242/quizzes/q02.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 02",
    "section": "",
    "text": "Issued: 12 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Doubly Linked Lists\n\n\n\nIf p is the address of a node in a doubly linked list L, then:\n\nnext(p) is the address of the next node in the linked list\nprev(p) is the address of the previous node in the linked list\ndata(p) is the information contained in the the node at address p\n\nNote that:\n\nif p is the address of the first node in L then prev(p) is NULL.\nif p is the address of the last node in L then next(p) is NULL.\n\nAlso, data(p), next(p) and prev(p) returns a sensible value only if p is not NULL, otherwise they are UNDEFINED.\nIf L is a linked list with five elements and p is the address of the third element, then what does next(prev(next(next(p)))) represent?\n\nAddress of the 1st element\nAddress of the 2nd element\nAddress of the 3rd element\nAddress of the 4th element\nAddress of the 5th element\nUNDEFINED\n\nIf L is a linked list with five elements and p is the address of the third element, then what does data(prev(prev(next(p)))) represent?\n\nData of the 1st element\nData of the 2nd element\nData of the 3rd element\nData of the 4th element\nData of the 5th element\nUNDEFINED\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency Lists\n\n\n\nSuppose A is the adjacency matrix of a simple undirected graph G = (V,E) with n vertices given by \\{1,2,\\ldots,n\\}, that is,\n\n    A[i,j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{if } (i,j) \\notin E.\n    \\end{cases}\n\nNote that A[i,i] = 0 for all i \\in \\{1,2,\\ldots,n\\} since G is simple.\nSuppose (i,j) \\in E for some i,j \\in \\{1,2,\\ldots,n\\}, i \\neq j. Let k denote the number of vertices that are adjacent to both i and j.\nWhat is the value of A^2[i,j]?\n\n0\n1\nk\nk+1\n\nSuppose (i,j) \\notin E for some i,j \\in \\{1,2,\\ldots,n\\}, i \\neq j. Let k denote the number of vertices that are adjacent to both i and j.\nWhat is the value of A^2[i,j]?\n\n0\n1\nk\nk+1\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\nSuppose every vertex of a graph G on n vertices has d neighbors.\nWhat is the size of the edge list?\n\nd \\cdot n\nd \\cdot n/2\n2d \\cdot n\n(d + n)\n\nIs it possible that both d and n are odd?\n\nYes\nNo"
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/a01.html",
    "href": "courses/2023/01-ES242/quizzes/a01.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01 Solutions",
    "section": "",
    "text": "Released: 10 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The 15-Puzzle\n\n\n\nSuppose you are implementing the 15 puzzle game:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to rearrange the tiles and place them in increasing numerical order.\n\nHere’s an example configuration:\n\n\n\nAn Example 15-Puzzle Instance\n\n\nYou decide to record the game state as a list of length 16, with elements between 0-15 (0 denotes the empty cell), using the following convention:\n\nthe first four elements contain the numbers in the first row of the board,\nthe fifth-eighth elements contain the numbers in the second row of the board,\nthe ninth-twelfth elements contain the numbers in the third row of the board, and\nthe thirteenth-sixteenth element csontain the numbers in the fourth row of the board.\n\nSuppose you generalise this to a game involving a N \\times N board, using a list of size N^2. The user indicates how they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to N\nproportional to N^2\nconstant\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSuppose the empty cell is at row R (counting from the top; i.e, the top row is row 1) and column C (counting from the left; i.e, the left-most column is column 1). The user may chose one of the following four moves:\n\nmove the number at row R-1 and column C into the empty cell, provided R is not the top row.\nmove the number at row R and column C-1 into the empty cell, provided C is not the left-most column.\nmove the number at row R and column C+1 into the empty cell, provided C is not the right-most column.\nmove the number at row R+1 and column C into the empty cell, provided R is not the bottom row.\n\nThe procedure to update the configuration involves two things:\n\nidentify the number to be moved into the empty slot based on the move chosen by the user;\nupdate (swap) the values of the list at locations (R-1)*N + (C-1)1 and the location corresponding to the number to be moved.\n\nThese two steps require knowledge of R and C, i.e, the location of the empty slot. Since we are given the contents of all locations as a list, we may need to — in the worst case — go through the entire list to find where the 0-element lies.\nNote that to speed things up, we could store the integers R and C, representing the location of the 0-element, separately: and update it as moves are made. With this approach, the update can be achieved in constant time.\nFor this question, no such assumption is made, so the time required to update the configuration is proportional to N^2 in the worst-case.\n\n\n\n\n\n\n\n\n\nProblem 2. 2048\n\n\n\nSuppose you are implementing the 2048 game:\n\n2048 is played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.\n\nFeel free to play the game at the link above to get a feel for it.\nSuppose you are implementing a version of 2048 on a N \\times N board, using a list of size N^2. As in the previous question, the list carries information about the state of the board: the first N elements correspond to the numbers in the first row, and so on. The user indicates in which direction they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to N\nproportional to N^2\nconstant\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNotice that there are moves that may require that you update the status of every cell in the board (as an extreme example, suppose all the odd-numbered rows have elements in them and all the even-numbered rows are empty; and the user choses to move downwards: then except for possibly the bottom row have to be updated in a single move).\nSo one would have to examine the impact of the move on each cell in board and update all the cells, which requires time proportional to N^2.\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\nDescribe how to define a set of marriage preferences among n men and n women such that there is exactly one stable marriage possible.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nOne situation where there is exactly one matching that is stable is when all the men and women have identical preferences. In particular, if we denote the set of n men as V := \\{m_1,\\ldots,m_n\\} and the n women as W := \\{w_1,\\ldots,w_n\\}, and further:\n\nevery man has the preference w_1 \\succ w_2 \\succ \\cdots w_n and\nevery woman has the preference m_1 \\succ m_2 \\succ \\cdots m_n;\n\nthen then only stable matching is (w_1,m_1),\\cdots,(w_n,m_n).\nTo see this, suppose a stable matching M matches w_i to m_j where i \\neq j, and let i be the smallest index for which this happens (i.e, for all \\ell < i, M matches w_\\ell with m_\\ell). Then: it must be that j > i (since all men m_j with j < i are already matched to w_j). However, this implies that (w_i,m_i) will form a blocking pair (note that m_i is also matched to some w_t with t > i), contradicting our assumption that M is stable.\nFood for thought: are there other examples?\n\nEvaluation remark: for full credit, it suffices that the answer describes a valid example, even if there is no justification."
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/a02.html",
    "href": "courses/2023/01-ES242/quizzes/a02.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 02 Solutions",
    "section": "",
    "text": "Released: 12 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Doubly Linked Lists\n\n\n\n\n\nIf p is the address of a node in a doubly linked list L, then:\n\nnext(p) is the address of the next node in the linked list\nprev(p) is the address of the previous node in the linked list\ndata(p) is the information contained in the the node at address p\n\nNote that:\n\nif p is the address of the first node in L then prev(p) is NULL.\nif p is the address of the last node in L then next(p) is NULL.\n\nAlso, data(p), next(p) and prev(p) returns a sensible value only if p is not NULL, otherwise they are UNDEFINED.\nIf L is a linked list with five elements and p is the address of the third element, then what does next(prev(next(next(p)))) represent?\n\nAddress of the 1st element\nAddress of the 2nd element\nAddress of the 3rd element\nAddress of the 4th element\nAddress of the 5th element\nUNDEFINED\n\nIf L is a linked list with five elements and p is the address of the third element, then what does data(prev(prev(next(p)))) represent?\n\nData of the 1st element\nData of the 2nd element\nData of the 3rd element\nData of the 4th element\nData of the 5th element\nUNDEFINED\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFor the first part:\nnext(prev(next(next(p)))) = next(prev(next(next(3)))) = next(prev(next(4))) = next(prev(5)) = next(4) = 5\nFor the second part:\ndata(prev(prev(next(p)))) = data(prev(prev(next(3)))) = data(prev(prev(4))) = data(prev(3)) = data(2)\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency Lists\n\n\n\n\n\nSuppose A is the adjacency matrix of a simple undirected graph G = (V,E) with n vertices given by \\{1,2,\\ldots,n\\}, that is,\n\n    A[i,j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{if } (i,j) \\notin E.\n    \\end{cases}\n\nNote that A[i,i] = 0 for all i \\in \\{1,2,\\ldots,n\\} since G is simple.\nSuppose (i,j) \\in E for some i,j \\in \\{1,2,\\ldots,n\\}, i \\neq j. Let k denote the number of vertices that are adjacent to both i and j.\nWhat is the value of A^2[i,j]?\n\n0\n1\nk\nk+1\n\nSuppose (i,j) \\notin E for some i,j \\in \\{1,2,\\ldots,n\\}, i \\neq j. Let k denote the number of vertices that are adjacent to both i and j.\nWhat is the value of A^2[i,j]?\n\n0\n1\nk\nk+1\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nA^2[i,j] = k irrespective of whether (i,j) \\in E or not. Notice that the entry in the i-th row and j-th column of A^2 is the product of the i-th row of A and the j-th column of A, and the only terms that are not zeroed-out in this product are those that correspond to vertices adjacent to both i and j. Note that both i and j are not adjacent to themselves, which is why their adjacency (or lack of it) does not change the final answer.\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\n\n\nSuppose every vertex of a graph G on n vertices has d neighbors.\nWhat is the size of the edge list?\n\nd \\cdot n\nd \\cdot n/2\n2d \\cdot n\n(d + n)\n\nIs it possible that both d and n are odd?\n\nYes\nNo\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf every vertex has d neighbors then there are d edges incident to all the n vertices in the graph. Thus we have dn edges but with each edge counted exactly twice: in particular the edge (u,v) gets counted as being one of the edges incident on u and one of the edges incident on v. Therefore the total number of edges, and therefore the size of the edge list, is d \\cdot n/2.\nSince the total number of edges in any graph is a whole number, and is given by d \\cdot n/2, it is not possible that both d and n are odd."
  },
  {
    "objectID": "courses/index.html",
    "href": "courses/index.html",
    "title": "Courses",
    "section": "",
    "text": "Teaching\n\n \n\n\nIITGNNPTELOther\n\n\n\n\n\n    \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES242\n            \n            \n                Data Structures and Algorithms - I\n            \n            \n                2023\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                CS614\n            \n            \n                Advanced Algorithms\n            \n            \n                2023\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES242\n            \n            \n                Data Structures and Algorithms - I\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                CS610\n            \n            \n                Advanced Algorithms\n            \n            \n                2021\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES301\n            \n            \n                Data Structures and Algorithms II\n            \n            \n                2021\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                ES242\n            \n            \n                Data Structures and Algorithms - I\n            \n            \n                2020\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                ES102\n            \n            \n                Computing\n            \n            \n                2020\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                Special Topics\n            \n            \n                CS Theory Toolkit\n            \n            \n                2020\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES214\n            \n            \n                Discrete Mathematics\n            \n            \n                2020\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES242\n            \n            \n                Data Structures and Algorithms - I\n            \n            \n                2019\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ST601\n            \n            \n                Social Networks\n            \n            \n                2019\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES214\n            \n            \n                Discrete Mathematics\n            \n            \n                2019\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                CS610\n            \n            \n                Advanced Algorithms\n            \n            \n                2019\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                MA607\n            \n            \n                Graph Theory and Applications\n            \n            \n                2018\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                ES112\n            \n            \n                Computing\n            \n            \n                2018\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                ES102\n            \n            \n                Introduction to Computing\n            \n            \n                2018\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                ES112\n            \n            \n                Computing\n            \n            \n                2017\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                MA607\n            \n            \n                Graph Theory and Applications\n            \n            \n                2017\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                FP601\n            \n            \n                Cultures of Communication\n            \n            \n                2017\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                CS607\n            \n            \n                Combinatorics with Applications in Computer Science\n            \n            \n                2016\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                FP601\n            \n            \n                Cultures of Communication\n            \n            \n                2016\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                CS321\n            \n            \n                Analysis and Design of Algorithms\n            \n            \n                2016\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n            \n            \n                CS607\n            \n            \n                Combinatorics with Applications in Computer Science\n            \n            \n                2016\n            \n            \n                \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nAt the moment, the only way of accessing the materials associated with these courses is to sign up for them through the NPTEL playform. You can access the videos via the playlists on YouTube.\nHowever, I have recieved requests for being able to access materials outside of the NPTEL LMS, along with downloadable slides and lecture notes. This is work in progress (really :) ), and I hope that eventually we will have most of the materials available from here.\n Watch this space!\n\n\n\n\n \n\n\n\n\n    \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC23 CS30\n            \n            \n                Getting Started with Competitive Programming  Co-instructor with Atul.\n            \n            \n                2023\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC22 CS82\n            \n            \n                Getting Started with Competitive Programming\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC22 CS81\n            \n            \n                Parameterized Algorithms  Co-instructor with Saket Saurabh\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC22 CS59\n            \n            \n                Getting Started with Competitive Programming\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC21 CS99\n            \n            \n                Getting Started with Competitive Programming  Co-instructor with Arjun Arul\n            \n            \n                2021\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC21 CS92\n            \n            \n                Parameterized Algorithms  Co-instructor with Saket Saurabh\n            \n            \n                2021\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                NOC21 CS80\n            \n            \n                Discrete Mathematics  Facilitating co-instructor • Course by Sudarshan Iyengar\n            \n            \n                2021\n            \n            \n                \n            \n        \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nThese are courses that I have been involved in coordinating and organizing. I am grateful to all the instructors here for sharing their time and expertise with us. If you would like to collaborate on a short course/workshop at IITGN — virtual/hybrid/in-person — please get in touch.\n\n\n\n\n \n\n\n\n\n    \n        \n            \n                    \n            \n            \n                            \n            \n            \n                191014K02\n            \n            \n                GIAN Course on Randomized Methods for Parameterized Algorithms  by Prof. Daniel Lokshtanov\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                SC 310\n            \n            \n                Visual Science Communication  by Dr. Ipsa Jain\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                Certification\n            \n            \n                Dynamic Programming Bootcamp  by Priyansh Agarwal\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                SC 312\n            \n            \n                CS Research 101  by Shashank Srikant\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                SC 302\n            \n            \n                Fundamentals of Science Communication  by Siddharth Kankaria\n            \n            \n                2022\n            \n            \n                \n            \n        \n        \n            \n                    \n            \n            \n                            \n            \n            \n                SC-235\n            \n            \n                Cards and Combinatorics  by Manish Jain (and team)\n            \n            \n                2019\n            \n            \n                \n            \n        \n\n\n\nNo matching items"
  },
  {
    "objectID": "courses/2019/cards.html",
    "href": "courses/2019/cards.html",
    "title": "Fundamentals of Science Communication | Siddharth Kankaria",
    "section": "",
    "text": "— Manish Jain\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nIn this course, we will introduce many little-known theorems of advanced mathematics. We will go on a roller coaster ride from delightful self-working magic tricks to serious math, then back again to magic. The tricks don’t require any sleight of hand or trickery.\nA similar course is taught at Stanford University by a former professional magician named Persi Diaconis. At school, Diaconis supported himself by playing poker on ships between New York and South America. Martin Gardner, a writer at Scientific American, once saw him and recommended to a professor for Ph.D. at Harvard University.\nIn two days, we would learn about Hummer shuffles, Royal Hummer, de Bruijn Sequences, Universal Cycles, Mandelbrot Set, Neat Shuffles and many more card tricks. You would have about 10 cool card tricks up your sleeve and you would be comfortable exploring many more as you would know the terminology of math card tricks by the end of the course.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nManish Jain spends most of his time investigating the science behind simple toys, and is passionate about sharing his insights and excitement with people. He is Associate Teaching Professor at Center for Creative Learning (CCL), IIT Gandhinagar, whose goal is to create and foster makers who can take innovation to the next level. Towards this goal, CCL designs and offers deep and joyful learning experiences built around STEM toys and hands-on activities. The ultimate goal is to bring back the gleam in the eyes of students and teachers.\nBefore founding CCL, Manish worked at IUCAA’s Science Centre in Pune, with Padma Shri Arvind Gupta. In his previous avatar, he spent 19 years in the area of chip design at Synopsys (Bangalore & amp; Mountain View), serving as a Director of R&D and Scientist leading Low Power Simulation efforts, where he has 5 US patents.\nManish has a bachelor’s degree in Electrical Engineering from IIT Kanpur (1993) and has also finished a few courses at Stanford University.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n6th and 7st April, 2019 • 10:00 AM to 1:00 PM, 3:00 PM to 5:00 PM"
  },
  {
    "objectID": "videos/index.html",
    "href": "videos/index.html",
    "title": "Videos",
    "section": "",
    "text": "Videos\n\n \n\nComing Soon :)"
  },
  {
    "objectID": "credits.html",
    "href": "credits.html",
    "title": "Credits",
    "section": "",
    "text": "Credits\n\n\n \n\n\nMade with Quarto (h/t Dr. Phil Chodrow).\nSVG backgrounds by Haikei.\nIcons by Bootstrap for the most part."
  },
  {
    "objectID": "bookmarks/index.html",
    "href": "bookmarks/index.html",
    "title": "Bookmarks",
    "section": "",
    "text": "Bookmarks\nA braindump of things I find — or at any rate, found at some point — interesting.\n\n\n\n\n\n\nDisclaimer\n\n\n\nI have not explored/read everything listed out here: if something is here, it just means that I am vaguely aware of said thing. Things I have some appreciation for are marked with a  and can be filtered by typing parsed in the search box on this page. Things I have passing or partial familiarity with are marked with a  and can be filtered by typing pseudo in the search box on this page.\n\n\n\n\n\n\n\n\n\nLegend for Estimated Effort\n\n\n\n Quick tips and the like: these will typically need between 2-15 minutes of your attention. Filter for these by typing short.\n Articles or resources that demand anywhere between an hour to an evening to process fully. Filter for these by typing moderate.\n Things to keep coming back to over time, like courses, books, youtube channels, and so on. Filter for these by typing long.\n\n\n\n\n\n\n\n\nLegend for Types (click to view)\n\n\n\n\n\n\n\n\n\n\n\nSymbol\nApproximate Category\n\n\n\n\n\nbook\n\n\n\ntweet\n\n\n\nwebsite\n\n\n\narticle\n\n\n\nchannel\n\n\n\nvideo\n\n\n\n\n\n\n\n\n\n\n\nSymbol\nApproximate Category\n\n\n\n\n\naudio\n\n\n\npodcast\n\n\n\nsong\n\n\n\nexplorable\n\n\n\nlist\n\n\n\nmeme\n\n\n\n\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n        \n        \n        \n    3Blue1Brown, by Grant Sanderson, is some combination of math and entertainment, depending on your disposition. The goal is for explanations to be driven by animations and for difficult problems to be made simple with changes in perspective.\n\n   \n        3blue1brown\n\n\n            \n\n\n        youtube   \n        math   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    The parsed status is a little tongue-in-cheek; I have not read the book cover to cover, but it is what I use for all my algorithms teaching, so I hope that counts! Absolute favorite ❤️\n\n   \n        Algorithms by Jeff Erickson\n\n\n            \n\n\n        computerscience   \n        book   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Valuable advice for apsiring academics by Shashank Srikant.\n\n   \n        Aspiring Academics\n\n\n            \n\n\n        advice   \n        article   \n        academics   \n\n   \n        \n        pseudo\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    Subscribe to see tutorial-style videos about electronics, computer architecture, networking, and various other technical subjects.\n\n   \n        Ben Eater\n\n\n            \n\n\n        youtube   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    A regular series of seminars held via video meetings, open to anyone,  and targeted to the interests of attendees of the COMSOC workshop series.\n\n   \n        COMSOC Video Seminar\n\n\n            \n\n\n        list   \n        computerscience   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    CS Unplugged is a collection of free teaching material that teaches Computer Science through engaging games and puzzles that use cards, string, crayons and lots of running around.\n\n   \n        CS Unplugged\n\n\n            \n\n\n        scicomm   \n        computerscience   \n        list   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Led by Manish Jain at IIT Gandhinagar. STEM videos predominantly in Hindi and English.\n\n   \n        Center for Creative Learning\n\n\n            \n\n\n        youtube   \n        classroom   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    The next book from Ben Orlin, the popular math blogger and author of the underground bestseller Math With Bad Drawings.Change Is The Only Constant is an engaging and eloquent exploration of the intersection between calculus and daily life, complete with Orlin's sly humor and wonderfully bad drawings.\n\n   \n        Change Is the Only Constant\n\n\n            \n\n\n        scicomm   \n        math   \n        book   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    A ridiculous (and fun!) way to solve Rubik’s cubes and (not) solve equations. Recording of a talk given by Ramprasad Saptharishi.\n\n   \n        Commutators\n\n\n            \n\n\n        scicomm   \n        video   \n        computerscience   \n\n   \n        \n        pseudo\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    Opinions of Doron Zeilberger\n\n   \n        Dr. Z's Opinions\n\n\n            \n\n\n        opinions   \n        essays   \n        list   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    These essays have been a heavy early influence on how think about a lot of things.\n\n   \n        Essays and Opinions by Oded Goldreich\n\n\n            \n\n\n        opinions   \n        essays   \n        list   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n    \n\n   \n        Essays by Matt Might\n\n\n            \n\n\n        list   \n        essays   \n        academia   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    For your discrete math class.\n\n   \n        Flawed proof example\n\n\n            \n\n\n        math   \n        tweet   \n        classroom   \n\n   \n        \n        parsed\n\n   \n        \n    short\n\n\n\n\n        \n        \n        \n    Virtual lecture series in recent developments in parameterized complexity.\n\n   \n        Frontiers of Parameterized Complexity\n\n\n            \n\n\n        list   \n        computerscience   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n    \n\n   \n        List of ACM Turing Award Lectures\n\n\n            \n\n\n        list   \n        computerscience   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Looking Glass Universe is a channel mostly about the strange world of quantum mechanics. It's created by Mithuna Yoganathan, who did her PhD in quantum computing at the University of Cambridge.\n\n   \n        Looking Glass Universe\n\n\n            \n\n\n        youtube   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    A live survey of known lower bounds in arithmetic circuits by Ramprasad Saptharishi\n\n   \n        Lowerbounds Survey\n\n\n            \n\n\n        survey   \n        article   \n        computerscience   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Bestselling author and worst-drawing artist Ben Orlin expands his oeuvre with this interactive collection of mathematical games. With 70-plus games, each taking a minute to learn and a lifetime to master, this treasure trove will delight, educate, and entertain.\n\n   \n        Math Games with Bad Drawings\n\n\n            \n\n\n        scicomm   \n        math   \n        book   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    A hilarious reeducation in mathematics-full of joy, jokes, and stick figures-that sheds light on the countless practical and wonderful ways that math structures and shapes our world. By Ben Orlin.\n\n   \n        Math with Bad Drawings\n\n\n            \n\n\n        scicomm   \n        math   \n        book   \n\n   \n        \n        parsed\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    A book by Donald E. Knuth, Tracy L. Larrabee, and Paul M. Roberts\n\n   \n        Mathematical Writing\n\n\n            \n\n\n        advice   \n        writing   \n        book   \n\n   \n        \n        parsed\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Free tools, courses and manipulatives to make online learning more interactive and engaging than ever before.\n\n   \n        Mathigon\n\n\n            \n            \n\n\n        book   \n        math   \n        explorable   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Cool physics and other sweet science.\n\n   \n        Minute Physics\n\n\n            \n\n\n        youtube   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Videos about numbers and mathematics. Videos by Brady Haran since 2011.\n\n   \n        Numberphile\n\n\n            \n\n\n        youtube   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    By Nicky Case and Vi Hart. \"... a story of how harmless choices can make a harmful world.\"\n\n   \n        Parable of the Polygons\n\n\n            \n\n\n        math   \n        explorable   \n        classroom   \n\n   \n        \n        parsed\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    Thoughts from Shriram Krishnamurthi\n\n   \n        Parenthetically Speaking\n\n\n            \n\n\n        opinions   \n        essays   \n        list   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    These are the lecture notes of the Aalto University course CS-E4580 Programming Parallel Computers. Very comprehensive!\n\n   \n        Programming Parallel Computers\n\n\n            \n\n\n        course   \n        computerscience   \n        website   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    A free introduction to quantum computing and quantum mechanics by Andy Matuschak and Michael Nielsen.\n\n   \n        Quantum Country\n\n\n            \n\n\n        physics   \n        book   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Seeing Theory was created by Daniel Kunin while an undergraduate at Brown University. The goal of this website is to make statistics more accessible through interactive visualizations (designed using Mike Bostock’s JavaScript library D3.js).\n\n   \n        Seeing Theory\n\n\n            \n            \n\n\n        book   \n        computerscience   \n        explorable   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n    \n\n   \n        Standup Maths\n\n\n            \n\n\n        youtube   \n        maths   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Videos about science.\n\n   \n        Steve Mould\n\n\n            \n\n\n        youtube   \n        math   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Tessellate is the annual college festival of Chennai Mathematical Institute (CMI). The Youtube channel has a bunch of really nice talks!\n\n   \n        Tessellate CMI\n\n\n            \n\n\n        scicomm   \n        youtube   \n        math   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    By Nicky Case. A remarkable explorable that demonstrates the iterated prisoners dilemma.\n\n   \n        The Evolution of Trust\n\n\n            \n\n\n        math   \n        explorable   \n        classroom   \n\n   \n        \n        parsed\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    By Nicky Case. An interactive about how things spread in networks.\n\n   \n        The Wisdom and/or Madness of Crowds\n\n\n            \n\n\n        math   \n        explorable   \n        classroom   \n\n   \n        \n        parsed\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    A lesson based on the windmill video. Neat problem and solution!\n\n   \n        The unexpectedly hard windmill question\n\n\n            \n\n\n        math   \n        explorable   \n        classroom   \n\n   \n        \n        parsed\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    By Nicky Case. An interactive (and really well-done) guide to alternative voting systems.\n\n   \n        To Build a Better Ballot\n\n\n            \n\n\n        math   \n        explorable   \n        classroom   \n\n   \n        \n        parsed\n\n   \n        \n    moderate\n\n\n\n\n        \n        \n        \n    An element of truth - videos about science, education, and anything else I find interesting.\n\n   \n        Veritasium\n\n\n            \n\n\n        youtube   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Visualising data structures and algorithms through animation. Conceptualised in 2011 by Dr Steven Halim as a tool to help his students better understand data structures and algorithms, by allowing them to learn the basics on their own and at their own pace.\n\n   \n        VisuAlgo\n\n\n            \n\n\n        course   \n        computerscience   \n        explorable   \n\n   \n        \n        pseudo\n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    An explorable video series by Grant Sanderson and Ben Eater. Pushing the limits of WebGL!\n\n   \n        Visualizing Quaternions\n\n\n            \n\n\n        math   \n        explorable   \n        classroom   \n\n   \n\n   \n        \n    moderate\n\n\n\n\n        \n    \n\n   \n        Welch Labs\n\n\n            \n\n\n        youtube   \n        maths   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n    \n\n   \n        Wendover Productions\n\n\n            \n\n\n        youtube   \n        scicomm   \n\n   \n\n   \n        \n    long\n\n\n\n\n        \n        \n        \n    Explorable from Minute Labs exploring the construct of a single day.\n\n   \n        What is a Day?\n\n\n            \n\n\n        physics   \n        explorable   \n        classroom   \n\n   \n\n   \n        \n    moderate\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cp.html",
    "href": "cp.html",
    "title": "Notes on Competitive Programming",
    "section": "",
    "text": "This page collects editorial-style posts, and they will mostly be based off my NPTEL course on competitive programming. You can subscribe to a feed for this series by clicking here. If you’d like to guest author a post here, please drop me a line at: mail -AT- neeldhara.com\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nSam I Am\n\n\n\n\n\n\n\n\n\nOct 1, 2021\n\n\n9 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exportober.html",
    "href": "exportober.html",
    "title": "Exportober",
    "section": "",
    "text": "This page is about a content-creation accountability challenge, which I plan to keep open around October every year (so it’s parallel to affairs like Inktober and possibly a warm-up for Nanowrimo the following month.) You can subscribe to a feed for this series by clicking here.\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nExportober 2022\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nExportober 2021\n\n\n\n\n\n\n\n\n\nSep 25, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nAbout Exportober\n\n\n\n\n\n\n\n\n\nSep 24, 2021\n\n\n6 min\n\n\n\n\n\n\n\n\nAn Invitation to Exportober 2021\n\n\n\n\n\n\n\n\n\nSep 19, 2021\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "events/2022/index.html",
    "href": "events/2022/index.html",
    "title": "Events in 2022",
    "section": "",
    "text": "Events\n\n \n\nThese are events from 2022.\n\n\n \n\n\n\n\n\n\n    \n            \n        \n\n    ACM-India CSEd Workshop\n\n\n    2022\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    GIAN Course on Randomized Methods in Parameterized Algorithms  Professor Daniel Lokshtanov\n\n\n    2022\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "events/2022/csed/index.html",
    "href": "events/2022/csed/index.html",
    "title": "ACM-India CS Education Workshop",
    "section": "",
    "text": "The discipline of Computer Science and Engineering at IIT Gandhinagar, in partnership with ACM India and NPTEL India, is organizing a one-day workshop on CS Education on the 23rd of December, 2022 (Friday).\nJoin us ahead of holiday season to prepare to your courses next term! \nVenue: AB 1/101\n\nOverviewScheduleFAQSpread the wordCertificates\n\n\n \n\n \n\n\n\n\n\n\n\n Target Audience. Anyone interested in matters of CS Education, with a focus on teaching programming and computational thinking, at either the school or undergraduate level, is welcome to attend.\n\n\n\n\n\n\n\n\n\n Logistics. This is a hybrid event.\nThe registration costs are as follows:\n\nRs. 1500 for in-person attendees (all-inclusive)\nRs. 350 (+GST) for online attendees (students)\nRs. 650 (+GST) for online attendees (non-students)\n\n\nRegistered participants are eligible for a certificate of participation subject to participation :)\n\n\n\n\n\n\n\n\n\n Registrations are now closed.\n\n\n\n\n\n\n\n\n\n Inquiries. Please direct any questions you have to neeldhara.m@iitgn.ac.in with CSEd Workshop Inquiry as the subject.\n\n\n\n\n\n9:30AM — 10AM. Registration\n\n10AM — 11AM. The CSPathshala Initiative: Computational Thinking in Schools • Sonia Garcha       \n The Bebras Challenge • CTiS • CSPathshala • The TACT Challenge\n\n11AM — 11:30AM.  Coffee Break\n\n11:30AM — 1PM. A hands-on introduction to Refute Questions • Viraj Kumar      \n Task 1 • Task 2 • Refute Code Template • Task 3\n\n\n\n\n\n\nTip\n\n\n\n\n\nq ## Abstract\nTo help students develop a critical eye for human and (increasingly) machine-generated code, this workshop proposes Refute questions. Students are given code created for a stated purpose and asked: Why does the code fail to serve that purpose? Students must provide evidence demonstrating this failure. After a hands-on introduction to Refute questions in their originally proposed context (an alternative to ‘Explain in Plain English’ questions), participants will receive and review a richer variety of Refute questions for autograded formative and summative assessments, targeting an introductory programming course in Python.\n\n\n\n\n1PM — 2PM.  Lunch\n\n2PM — 3:30PM. Algorithmic program development using Mapcode • Venkatesh Choppella      \n Colab Worksheet • Feedback Form • Introduction to Mathematical Computer Science\n\n\n\n\n\n\nAbstract\n\n\n\n\n\nMapcode (Viswanath, 2008) is a methodology for iterative algorithmic problem solving in which the requirements and the design of an algorithm are expressed as a collection of maps (total functions). Once the design is available, it can be easily coded as a program.\nThe workshop is an introduction to program development using the mapcode methodology. This will be done through a series of examples which illustrate the mapcode approach to the specification, design and coding of solutions as programs.\n\n\n\n\n3:30PM — 4PM.  Coffee Break\n\n4PM — 5PM. Teaching Data Structures • N S Kumar     \n Github Repository with Files\n\n5PM — 5:30PM.  High Tea\n\n\n\n\n\n\n\n\n\n Who is the target audience for this workshop?\n\n\n\n\n\nAnyone with an interest in CS Education at the school and/or college level will find this workshop interesting. We hope to bring together school and college teachers, CS Education researchers, industry professionals, and aspiring educators at any stage of their career — in particular, students with an interest pedagogy are also welcome.\n\n\n\n\n\n\n\n\n\n Are there any technical pre-requisites?\n\n\n\n\n\nThere are no explicit pre-requisites, although some experience with teaching introductory programming classes and/or data structures and algorithms would be relevant.\n\n\n\n\n\n\n\n\n\n Is accommodation available for outstation participants?\n\n\n\n\n\nIf you would like to join us in person and need accommodation, please send an email to neeldhara.m@iitgn.ac.in with the subject Accommodation Request for the CSEd Workshop. We expect most of the in-person attendance to be local, and encourage others to join us online. However, we are happy to explore accommodation options on request.\n\n\n\n\n\n\n\n\n\n Will the sessions be recorded?\n\n\n\n\n\nYes. The sessions will be recorded and made available in early January 2023.\n\n\n\n\n\n\n\n\n\n Why should I pay the registration fee for virtual attendance if the lectures will be recorded and available later?\n\n\n\n\n\nThe main difference is that you will be able to join the lectures over Zoom and have an opportunity interact with the speakers and other participants. You will also be eligible for a certificate subject to participation.\n\n\n\n\n\n\n\n\n\n Can I register in one mode now and switch later?\n\n\n\n\n\nYou can register for virtual participation and switch to onsite later by paying the difference in the registration fees. This will be a manual process, please send an email to neeldhara.m@iitgn.ac.in with the subject CSEd workshop registration upgrade if you are in this situation. However, if you decide to switch from onsite participation to virtual, please note that the difference will not be refunded.\n\n\n\n\n\n\n\n\n\n Is a refund is avalaible for any valid reason?\n\n\n\n\n\nThe registration fees are not refundable in general. We may be able to make exceptions in special cases: please send an email to neeldhara.m@iitgn.ac.in with the subject CSEd workshop registration cancelation if you have to cancel your participation due to exceptional circumstances.\n\n\n\n\n\n\n\n\n\n How do I get to IIT Gandhinagar?\n\n\n\n\n\nPlease see this page for more details about reaching IITGN and this page for general information about the IIT Gandhinagar campus.\n\nSardar Vallabhbhai Patel International Airport (AMD) is an international airport serving the cities of Ahmedabad and Gandhinagar in Gujarat, India and is nearer to our IIT campus.\nAhmedabad Junction Railway Station (ADI), locally known as Kalupur station is the main terminus which is very well connected with the other parts of the country.\nGeeta Mandir & Paldi are the bus terminals of Ahmedabad city.\n\n\n\n\n\n\n\n\n\n\n My question is not addressed above, where can I get an answer?\n\n\n\n\n\nPlease direct any questions you have to neeldhara.m@iitgn.ac.in with CSEd Workshop Inquiry as the subject.\n\n\n\n\n\n\nPlease share this on your social media!\n\n\n\n\nPoster\n\n\n\n\nTo obtain a certificate of participation, please fill out the form below no later than the 30th of December 2022. Digital certificates will be emailed on the 1st of January, 2023."
  },
  {
    "objectID": "events/index.html",
    "href": "events/index.html",
    "title": "Events",
    "section": "",
    "text": "Events\n\n \n\nThese events are made possible with extraordinary support from student volunteers, administrative staff, colleagues from the discipline, and funding agencies. The nature of my involvement in these events is revealed by hovering on  :)\n\n \n\n\n\n\n\n\n    \n            \n        \n\n    ACM-India CSEd Workshop\n\n\n    2022\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    GIAN Course on Randomized Methods in Parameterized Algorithms  Professor Daniel Lokshtanov\n\n\n    2022\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    Workshop on Parameterized Complexity 301 (Virtual)\n\n\n    2020\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    Workshop on Parameterized Complexity 201 (IISER Pune)\n\n\n    2020\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    ACM-India Inter-Research Institute Student Seminar in CS\n\n\n    2020\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    ACM-India Annual Event\n\n\n    2020\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    ACM-W India Workshop for Women in CS Research\n\n\n    2020\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    ACM-W Summer School on Algorithmic Game Theory\n\n\n    2019\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    GIAN Course on Computational Social Choice  Professor Edith Elkind\n\n\n    2017\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    GIAN Course on Pattern Matching Algorithms  Professor Amihood Amir\n\n\n    2017\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    ACM Summer School on Graph Theory and Graph Algorithms\n\n\n    2017\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n            \n        \n\n    NMI Workshop on Complexity Theory\n\n\n    2016\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n    \n        \n\n    TEQIP Summer School on Design and Analysis of Algorithms\n\n\n    2016\n\n\n    \n        \n        \n\n    \n        \n            \n        \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Neeldhara",
    "section": "",
    "text": "Ernest Hemingway\n\n\n\nReal seriousness in regard to writing is one of two absolute necessities. The other, unfortunately, is talent.\n\n\nHeads up: I write with both prerequisites unfulfiled. Proceed with caution.\n\n \n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n13 Sheep\n\n\n\n\n\n\n\ngames\n\n\nexposition\n\n\n \n\n\n\n\nMar 26, 2023\n\n\n18 min\n\n\n\n\n\n\n\n\nLetters with Pandoc\n\n\n\n\n\n\n\npandoc\n\n\nworkflows\n\n\nlatex\n\n\n \n\n\n\n\nNov 27, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nThe Only Fair Ranking of IITs\n\n\n\n\n\n\n\nfunda\n\n\n \n\n\n\n\nNov 24, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nExportober 2022\n\n\n\n\n\n\n\nexportober\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nSKJ\n\n\n\n\n\n\n\niitgn\n\n\n \n\n\n\n\nSep 23, 2022\n\n\n3 min\n\n\n\n\n\n\n\n\nExternal Communications\n\n\n\n\n\n\n\niitgn\n\n\n \n\n\n\n\nSep 23, 2022\n\n\n12 min\n\n\n\n\n\n\n\n\nDog Bunny Puzzle\n\n\n\n\n\n\n\npuzzles\n\n\nexposition\n\n\n \n\n\n\n\nSep 19, 2022\n\n\n7 min\n\n\n\n\n\n\n\n\nOn Teaching\n\n\n\n\n\n\n\nfunda\n\n\n \n\n\n\n\nSep 5, 2022\n\n\n7 min\n\n\n\n\n\n\n\n\nSolo Chess\n\n\n\n\n\n\n\nexposition\n\n\ntwitterthread\n\n\n \n\n\n\n\nMar 24, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\nEight Self-Sabotaging Behaviors\n\n\n\n\n\n\n\nfunda\n\n\ntwitterthread\n\n\n \n\n\n\n\nMar 15, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nKidney Exchanges\n\n\n\n\n\n\n\ntalk\n\n\nexposition\n\n\n \n\n\n\n\nFeb 25, 2022\n\n\n8 min\n\n\n\n\n\n\n\n\nWomen in Mathematics\n\n\n\n\n\n\n\nbooks\n\n\nlist\n\n\n \n\n\n\n\nFeb 21, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nOn the Communication Complexity of Equality\n\n\n\n\n\n\n\nsketchnotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nOct 4, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nTwo approaches to the 15 puzzle\n\n\n\n\n\n\n\npuzzles\n\n\nexposition\n\n\n \n\n\n\n\nOct 3, 2021\n\n\n10 min\n\n\n\n\n\n\n\n\nSam I Am\n\n\n\n\n\n\n\ncp\n\n\nlecturenotes\n\n\n \n\n\n\n\nOct 1, 2021\n\n\n9 min\n\n\n\n\n\n\n\n\nNew Mac\n\n\n\n\n\n\n\napps\n\n\nlist\n\n\n \n\n\n\n\nSep 30, 2021\n\n\n11 min\n\n\n\n\n\n\n\n\nExportober 2021\n\n\n\n\n\n\n\nexportober\n\n\n \n\n\n\n\nSep 25, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nAbout Exportober\n\n\n\n\n\n\n\nexportober\n\n\n \n\n\n\n\nSep 24, 2021\n\n\n6 min\n\n\n\n\n\n\n\n\nMoving Blocks at CTIS 2021\n\n\n\n\n\n\n\npuzzles\n\n\nexposition\n\n\n \n\n\n\n\nSep 21, 2021\n\n\n3 min\n\n\n\n\n\n\n\n\nAn Invitation to Exportober 2021\n\n\n\n\n\n\n\nexportober\n\n\n \n\n\n\n\nSep 19, 2021\n\n\n3 min\n\n\n\n\n\n\n\n\nEnvelope Budgeting with Notion\n\n\n\n\n\n\n\nnotion\n\n\nworkflows\n\n\ntutorial\n\n\n \n\n\n\n\nSep 18, 2021\n\n\n19 min\n\n\n\n\n\n\n\n\nActually Building a Website with Notion\n\n\n\n\n\n\n\nnotion\n\n\nworkflows\n\n\nwebsites\n\n\n \n\n\n\n\nSep 12, 2021\n\n\n9 min\n\n\n\n\n\n\n\n\nNotion-powered websites\n\n\n\n\n\n\n\nnotion\n\n\nworkflows\n\n\nwebsites\n\n\n \n\n\n\n\nSep 11, 2021\n\n\n14 min\n\n\n\n\n\n\n\n\nMassren for fast file renaming\n\n\n\n\n\n\n\nworkflows\n\n\n \n\n\n\n\nSep 11, 2020\n\n\n0 min\n\n\n\n\n\n\n\n\nBuilding a first Django App\n\n\n\n\n\n\n\ntutorial\n\n\nwebsites\n\n\n \n\n\n\n\nJun 12, 2018\n\n\n12 min\n\n\n\n\n\n\n\n\nOn the Fence\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nApr 23, 2012\n\n\n0 min\n\n\n\n\n\n\n\n\nSprinkles of the Sky\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nJan 5, 2011\n\n\n0 min\n\n\n\n\n\n\n\n\nHow Expensive Can Homework Help Be?\n\n\n\n\n\n\n\nexposition\n\n\nparameterized-algorithms\n\n\n \n\n\n\n\nMay 1, 2010\n\n\n5 min\n\n\n\n\n\n\n\n\nSeek\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nApr 3, 2007\n\n\n0 min\n\n\n\n\n\n\n\n\nBloom\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nFeb 3, 2005\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L04.html",
    "href": "courses/2023/01-CS614/quizzes/L04.html",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Matroid Intersection Example\n\n\n\nConsider a directed graph D=(V, E \\subseteq V \\times V). A set T \\subseteq E is an arborescence (oriented forest) if:\n\nT does not contain a cycle (ignoring directions of edges).\nEvery vertex in V has at most one incoming edge.\n\nAn arborescence T with |T|=n-1 will have one incoming edge incident on each node except one. If we denote this special node as root, this is an oriented spanning tree as shown in the figure.\n\n\n\nAn example arborescence.\n\n\nConsider the underlying undirected graph G_D = (V,E) associated with D (this is the graph obtained by “erasing the arrows” in D). Consider the universe given by E. Suggest two matroids {\\mathcal M}_1 and {\\mathcal M}_2 for which set of arborescences is given by the sets independent in both {\\mathcal M}_1 and {\\mathcal M}_2.\nHint: these are both matroids seen in class. Further, you might find it useful to partition E into |V| many parts as follows — the part P_v contains all edges that are incoming arcs for the vertex v in D. Can you define a matroid based on this partition?\nDescribe {\\mathcal M}_1 and {\\mathcal M}_2.\n\n\n\n\n\n\n\n\nProblem 2. Maker-Breaker Game\n\n\n\nTwo players take turns removing edges from an undirected graph until there are no edges left.\nPlayer 2 wins if the edges they remove contains a spanning tree, player 1 wins if the set of edges they remove would disconnect the original graph.\n\nIs it true that exactly one player wins this game? In other words, is the following statement true?\n\n“It is NOT the case that after the game has been played, both players can claim a win.”\n\nYes\nNo\n\n\nWhich player wins on a path?\n\n\nPlayer 1\nPlayer 2\n\n\nWhich player wins on a complete graph?\n\n\nPlayer 1\nPlayer 2\n\n\nComplete this sentence: player 2 has the winning strategy if and only if the graph contains BLANK.\n\n(No marks for answering this question, take your best guess :) )"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/A04.html",
    "href": "courses/2023/01-CS614/quizzes/A04.html",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Matroid Intersection Example\n\n\n\nConsider a directed graph D=(V, E \\subseteq V \\times V). A set T \\subseteq E is an arborescence (oriented forest) if:\n\nT does not contain a cycle (ignoring directions of edges).\nEvery vertex in V has at most one incoming edge.\n\nAn arborescence T with |T|=n-1 will have one incoming edge incident on each node except one. If we denote this special node as root, this is an oriented spanning tree as shown in the figure.\n\n\n\nAn example arborescence.\n\n\nConsider the underlying undirected graph G_D = (V,E) associated with D (this is the graph obtained by “erasing the arrows” in D). Consider the universe given by E. Suggest two matroids {\\mathcal M}_1 and {\\mathcal M}_2 for which set of arborescences is given by the sets independent in both {\\mathcal M}_1 and {\\mathcal M}_2.\nHint: these are both matroids seen in class. Further, you might find it useful to partition E into |V| many parts as follows — the part P_v contains all edges that are incoming arcs for the vertex v in D. Can you define a matroid based on this partition?\nDescribe {\\mathcal M}_1 and {\\mathcal M}_2.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nTake {\\mathcal M}_1 to be the graphic matroid and {\\mathcal M}_2 to be the partition matroid with all budgets set to one. Membership in the first matroid ensures that there are no underlying undirected cycles and membership in the second matroid ensures that every vertex in V has at most one incoming edge.\n\n\n\n\n\n\n\n\n\nProblem 2. Maker-Breaker Game\n\n\n\nTwo players take turns removing edges from an undirected graph until there are no edges left.\nPlayer 2 wins if the edges they remove contains a spanning tree, player 1 wins if the set of edges they remove would disconnect the original graph.\n\nIs it true that exactly one player wins this game? In other words, is the following statement true?\n\n“It is NOT the case that after the game has been played, both players can claim a win.”\n\nYes\nNo\n\n\nWhich player wins on a path?\n\n\nPlayer 1\nPlayer 2\n\n\nWhich player wins on a complete graph?\n\n\nPlayer 1\nPlayer 2\n\n\nComplete this sentence: player 2 has the winning strategy if and only if the graph contains BLANK.\n\n(No marks for answering this question, take your best guess :) )\n\n\n\n\n\n\n\n\nHeads Up\n\n\n\nPart (3) was under-specified: the second player wins on complete graphs with at least four vertices but the first player has easy wins if the graph is an edge (a complete graph on two vertices) or a triangle (a complete graph on three vertices).\nGrading note: everyone recieves a full grade for this question.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSuppose both players indeed win. Let us delete the edges chosen by the first player. What is left is: (a) the set of edges chosen by the second player and (b) a disconnected graph. But the second player also won, so this set contains a spanning tree. A graph cannot simultaneously admit a spanning tree and be disconnected, this is a contradiction when applied on the graph induced by the leftover edges.\nPlayer 1 can choose any edge in the first step and he already wins.\nAssume that the graph has at least four vertices. Player 2 wins because notice that no matter how the first player plays the first (n-1) steps, it is not enough to disconnect the graph. By chosing edges carefully1, Player 2 can ensure that (s)he has booked a spanning tree already within the first (n-1) moves.\nNo spoilers on this one (yet)."
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w03.html",
    "href": "courses/2023/01-ES242/labs/lab-w03.html",
    "title": "ES242. Data Structures and Algorithms I. Week 03 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Stacks\n\n\n\n\n\n\n\n\n\nProblem 1. Linked Lists\n\n\n\n\n\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head->data   = 10;\n  middle->data = 20;\n  last->data   = 30;\n\n  //connecting each nodes. head->middle->last\n  head->next   = middle;\n  middle->next = last;\n  last->next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d->\",temp->data);\n      temp = temp->next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, p_1, \\ldots, p_n.\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input i, output the number in the linked list that comes before the number i.\n\n\n\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\n\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Parentheses\n\n\n\n\n\nYou are given a string consisting of parentheses ( and ). A string of this type is said to be correct:\n\nif it is the empty string\nif A and B are correct, AB is correct.\nif A is correct, (A) is correct.\n\nWrite a program that takes a sequence of strings of this of type and check their correctness.\nYour program can assume that the maximum string length is 128.\n\n\nThe first line of the input is a positive integer n, the number of tests. The next n lines consist of one test case each. Each test case is a string made of the parentheses ().\n\n\n\nThe output should consist of n lines, one for each test. The i-th line of the ouptut should be Yes if the the string in the i-th test case is correct, and No otherwise.\n\n\n\nSample Input\n5\n(\n(((\n()()\n)\n)))\nSample Output\nNo\nNo\nYes\nNo\nNo\n\n\n\n\n\n\n\n\n\n\nProblem 3. Challenge the Parentheses Solution\n\n\n\n\n\nConsider the following algorithm for the previous problem:\nIf the first character is not ( return FALSE\nIf the last character is not ) return FALSE\nInitialize i = 0\nFor j in s:\n    if j == \"(\":\n        i++\n    else:\n        i--\nif i != 0 return FALSE\nelse return TRUE\nProvide an input for which the algorithm above does not work. Your input should be a single line consisting of a string that has ( and ) characters only.\n\n\n\n\n\n\n\n\n\nProblem 4. Print Alternate Cards\n\n\n\n\n\nAdd a set of cards to a stack and print all the cards in odd-numbered positions of the stack.\n\n\nThe first line contains a number n, the number of cards in the stack. The next n lines contain two numbers. The first number b indicates if the card is to be added on the top (b=0) or at the bottom (b=1). The second number indicates the card’s value, an integer between 1 and 52.\nThe output should the list of alternating cards from bottom to top (i.e, starting at the card pointed to by the first pointer). If there are an even number of cards, note that the last card on the stack does not get printed.\nAdding a card on the top can be done by using pushBack, while adding it at the bottom pushFront.\n\n\n\nSample Input\n5\n0 1\n0 2\n1 3\n1 5\n0 4\nSample Output\n5\n1\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct s_card {\n  int cardvalue;\n  struct s_card *next;\n  struct s_card *prev;\n} t_card;\n\ntypedef struct s_cardstack {\n  struct s_card *first;\n  struct s_card *last;\n} t_cardstack;\n\nt_cardstack *cardstackInit() {\n  t_cardstack *cardstack;\n  cardstack = malloc(sizeof(t_cardstack));\n  cardstack->first = NULL;\n  cardstack->last = NULL;\n  return cardstack;\n}\n\nint isEmpty(t_cardstack *cardstack) { return !cardstack->first; }\n\nvoid pushFront(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node->cardvalue = cardvalue;\n  node->prev = NULL;\n  node->next = cardstack->first;\n  if (isEmpty(cardstack))\n    cardstack->last = node;\n  else\n    cardstack->first->prev = node;\n  cardstack->first = node;\n}\n\nvoid pushBack(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node->cardvalue = cardvalue;\n  node->prev = cardstack->last;\n  node->next = NULL;\n  if (isEmpty(cardstack))\n    cardstack->first = node;\n  else\n    cardstack->last->next = node;\n  cardstack->last = node;\n}\n\nint popFront(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack->first;\n  cardstack->first = node->next;\n  if (!cardstack->first)\n    cardstack->last = NULL;\n  else\n    cardstack->first->prev = NULL;\n  cardvalue = node->cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint popBack(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack->last;\n  cardstack->last = node->prev;\n  if (!cardstack->last)\n    cardstack->first = NULL;\n  else\n    cardstack->last->next = NULL;\n  cardvalue = node->cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint peekFront(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack->first->cardvalue;\n}\n\nint peekBack(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack->last->cardvalue;\n}\n\nvoid *fronttoback(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return NULL;\n  t_card *currpointer = cardstack->last;\n  while (currpointer) {\n    printf(\"%d\\n\", currpointer->cardvalue);\n    currpointer = currpointer->prev;\n  }\n}\n\nint main() { \n  t_cardstack *ms;\n  // Remember to initialize!\n  return 0; \n}\n\n\n\n\n\n\n\n\nCompilers - a slight adaptation of the second problem in this lab.\nAlternating Current - try to come up with a characterization of when the wires can be untangled in terms of the symbols.\nLargest Rectangle in a Histogram - a fun problem. See if you can make use of the cardstack!"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w03.html#es242.-data-structures-and-algorithms-i.",
    "href": "courses/2023/01-ES242/labs/lab-w03.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "ES242. Data Structures and Algorithms I.",
    "text": "ES242. Data Structures and Algorithms I.\n\nLab 02\nBack to course page\n\n\n\n\n\n\nTheme: Stacks\n\n\n\n\n\n\n\n\n\nProblem 1. Linked Lists\n\n\n\n\n\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head->data   = 10;\n  middle->data = 20;\n  last->data   = 30;\n\n  //connecting each nodes. head->middle->last\n  head->next   = middle;\n  middle->next = last;\n  last->next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d->\",temp->data);\n      temp = temp->next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, p_1, \\ldots, p_n.\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input i, output the number in the linked list that comes before the number i.\n\n\nInput\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\nOutput\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Parentheses\n\n\n\n\n\nYou are given a string consisting of parentheses ( and ). A string of this type is said to be correct:\n\nif it is the empty string\nif A and B are correct, AB is correct.\nif A is correct, (A) is correct.\n\nWrite a program that takes a sequence of strings of this of type and check their correctness.\nYour program can assume that the maximum string length is 128.\n\nInput\nThe first line of the input is a positive integer n, the number of tests. The next n lines consist of one test case each. Each test case is a string made of the parentheses ().\n\n\nOutput\nThe output should consist of n lines, one for each test. The i-th line of the ouptut should be Yes if the the string in the i-th test case is correct, and No otherwise.\n\nSample Input\n5\n(\n(((\n()()\n)\n)))\nNo\nNo\nYes\nNo\nNo\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. Challenge the Parentheses Solution\n\n\n\n\n\nConsider the following algorithm for the previous problem:\nIf the first character is not ( return FALSE\nIf the last character is not ) return FALSE\nInitialize i = 0\nFor j in s:\n    if j == \"(\":\n        i++\n    else:\n        i--\nif i != 0 return FALSE\nelse return TRUE\nProvide an input for which the algorithm above does not work. Your input should be a single line consisting of a string that has ( and ) characters only.\n\n\n\n\n\n\n\n\n\nProblem 4. Print Alternate Cards\n\n\n\n\n\nAdd a set of cards to a stack and print all the cards in odd-numbered positions of the stack.\n\nI/O Format\nThe first line contains a number n, the number of cards in the stack. The next n lines contain two numbers. The first number b indicates if the card is to be added on the top (b=0) or at the bottom (b=1). The second number indicates the card’s value, an integer between 1 and 52.\nThe output should the list of alternating cards from bottom to top (i.e, starting at the card pointed to by the first pointer). If there are an even number of cards, note that the last card on the stack does not get printed.\nAdding a card on the top can be done by using pushBack, while adding it at the bottom pushFront.\n\nSample input\n5\n0 1\n0 2\n1 3\n1 5\n0 4\n\n\nSample output\n5\n1\n4\n\n\n\n\n\n\n\nThe Cardstack Data Structure\n\n\n\n\n\n\nNote\n\n\n\n\n\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct s_card {\n  int cardvalue;\n  struct s_card *next;\n  struct s_card *prev;\n} t_card;\n\ntypedef struct s_cardstack {\n  struct s_card *first;\n  struct s_card *last;\n} t_cardstack;\n\nt_cardstack *cardstackInit() {\n  t_cardstack *cardstack;\n  cardstack = malloc(sizeof(t_cardstack));\n  cardstack->first = NULL;\n  cardstack->last = NULL;\n  return cardstack;\n}\n\nint isEmpty(t_cardstack *cardstack) { return !cardstack->first; }\n\nvoid pushFront(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node->cardvalue = cardvalue;\n  node->prev = NULL;\n  node->next = cardstack->first;\n  if (isEmpty(cardstack))\n    cardstack->last = node;\n  else\n    cardstack->first->prev = node;\n  cardstack->first = node;\n}\n\nvoid pushBack(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node->cardvalue = cardvalue;\n  node->prev = cardstack->last;\n  node->next = NULL;\n  if (isEmpty(cardstack))\n    cardstack->first = node;\n  else\n    cardstack->last->next = node;\n  cardstack->last = node;\n}\n\nint popFront(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack->first;\n  cardstack->first = node->next;\n  if (!cardstack->first)\n    cardstack->last = NULL;\n  else\n    cardstack->first->prev = NULL;\n  cardvalue = node->cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint popBack(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack->last;\n  cardstack->last = node->prev;\n  if (!cardstack->last)\n    cardstack->first = NULL;\n  else\n    cardstack->last->next = NULL;\n  cardvalue = node->cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint peekFront(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack->first->cardvalue;\n}\n\nint peekBack(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack->last->cardvalue;\n}\n\nvoid *fronttoback(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return NULL;\n  t_card *currpointer = cardstack->last;\n  while (currpointer) {\n    printf(\"%d\\n\", currpointer->cardvalue);\n    currpointer = currpointer->prev;\n  }\n}\n\nint main() { \n  t_cardstack *ms;\n  // Remember to initialize!\n  return 0; \n}"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w03.html#input-1",
    "href": "courses/2023/01-ES242/labs/lab-w03.html#input-1",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "Input",
    "text": "Input\nThe first line of the input is a positive integer n, the number of tests. The next n lines consist of one test case each. Each test case is a string made of the parentheses ()."
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w03.html#output-1",
    "href": "courses/2023/01-ES242/labs/lab-w03.html#output-1",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "Output",
    "text": "Output\nThe output should consist of n lines, one for each test. The i-th line of the ouptut should be Yes if the the string in the i-th test case is correct, and No otherwise.\n\nSample Input\n5\n(\n(((\n()()\n)\n)))\nNo\nNo\nYes\nNo\nNo"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w03.html#io-format",
    "href": "courses/2023/01-ES242/labs/lab-w03.html#io-format",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "I/O Format",
    "text": "I/O Format\nThe first line contains a number n, the number of cards in the stack. The next n lines contain two numbers. The first number b indicates if the card is to be added on the top (b=0) or at the bottom (b=1). The second number indicates the card’s value, an integer between 1 and 52.\nThe output should the list of alternating cards from bottom to top (i.e, starting at the card pointed to by the first pointer). If there are an even number of cards, note that the last card on the stack does not get printed.\nAdding a card on the top can be done by using pushBack, while adding it at the bottom pushFront.\n\nSample input\n5\n0 1\n0 2\n1 3\n1 5\n0 4\n\n\nSample output\n5\n1\n4"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L05.html",
    "href": "courses/2023/01-CS614/quizzes/L05.html",
    "title": "CS614. Advanced Algorithms. L05 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Approximate Vertex Cover\n\n\n\nGive an example of a graph where the 2-approximate solution (via maximal matchings) is worse than the optimal one. Even just slightly worse is enough :)\n\n\n\n\n\n\n\n\nProblem 2. Approximate Independent Set\n\n\n\nSince the complement of a vertex cover is an independent set, you might be tempted to think that the approximation discussed in class also approximates independent set. In particular, consider the following algorithm for independent set:\n\nRun the 2-approximation for vertex cover discussed in class, let the output be S.\nLet I := V(G) \\setminus S.\nIf I = \\emptyset, then let v \\in V(G) be an arbitrary vertex; set I := \\{v\\}.\n\nLet:\n\np denote the size of a largest independent set in G\nq denote the size of the set obtained by taking the complement of the output of the 2-approximation discussed in class.\nr denote \\max(q,1)\n\nNote that r is the size of the independent set output by the algorithm above.\nCome up with a graph where p can be a factor of cn larger than r for some constant c.\n\n\n\n\n\n\n\n\nProblem 3. Vertex Cover Matroid\n\n\n\nDo the set of vertex covers in a graph G form a matroid over the universe V(G)? If not, select the axiom that fails:\n\nExchange Axiom\nHereditary Axiom\nVertex covers do form a matroid"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/A05.html",
    "href": "courses/2023/01-CS614/quizzes/A05.html",
    "title": "CS614. Advanced Algorithms. L05 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Approximate Vertex Cover\n\n\n\nGive an example of a graph where the 2-approximate solution (via maximal matchings) is worse than the optimal one. Even just slightly worse is enough :)\n\n\n\n\n\n\n\n\nFollow up question\n\n\n\n\n\nWhat are examples of graphs where the 2-approximate solution via maximal matchings is close to optimal? The empty and complete graphs come to mind, are there others?\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEven if the input graph is an edge, a star, or a matching, the 2-approximate solution is already worse by a factor of two.\n\n\n\n\n\n\n\n\n\nProblem 2. Approximate Independent Set\n\n\n\nSince the complement of a vertex cover is an independent set, you might be tempted to think that the approximation discussed in class also approximates independent set. In particular, consider the following algorithm for independent set:\n\nRun the 2-approximation for vertex cover discussed in class, let the output be S.\nLet I := V(G) \\setminus S.\nIf I = \\emptyset, then let v \\in V(G) be an arbitrary vertex; set I := \\{v\\}.\n\nLet:\n\np denote the size of a largest independent set in G\nq denote the size of the set obtained by taking the complement of the output of the 2-approximation discussed in class.\nr denote \\max(q,1)\n\nNote that r is the size of the independent set output by the algorithm above.\nCome up with a graph where p can be a factor of cn larger than r for some constant c.\n\n\n\n\n\n\n\n\nRemark\n\n\n\n\n\nIt was not explicit in the question: G denotes the input graph and n denotes the number of vertices in G.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLet n = 2p and consider a complete bipartite graph K_{p,p}. The optimal independent set has size p but the algorithm above returns 1.\n\n\n\n\n\n\n\n\n\nProblem 3. Vertex Cover Matroid\n\n\n\nDo the set of vertex covers in a graph G form a matroid over the universe V(G)? If not, select the axiom that fails:\n\nExchange Axiom\nHereditary Axiom\nVertex covers do form a matroid\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nA subset of a vertex cover need not be a vertex cover; and in particular, the empty set is also not a vertex cover (although this axiom was not offered as an option)."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L06.html",
    "href": "courses/2023/01-CS614/quizzes/L06.html",
    "title": "CS614. Advanced Algorithms. L06 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the Coursera course on Approximation Algorithms taught by Mark de Berg.\n\n\n\n\n\n\n\n\nProblem 1. Changing the threshold\n\n\n\nConsider the algorithm LPAPX-WVC from the class.\n\n\n\n\n\n\nProblem 1.1 Increasing the threshold\n\n\n\nSuppose that instead of putting a vertex v_i into the cover when x_i \\geqslant 1/2, we put v_i into the cover when x_i \\geqslant 2/3. What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nSuppose that instead of putting a vertex v_i into the cover when x_i \\geqslant 1/2, we put v_i into the cover when x_i \\geqslant 1/3. What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Changing the rounding scheme\n\n\n\nConsider a different rounding strategy for the LP relaxation of the vertex cover problem. Instead of rounding up every vertex whose value is at least 0.5 after running the LP, we do the following:\nWe look at every edge, and then we round up the variable of the endpoint with the highest value, where in case of ties we take the endpoint with the highest index.\nIn other words, if the vertex set is V=\\left\\{v_1, \\ldots, v_n\\right\\} and we denote the associated variable of v_i by x_i then the cover C is computed as follows:\nC:=\\left\\{v_i \\in V:\\right. there is an edge \\left(v_i, v_j\\right) such that \\left(x_i>x_j\\right) or \\left(x_i=x_j\\right. and \\left.\\left.i>j\\right)\\right\\}\nWhich statement is true?\n\nThis does not work, because we might report an invalid solution.\nThis gives a valid solution, but the approximation ratio becomes worse.\nThis gives a valid solution, and in fact the solution is always exactly the same as in the original rounding scheme.\nThis gives a valid solution. We sometimes report a better solution than in the original rounding scheme, but the approximation ratio of the algorithm is still more than 2 - \\epsilon for any \\epsilon > 0.\nThis gives a valid solution, and the approximation ratio of the algorithm becomes 3/2.\n\n\n\n\n\n\n\n\n\nProblem 3. Lower Bound\n\n\n\nSuppose you have created an algorithm for a certain problem using LP relaxation and you want to say something about its approximation ratio. Which lower bound on the optimal solution can you use?\n\nThe solution to the 0/1-LP.\nThe solution to the relaxed LP.\nDepends on the problem.\n\n\n\n\n\n\n\n\n\nProblem 4. Integrality Gap\n\n\n\nWhat is the integrality gap of the vertex-cover LP for the complete graph on n vertices, where all vertices have weight 1?"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/A06.html",
    "href": "courses/2023/01-CS614/quizzes/A06.html",
    "title": "CS614. Advanced Algorithms. L06 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the Coursera course on Approximation Algorithms taught by Mark de Berg.\n\n\n\n\n\n\n\n\nProblem 1. Changing the threshold\n\n\n\nConsider the algorithm LPAPX-WVC from the class.\n\n\n\n\n\n\nProblem 1.1 Increasing the threshold\n\n\n\nSuppose that instead of putting a vertex v_i into the cover when x_i \\geqslant 1/2, we put v_i into the cover when x_i \\geqslant 2/3. What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nSuppose that instead of putting a vertex v_i into the cover when x_i \\geqslant 1/2, we put v_i into the cover when x_i \\geqslant 1/3. What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf we increase the threshold t beyond 0.5, then the output may not even be a vertex cover: for example, consider the example of a complete graph where the LPOPT sets all variables to 0.5: in this case our output will be the empty set with any threshold higher than 0.5.\nIf we decrease the threshold t below 0.5, then the output will be a vertex cover — indeed, if any edge (u,v) is uncovered, then both u and v were set to values less than t, and in particular less than 0.5, so we will violate our edge constraint just as we do when working with a threshold of 0.5. However, by choosing a lower value, we worsen the approximation ratio: in particular, if t = 1/3 then the output is a 3-approximation.\n\n\n\n\n\n\n\n\n\nProblem 2. Changing the rounding scheme\n\n\n\nConsider a different rounding strategy for the LP relaxation of the vertex cover problem. Instead of rounding up every vertex whose value is at least 0.5 after running the LP, we do the following:\nWe look at every edge, and then we round up the variable of the endpoint with the highest value, where in case of ties we take the endpoint with the highest index.\nIn other words, if the vertex set is V=\\left\\{v_1, \\ldots, v_n\\right\\} and we denote the associated variable of v_i by x_i then the cover C is computed as follows:\nC:=\\left\\{v_i \\in V:\\right. there is an edge \\left(v_i, v_j\\right) such that \\left(x_i>x_j\\right) or \\left(x_i=x_j\\right. and \\left.\\left.i>j\\right)\\right\\}\nWhich statement is true?\n\nThis does not work, because we might report an invalid solution.\nThis gives a valid solution, but the approximation ratio becomes worse.\nThis gives a valid solution, and in fact the solution is always exactly the same as in the original rounding scheme.\nThis gives a valid solution. We sometimes report a better solution than in the original rounding scheme, but the approximation ratio of the algorithm is still more than 2 - \\epsilon for any \\epsilon > 0.\nThis gives a valid solution, and the approximation ratio of the algorithm becomes 3/2.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe solution is valid: indeed, let (u,v) be an edge, and recall that the algorithm worked as follows:\nWe look at every edge, \nand then we round up the variable of the endpoint with the highest value, \nwhere in case of ties we take the endpoint with the highest index. \nSince one of the endpoints was rounded up, the edge is covered; and this is evidently true of every edge.\nThe solution with respect to this rounding may be better than the threshold-based rounding: for example, consider again a complete graph where the LPOPT sets all variables to 1/2: the threshold-based rounding leads to a solution of cost n, while the cost here will be strictly less.\nHowever, to see that the approximation ratio of the algorithm is still more than 2 - \\epsilon for any \\epsilon > 0, consider, for example, a cycle on n vertices: one can choose a suitably large value of n to bring the approximation ratio arbitrarily close to 2.\n\n\n\n\n\n\n\n\n\nProblem 3. Lower Bound\n\n\n\nSuppose you have created an algorithm for a certain problem using LP relaxation and you want to say something about its approximation ratio. Which lower bound on the optimal solution can you use?\n\nThe solution to the 0/1-LP.\nThe solution to the relaxed LP.\nDepends on the problem.\n\n\n\n\n\n\n\n\n\nRemark\n\n\n\n\n\nAs was clarified in class, this question is in the context of minimization problems.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe solution to the relaxed LP is a useful lower bound for the OPT. The value of the OPT for the 0/1-LP is exactly equal to the OPT (in a presumed exact formulation of the problem) and does not, by itself, provide information about the behavior of the relaxed LP.\n\n\n\n\n\n\n\n\n\nProblem 4. Integrality Gap\n\n\n\nWhat is the integrality gap of the vertex-cover LP for the complete graph on n vertices, where all vertices have weight 1?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nILPOPT = n-1 and LPOPT = n/2; so the integrality gap is 2 \\cdot (n-1)/n = 2(1 - \\frac{1}{n})."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L07.html",
    "href": "courses/2023/01-CS614/quizzes/L07.html",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the textbook on Parameterized Algorithms by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n\n\n\n\n\n\n\n\nProblem 1. Cluster Vertex Deletion\n\n\n\nIn the Cluster Vertex Deletion problem, we want to know if a simple undirected graph G has a subset S of at most k vertices such that G \\setminus S is a disjoint union of cliques.\n\n\n\n\n\n\nProblem 1.1 A Branching Algorithm\n\n\n\nDesign a 3^k \\cdot n^{\\mathcal{O}(1)} algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nDesign a 3-approximation algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Don’t Satisfy Too Much!\n\n\n\nIn the MIN-2-SAT problem, we are given a 2 -CNF formula \\phi and an integer k, and the objective is to decide whether there exists an assignment for \\phi that satisfies at most k clauses.\nShow that MIN-2-SAT can be solved in time 2^k n^{\\mathcal{O}(1)}."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/A07.html",
    "href": "courses/2023/01-CS614/quizzes/A07.html",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the textbook on Parameterized Algorithms by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n\n\n\n\n\n\n\n\nProblem 1. Cluster Vertex Deletion\n\n\n\nIn the Cluster Vertex Deletion problem, we want to know if a simple undirected graph G has a subset S of at most k vertices such that G \\setminus S is a disjoint union of cliques.\n\n\n\n\n\n\nProblem 1.1 A Branching Algorithm\n\n\n\nDesign a 3^k \\cdot n^{\\mathcal{O}(1)} algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nDesign a 3-approximation algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAs discussed in class, the induced path on three vertices is a forbidden substructure for a cluster graph. We state and prove this fact here for completeness.\n\nClaim. A graph G is a disjoint union of cliques if and only if it does not contain a path on three vertices as an induced subgraph.\nProof (sketch). Suppose G is a disjoint union of cliques, and for the sake of contradiction, suppose it has an induced path on vertices x,y,z with the edges being between x and y, and y and z. Note that since this is an induced path, there is no edge between x and z. Since every component of G is a clique, we know that x and z must be in different components. However, there is a path from x to z via y, which is a contradiction.\nSuppose G does not contain a path on three vertices as an induced subgraph. Again, for the sake of contradiction, suppose G has a connected component that is not a clique. Let (u,v) be a non-edge in this component. Let P be a shortest path between u and v consisting of the vertices:\nP := \\{u, w_1, \\ldots, w_t, \\ldots v\\}.\nNotice that t \\geqslant 1, otherwise (u,v) is an edge. Further, notice that u, w_1, w_2 forms an induced path of length three1 (if (u,w_2) was an edge then we have a shorter path by omitting w_1, contradicting our assumption that P is a shortest path between u and v). This contradicts our assumption.\n\nBased on this, we have the following algorithm:\nCVD(G,k):\n    If k <= 0 and G has an induced P3 - RETURN NO\n    If k >= 0 and G is a cluster graph - RETURN YES\n\n    Let a,b,c be vertices such that ab and bc are edges and ac is not an edge.\n\n    Return (CVD(G-a,k-1) OR CVD(G-b,k-1) OR (G-c,k-1))\nOne can obtain a 3-approximation by enumerating a maximal collection of disjoint induced P_3’s and including all vertices from the collection in the solution. If the collection has size t, we know that any solution (and in particular, the optimal one) must contain at least t vertices and the output has at most 3t vertices. The algorithm is summarized below:\nCVD-3-Approx(G):\n    Init S = emptyset\n\n    While there is an induced P3 = (x,y,z) in G:\n        include (x,y,z) in S\n        G = G - (x,y,z)\n\n    return S\n\n\n\n\n\n\n\n\n\nProblem 2. Don’t Satisfy Too Much!\n\n\n\nIn the MIN-2-SAT problem, we are given a 2-CNF formula \\phi and an integer k, and the objective is to decide whether there exists an assignment for \\phi that satisfies at most k clauses.\nShow that MIN-2-SAT can be solved in time 2^k n^{\\mathcal{O}(1)}.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf there is a variable x that occurs only positively in \\phi, we claim that there exists an optimal assignment that sets it to 0. Indeed, let \\tau be an assignment that sets x to 1. Let \\tau_x be the assignment obtained from \\tau by flipping the value of x from 1 to 0. Note that the clauses that do not contain the variable x are either satisfied or falsified in both \\tau and \\tau_x. For clauses that contain x, it is possible that they are satisfied by \\tau but not by \\tau_x, but not vice versa. Therefore, \\tau_x falsifies at least as many clauses as \\tau, and we are done.\nBased on this, our algorithm proceeds as follows:\nif there is a variable x that occurs only as a positive literal:\n    set x to 0\nif there is a variable x that occurs only as a negated literal:\n    set x to 1\nThe argument for the negated occurrences is symmetric to the one we have for positive literals.\nOnce we perform this preprocessing, assuming that have clauses remaining, we have the following guarantee:\n\nEvery variable has at least one positive and one negated occurrence.\n\nNow we can branch exhuastively on the settings of variables; with the promise that either setting of the variable reduces our budget by at least one. The overall algorithm is summarized in the following pseudocode:\nMINSAT(phi,k):\n    if there is a variable x that occurs only as a positive literal:\n        set x to 0\n    if there is a variable x that occurs only as a negated literal:\n        set x to 1\n\n    if phi is empty:\n        return YES\n    if phi is not empty and k <= 0:\n        return NO\n\n    Let x be any variable that occurs in phi.\n    return MINSAT(phi|[x = TRUE],k-1) OR MINSAT(phi|[x = FALSE],k-1)"
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/q03.html",
    "href": "courses/2023/01-ES242/quizzes/q03.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 03",
    "section": "",
    "text": "Issued: 19 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Party Puzzle I\n\n\n\nThe following is true for n guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any group of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nThe total number of gifts given is at most:\n\n6n\n4n\n3n\nNone of the above\n\n\n\n\n\n\n\n\n\nProblem 2. Party Puzzle II\n\n\n\nIs it possible that there is a group of six people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nProblem 3. Party Puzzle III\n\n\n\nIs it possible that there is a group of five people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers."
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/q04.html",
    "href": "courses/2023/01-ES242/quizzes/q04.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 04",
    "section": "",
    "text": "Issued: 24 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Divide by two\n\n\n\nLet n be a number given in decimal notation. Divide the number by two and push the remainder of each division onto to a cardstack until the number is reduced to 0. Then we pop all elements from the bottom. What is the output?\n\nThe representation of n in binary.\nThe reverse of the representation of n in binary.\nMeaningless and has nothing to do with n.\n\n\n\n\n\n\n\n\n\nProblem 2. Stacks I\n\n\n\nYou have a sequence \\ell of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\ell from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. You never had to pop from an empty stack, and at the end, your stack is empty. Which of the following is true?\n\nThe sequence \\ell does NOT have an equal number of A’s and B’s.\nThe sequence \\ell started with ABBA.\nFor any 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of A’s is at least the number of B’s.\nFor any 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of B’s is at least the number of A’s.\n\n\n\n\n\n\n\n\n\nProblem 3. Stacks II\n\n\n\nYou have a sequence \\ell of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\ell from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. At some point, you had to stop because you were trying to pop from an empty stack. Which of the following is definitely true?\n\nThe sequence \\ell has an equal number of A’s and B’s.\nThe sequence \\ell started with ABBA.\nFor some 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of A’s is strictly more than the number of B’s.\nFor some 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of B’s is strictly more than the number of A’s.\n\n\n\n\n\n\n\n\n\nProblem 3. Navigate this apartment\n\n\n\nConsider the floor plan shown below of a 5-room apartment.\nCan you find a continuous line that pass through each door exactly once? The line does not have to end where it started. Note that there is space to move around the big enclosing rectangle.\n\n\n\nA floor plan\n\n\n\nYes\nNo"
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/a03.html",
    "href": "courses/2023/01-ES242/quizzes/a03.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 03",
    "section": "",
    "text": "Issued: 19 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Party Puzzle I\n\n\n\nThe following is true for n guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any group of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nThe total number of gifts given is at most:\n\n6n\n4n\n3n\nNone of the above\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nObserve that every guest knows at most six people: indeed, if some guest (say P) knows seven people, among the people s/he knows, there must be a pair (say A and B) that know each other; but then we would have a group of three guests, consisting of P, A, and B who all know each other, which contradicts the first condition. So the number of relationships leading to the giving of gifts in this party is at most 6n (summing up, for all guests, the people they know), so 6n is a valid upper bound for the total number of gifts given.\nThere can be parties where more than 4n gifts are given. For example, consider a party where there are two groups of six people each: call these groups X and Y. Suppose everyone in X knows everyone in Y and vice versa, but no pair of people in group X know each other and no pair of people in Y know each other either. Then there are 12 people, each of whom give six gifts each, amounting to a total of 72 gifts being given, which is more than 4n = 4 \\cdot 12 = 48.\n\n\n\n\n\n\n\n\n\nProblem 2. Party Puzzle II\n\n\n\nIs it possible that there is a group of six people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is: NO.\nConsider any person P in a party of six people and note that they either:\n\nknow three people or more, or\ndo not know three people or more.\n\nIndeed, if neither of the above holds, then they:\n\nknow at most two people, and\ndo not know at most two people,\n\nbut this only accounts for four people among the remaining five.\nNow suppose P knows three people: call them A, B, C. If any pair of these three people know each other, then we have three guests who are mutual friends: P along with this pair. If not, then we have a group of three guests who are mutual strangers. So at least one of these two scenarios is always unavoidable.\n\n\n\n\n\n\n\n\n\nProblem 3. Party Puzzle III\n\n\n\nIs it possible that there is a group of five people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is: YES.\nConsider five people A, B, C, D, and E; where:\n\nA knows B\nB knows C\nC knows D\nD knows E\nE knows A\n\nDrawn out as a graph (with undirected edges representing the “knowing each other” relationship, which was given to be mutual), this will look like a pentagon or a cycle on five vertices. Note that there is no triangle, and no subset of three vertices with no edges between them. This is equivalent to saying that there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers, as asked."
  },
  {
    "objectID": "courses/2023/01-ES242/quizzes/a04.html",
    "href": "courses/2023/01-ES242/quizzes/a04.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 04",
    "section": "",
    "text": "Issued: 24 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Divide by two\n\n\n\nLet n be a number given in decimal notation. Divide the number by two and push the remainder of each division onto to a cardstack until the number is reduced to 0. Then we pop all elements from the bottom. What is the output?\n\nThe representation of n in binary.\nThe reverse of the representation of n in binary.\nMeaningless and has nothing to do with n.\n\n\n\n\n\n\n\n\n\nClarification\n\n\n\nWhen we say “until the number is reduced to 0”, the successive divisions are meant to be applied on the quotient obtained from the previous divison operation. Also, note that we push to the top and pop from the bottom of the stack.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis is the standard algorithm for converting a number from decimal to binary notation. Let us look at an example execution with the number 19:\n\nthe first divison yields a remainder of 1 with a quotient of 9,\nthe second divison yields a remainder of 1 with a quotient of 4,\nthe third divison yields a remainder of 0 with a quotient of 2,\nthe fourth divison yields a remainder of 0 with a quotient of 1,\nthe fifth divison yields a remainder of 1 with a quotient of 0,\n\nWe push 1, 1, 0, 0, and 1 on to the stack in that order. We pop from the bottom, so the output we get is the numbers pushed on to the stack in the same order as they were pushed: 11001 — note that if we popped from the top, then the output would have reversed this order.\nThe correct answer is that the output is the reverse of the representation of n in binary. We omit here a formal justification of this fact, but you can convince yourself by combining your understanding of the standard conversion algorithm along with the behavior of the stack operations.\n\n\n\n\n\n\n\n\n\nProblem 2. Stacks I\n\n\n\nYou have a sequence \\ell of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\ell from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. You never had to pop from an empty stack, and at the end, your stack is empty. Which of the following is true?\n\nThe sequence \\ell does NOT have an equal number of A’s and B’s.\nThe sequence \\ell started with ABBA.\nFor any 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of A’s is at least the number of B’s.\nFor any 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of B’s is at least the number of A’s.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSince the described behavior of the stack implicitly guarantees a bijection between the A’s and B’s in the string, the first option is not true. Also, consider the sequence \\ell given by AB. It matches the described behavior, and does not begin with ABBA, so the second and fourth options are also false (set k = 1 for option four).\nTo see that the third option is indeed true, notice that if it was not, then there exists some k \\in [\\ell] for which the first k entries of the sequence \\ell have strictly more B’s than A’s, but in this situation notice that we would have to attempt popping from an empty stack: but it is promised that this does happen.\n\n\n\n\n\n\n\n\n\nProblem 3. Stacks II\n\n\n\nYou have a sequence \\ell of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\ell from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. At some point, you had to stop because you were trying to pop from an empty stack. Which of the following is definitely true?\n\nThe sequence \\ell has an equal number of A’s and B’s.\nThe sequence \\ell started with ABBA.\nFor some 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of A’s is strictly more than the number of B’s.\nFor some 1 \\leq k \\leq \\ell, if you read first k entries of the sequence \\ell the number of B’s is strictly more than the number of A’s.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe first option is not definitely true: for example, the sequence ABB would match the described behavior and does not have an equal number of A’s and B’s. The second option is also not necessarily true for similar reasons. The example of the sequence B rules out the third option. Note that the fourth option must be true, because if it were not, then we would have the behavior described in the previous question instead of what is described here.\n\n\n\n\n\n\n\n\n\nProblem 3. Navigate this apartment\n\n\n\nConsider the floor plan shown below of a 5-room apartment.\nCan you find a continuous line that pass through each door exactly once? The line does not have to end where it started. Note that there is space to move around the big enclosing rectangle.\n\n\n\nA floor plan\n\n\n\nYes\nNo\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNote that three rooms have five doors, so such a path is not possible."
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w04.html",
    "href": "courses/2023/01-ES242/labs/lab-w04.html",
    "title": "ES242. Data Structures and Algorithms I. Week 04 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Graph Representations and Euler Tours\n\n\n\n\n\n\n\n\n\nProblem 1. Adjacency Matrix\n\n\n\n\n\nThe goal of this exercise is to:\n\nRead a graph and store it as an adjacency matrix.\nReturn the largest degree, that is to say, return max(d(v)) over all vertices v in the graph G.\n\n\nYou can visualize the execution of a simplified version of the template code here.\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\n\n\n\nThe output is a single integer, corresponding to the maximum degree of the graph.\n\n\n\nSample Input\n5 4\n0 1\n0 2\n0 3\n0 4\nSample Output\n4\n\n\n\n// Adjacency Matrix representation in C\n#include <stdio.h>\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n\n  int m;\n  scanf(\"%d\", &m);\n\n  int G[n][n];\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < n; j++)\n      G[i][j] = 0;\n\n  for (int i = 0; i < m; i++) {\n    // Write the logic to read the endpoints of the edge here.\n    // ...\n    \n    // Write the logic to add the edge just read next.\n    // ...\n  }\n\n  int maxdegree = 0;\n\n  // Write the logic to print the maxdegree of the graph here.\n  // ...\n\n  printf(\"%d\", maxdegree);\n  return 0;\n\n}\n\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency List\n\n\n\n\n\nIn this exercise your goal is to implement a graph as an adjacency list and determine, given a pair of vertices u and v, the number of common nieghbors that they have: that is, the number of vertices w such that w is adjacent to u AND w is adjacent to v (note that w is not equal to either u or v).\nYou can visualize the execution of a simplified version of the template code here.\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is a single integer, corresponding to the number of common neighbors of x and y.\n\n\n\nSample Input\n6 8\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n0 5\nSample Output\n4\n\n\n\n#include <stdio.h>\n#include <stdlib.h>\n\n// A structure to represent an adjacency list node\nstruct AdjListNode {\n  int vertex;\n  struct AdjListNode *next;\n};\n\n// A structure to represent a graph. A graph is an array of adjacency lists.\n// Size of array will be V (number of vertices in graph)\nstruct Graph {\n  int n;\n  struct AdjListNode* vertices;\n};\n\n// A utility function to create a new adjacency list node\nstruct AdjListNode* newAdjListNode(int v) {\n  struct AdjListNode *newNode =\n      (struct AdjListNode *)malloc(sizeof(struct AdjListNode));\n  newNode->vertex = v;\n  newNode->next = NULL;\n  return newNode;\n}\n\n// A utility function that creates a graph of V vertices\nstruct Graph *createGraph(int V) {\n  struct Graph *graph = (struct Graph*)malloc(sizeof(struct Graph));\n  graph->n = V;\n  \n  graph->vertices = (struct AdjListNode*) malloc(V * sizeof(struct AdjListNode));\n  int i;\n  for (i = 0; i < V; ++i){\n    graph->vertices[i].next = NULL;\n    graph->vertices[i].vertex = -1;\n  }\n\n  return graph;\n}\n\n// Adds an edge to an undirected graph\nvoid addEdge(struct Graph *graph, int src, int dest) {\n  // Add an edge from src to dest.  A new node is added to the adjacency\n  // list of src.  The node is added at the begining\n  struct AdjListNode *newNode = newAdjListNode(dest);\n  newNode->next = graph->vertices[src].next;\n  graph->vertices[src].next = newNode;\n\n  // Since graph is undirected, add an edge from dest to src also. Write this part below.\n  // ...\n}\n\nint main() {\n\n  int n;\n  scanf(\"%d\", &n);\n\n  struct Graph *G = createGraph(n);\n\n  int m;\n  scanf(\"%d\", &m);\n\n  for (int i = 0; i < m; i++) {\n    int u, v;\n    scanf(\"%d\", &u);\n    scanf(\"%d\", &v);\n    addEdge(G, u, v);\n  }\n\n  int x, y;\n  \n  scanf(\"%d %d\", &x, &y);\n\n  // Write your solution here.\n  \n  return 0;\n}\n\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\n\n\nYou have to store the edges of a given graph as an edge list, and compute the degree of a given vertex.\nFor understanding how the template code works refer to this execution on a hard-coded example.\n\n\nThe first line contains a number m, which is the number of edges in the graph G.\nThe next m lines contain two space-separated integers represnting the endpoints of the edges.\nThe last line contains a single integer k.\n\n\n\nThe task is to report the degree of the vertex k, that is, the number of edges for which k is one of the endpoints.\n\n\n\nSample Input\n6\n1 3\n2 1\n5 3\n1 7\n1 8\n2 5\n1\nSample Output\n4\n\n\n\n#include <stdio.h>\n\n// Declare a datatype that stores a single edge.\n\nstruct SingleEdge {\n  int ep[2];\n  struct SingleEdge *nextedge;\n};\n\nint main(void) {\n\n  // To begin with, there was nothing.\n  struct SingleEdge *head = NULL;\n  head = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n  struct SingleEdge *current = NULL;\n  current = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n  // head simply points to the first element of the list.\n  // current will move forward as things get added.\n\n  head->ep[0] = -1;\n  head->ep[1] = -1;\n  head->nextedge = current;\n\n  // Read the number of edges.\n\n  int m;\n  scanf(\"%d\", &m);\n\n  for (int i = 0; i < m; i++) {\n\n    struct SingleEdge *newedge;\n\n    newedge = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n    // Populate the newedge struct\n    // with information about the current edge.\n\n    current->nextedge = newedge;\n    current = newedge;\n  }\n\n  struct SingleEdge *navigator = head->nextedge;\n  int degree = 0;\n  int vertex;\n\n  scanf(\"%d\", &vertex);\n\n  while (navigator) {\n    // CHECK IF \"vertex\" is an endpoint\n    // of the current edge being explored.\n    if (...) {\n      degree = degree + 1;\n    }\n    navigator = navigator->nextedge;\n  }\n\n  printf(\"%d\", degree);\n\n  return 0;\n}\n\n\n\n\n\n\n\n\n\n\nProblem 4. Sanity Check\n\n\n\n\n\nGiven a simple (no selfloops or multiedges), connected (any two vertices are reachable from each other), and undirected (no edge orientations) graph as input, return YES if it has a Euler path OR circuit, and NO otherwise.\nYou may assume the following:\n\nAn undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.\nAn undirected graph has an Eulerian path if and only if exactly zero or two vertices have odd degree, and all of its vertices with nonzero degree belong to a single connected component.\n\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\n\n\n\nOutput YES if it has a Euler path or circuit, and NO otherwise.\n\n\n\nSample Input\n10 6\n1 3\n2 1\n5 3\n1 7\n1 8\n2 5\nSample Output\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 5. [Optional] Which Way is the Highway?\n\n\n\n\n\nImagine a grid country with nm axis-parallel highways (no kidding: check out this video about the U.S. interstate highway numbering system! - watching the video is not required for understanding this problem).\nOf these highways, n are east-west and m are north-south. Note that the highways form an (n - 1) \\times (m - 1) grid. In order to control the traffic, a policy was enforced which involved making each highway one way.\nThis means in each east-west highway, the traffic moves from “left to right” or “right to left”. Also, traffic moves “top to bottom” or “bottom to top” in each highway that runs north-south. It is possible to enter a horizontal highway from a vertical highway, or vice versa, at their intersection.\nA proposed set of orientations is given to you. You have to figure out if it is possible, after making the highways one-way based on these suggested orientations, if it is possible to reach any intersection from any other (without breaking traffic rules!)\n\n\nThe first line of input contains two integers n and m, denoting the number of east-west highways and the number of north-south highways.\nThe second line contains a string of length n, made of characters ‘{’ and ‘}’, denoting direction of each horizontal highway. If the i-th character is equal to ‘{’, the highway is directed from right to left otherwise, the highway is directed from left to right. Highways are listed in order from top to bottom.\nThe third line contains a string of length m, made of characters ‘B’ and ‘T’, denoting direction of each vertical highway. If the i-th character is equal to ‘T’, the highway is directed from south to north (towards the top), and if it is ‘B’ the highway is directed from north to south (towards the bottom). Highways are listed in order from left to right.\n\n\n\nIf the given pattern meets the mayor’s criteria, print a single line containing “YES”, otherwise print a single line containing “NO”.\n\n\n\nSample Input\n3 3\n}{}\nBTB\nSample Output\nNO\nSample Input\n4 6\n{}{}\nBTBTBT\nSample Output\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 6. [Optional] Edge Orientation Puzzle\n\n\n\n\n\nLet’s say that a vertex in a directed graph is balanced if its indegree is the same as its outdegree.\nYou are given a simple and undirected graph G. An orientation of G is an assigment of a direction to every edge in G.\nYou want to come up with an orientation that maximizes the number of balanced vertices.\nReturn the number of balanced vertices in a orientation that maximizes this number.\n\n\nThe first line contains a positive integer t~(1 \\leqslant t \\leqslant 200) — the number of testsets in the input.\nEach of the testsets is given in the following way.\nThe first line contains two integers n and m (1 \\leqslant n \\leqslant 200, 0 \\leqslant m \\leqslant n·(n - 1) / 2) — the number of vertices and the number of edges in G.\nThe next m lines contain the description of the edges. Each line contains two integers u and v (1 \\leqslant u, v \\leqslant n) — the endpoints of the edge. It’s guaranteed that there are no self-loops and multiedges. It is possible that the graph is not connected.\n\n\n\nFor each testset print the number of balanced vertices in an orientation that maximizes the number of balanced vertices.\n\n\n\nSample Input\n2\n5 5\n2 1\n4 5\n2 3\n1 3\n3 5\n7 2\n3 7\n4 2\nSample Output\n3\n3\nHere is an orientation of the first graph that has three balanced vertices:\n1 3\n3 5\n5 4\n3 2\n2 1\nIn the second graph, no matter how the two edges are oriented, there will be four imbalanced and three balanced vertices.\n\n\n\n\n\n\n\n\n\nWeird Journey - if you already know how to check if a graph is connected, go for this! Otherwise you could come back to it after learning BFS/DFS :)\nROOKPATH - can you figure out how to model this problem as finding an Euler Tour?\nMashtali: a Space Oddysey - at least one method of solving this question involves constructing an Euler tour (but it is less direct than the previous problem), revisit it once you have figured out how to."
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w05.html",
    "href": "courses/2023/01-ES242/labs/lab-w05.html",
    "title": "ES242. Data Structures and Algorithms I. Week 05 Lab",
    "section": "",
    "text": ":::{.column-body-outset}"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w05.html#es242.-data-structures-and-algorithms-i.",
    "href": "courses/2023/01-ES242/labs/lab-w05.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 05 Lab",
    "section": "ES242. Data Structures and Algorithms I.",
    "text": "ES242. Data Structures and Algorithms I.\n\nLab 05\nBack to course page\n\n\n\n\n\n\nBreadth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement BFS\n\n\n\n\n\nIn this exercise your goal is to output a BFS traversal of a given graph G starting from a given source s.\n\nInput Format\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\nOutput Format\nThe output is formatted as follows: if the BFS lasts for t rounds, there are t lines of output. The i-th line consists of a space-separated list of the vertices visited by BFS in the i-th round of the traversal in increasing order of labels.\n\n\nSample I/O\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0\n1 2 3 4\n5\n\n\n\n\n\n\n\n\n\n\nProblem 2. Unique Servers\n\n\n\n\n\nNetworking company Dagm is reponsible for extending internet services to town Xelo with n devices. To deploy such services, and guarantee their connection to the internet, Dagm has set up x services in its head office.\nYou are given a matrix same_server[n][n] which denotes if two devices are always connected to the same server. It implies, same_serve[i][j]=1 if device i and j are facilitated by the same server. Else, it is 0.\nYour task is compute the number x. That is, the number of unique servers set up by Dagm.\nYou are asked to complete the count_unique_servers() function in line 8\nConsider the illustration below:\n\n\n\nAn Example\n\n\nHere, number of unique servers is 2 (S1 and S2).\n\nInput Format\nThe first line contains an integer n, the number of devices in the city. The next n input line contains n space separated integers (0 or 1).\n\n\nOutput Format\nOutput a single number representing the answer.\nSample Input 1\n7\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n0 0 0 1 0 1 1\nSample Output 1\n2\n\nSample Input 2\n10 \n1 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 1 0\n0 0 0 0 0 0 0 0 0 1\nSample Output 2\n10"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w05.html#list-of-practice-problems",
    "href": "courses/2023/01-ES242/labs/lab-w05.html#list-of-practice-problems",
    "title": "ES242. Data Structures and Algorithms I. Week 05 Lab",
    "section": "List of Practice Problems",
    "text": "List of Practice Problems\n\nWonderland Chase This Google Code Jam Finals problem from 2022 has a small test case that can be solved by brute force but you’d need to apply BFS to solve the advanced test set.\nBlizzard Basin This Day 24 AoC question from 2022 involves a constantly changing graph. Can you make your way out? Give it a shot!"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w06.html",
    "href": "courses/2023/01-ES242/labs/lab-w06.html",
    "title": "ES242. Data Structures and Algorithms I. Week 06 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nBreadth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement BFS\n\n\n\n\n\nIn this exercise your goal is to output a BFS traversal of a given graph G starting from a given source s.\n\n\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is formatted as follows: if the BFS lasts for t rounds, there are t lines of output. The i-th line consists of a space-separated list of the vertices visited by BFS in the i-th round of the traversal in increasing order of labels.\n\n\n\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0\n1 2 3 4\n5\n\n\n\n\nNote. This was a worked out example and the code is here. Please note that there some very minor changes from the version discussed in class to account for proper printing of whitespace in the output.\n\n\n\n\n\n\nProblem 2. Unique Servers\n\n\n\n\n\nNetworking company Dagm is reponsible for extending internet services to town Xelo with n devices. To deploy such services, and guarantee their connection to the internet, Dagm has set up x services in its head office.\nYou are given a matrix same_server[n][n] which denotes if two devices are always connected to the same server. It implies, same_serve[i][j]=1 if device i and j are facilitated by the same server. Else, it is 0.\nYour task is compute the number x. That is, the number of unique servers set up by Dagm.\nYou are asked to complete the count_unique_servers() function in line 8\nConsider the illustration below:\n\n\n\nAn Example\n\n\nHere, number of unique servers is 2 (S1 and S2).\n\n\nThe first line contains an integer n, the number of devices in the city. The next n input line contains n space separated integers (0 or 1).\n\n\n\nOutput a single number representing the answer.\nSample Input 1\n7\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n0 0 0 1 0 1 1\nSample Output 1\n2\n\nSample Input 2\n10 \n1 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 1 0\n0 0 0 0 0 0 0 0 0 1\nSample Output 2\n10\n\n\n\n\n\n\n\n\n\nWonderland Chase This Google Code Jam Finals problem from 2022 has a small test case that can be solved by brute force but you’d need to apply BFS to solve the advanced test set.\nBlizzard Basin This Day 24 AoC question from 2022 involves a constantly changing graph. Can you make your way out? Give it a shot!"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w06.html#es242.-data-structures-and-algorithms-i.",
    "href": "courses/2023/01-ES242/labs/lab-w06.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 06 Lab",
    "section": "ES242. Data Structures and Algorithms I.",
    "text": "ES242. Data Structures and Algorithms I.\n\nLab 06\nBack to course page\n\n\n\n\n\n\nBreadth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement BFS\n\n\n\n\n\nIn this exercise your goal is to output a BFS traversal of a given graph G starting from a given source s.\n\nInput Format\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\nOutput Format\nThe output is formatted as follows: if the BFS lasts for t rounds, there are t lines of output. The i-th line consists of a space-separated list of the vertices visited by BFS in the i-th round of the traversal in increasing order of labels.\n\n\nSample I/O\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0\n1 2 3 4\n5\n\n\n\n\n\n\n\n\n\n\nProblem 2. Unique Servers\n\n\n\n\n\nNetworking company Dagm is reponsible for extending internet services to town Xelo with n devices. To deploy such services, and guarantee their connection to the internet, Dagm has set up x services in its head office.\nYou are given a matrix same_server[n][n] which denotes if two devices are always connected to the same server. It implies, same_serve[i][j]=1 if device i and j are facilitated by the same server. Else, it is 0.\nYour task is compute the number x. That is, the number of unique servers set up by Dagm.\nYou are asked to complete the count_unique_servers() function in line 8\nConsider the illustration below:\n\n\n\nAn Example\n\n\nHere, number of unique servers is 2 (S1 and S2).\n\nInput Format\nThe first line contains an integer n, the number of devices in the city. The next n input line contains n space separated integers (0 or 1).\n\n\nOutput Format\nOutput a single number representing the answer.\nSample Input 1\n7\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n0 0 0 1 0 1 1\nSample Output 1\n2\n\nSample Input 2\n10 \n1 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 1 0\n0 0 0 0 0 0 0 0 0 1\nSample Output 2\n10"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w06.html#list-of-practice-problems",
    "href": "courses/2023/01-ES242/labs/lab-w06.html#list-of-practice-problems",
    "title": "ES242. Data Structures and Algorithms I. Week 06 Lab",
    "section": "List of Practice Problems",
    "text": "List of Practice Problems\n\nWonderland Chase This Google Code Jam Finals problem from 2022 has a small test case that can be solved by brute force but you’d need to apply BFS to solve the advanced test set.\nBlizzard Basin This Day 24 AoC question from 2022 involves a constantly changing graph. Can you make your way out? Give it a shot!"
  },
  {
    "objectID": "courses/2023/01-ES242/exams/exam01.html",
    "href": "courses/2023/01-ES242/exams/exam01.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 01",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 1 at the usual classroom venue. The exam will be released on Gradescope by 9:05PM, and will be available until 10:30PM.\nAll questions are multiple choice or require a numeric answer. Do not enter any explanations for any questions. If required, we will follow up with individual vivas to understand any alternate explanations you had in mind.\nYou have been asked to rate your confidence for all answers that you give. Please see this slide for the grading scheme and instructions.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array A and the number of days D. Let f(A,D) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate f(A,D). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if A is the array (1,2,1,3) and D = 0 then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and D = 1, what is f(A,D)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf A = (500) and D = 120, what is f(A,D)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and D = 10, what is f(A,D)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf A has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\n::: Problem 4. A Bit of a Graph\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex u is denoted by b_u; and\nan edge from u to v if the corresponding bit strings are such that the last three bits of b_u is the same as the first three bits of b_v.\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?\n:::"
  },
  {
    "objectID": "courses/2023/01-ES242/exams/exam01.html#es242.-data-structures-and-algorithms-i.",
    "href": "courses/2023/01-ES242/exams/exam01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01",
    "section": "ES242. Data Structures and Algorithms I.",
    "text": "ES242. Data Structures and Algorithms I.\n\nExam 01\nIssued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing)? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2, 1), (1, 3), (1,2, 1), (2, 1,3), (1,2, 1, 3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array A and the number of days D. Let f(A,D) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate f(A,D). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\n\n\n\n\n\n\nProblem 3.1\n\n\n\nIf A = (1,2,1,3) and D = 1, what is f(A,D)?\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\nIf A = (500) and D = 120, what is f(A,D)?\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\nIf A = (1,2) and D = 10, what is f(A,D)?\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\nIf A has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\n\n\nProblem 3.5\n\n\n\nSuppose you try to solve this problem by simulating the process. If you generate an array of length one at any step, you can:\n\nDiscard this array.\nAdd the value of the only element in the array to the answer and then discard this array.\nAdd D times the value of the only element in the array to the answer and then discard this array.\nIf the array was generated in the i-th step, we add D-i times the value of the only element in the array to the answer and then discard this array.\nIf the array was generated in the i-th step, we add (D-i+1) times the value of the only element in the array to the answer and then discard this array."
  },
  {
    "objectID": "courses/2023/01-ES242/exams/solutions-01.html",
    "href": "courses/2023/01-ES242/exams/solutions-01.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 01 - Solutions",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nRemark\n\n\n\nThe question indices may be different from what you see on Gradescope because of the extra confidence rating questions. Multiply by two and subtract one from the question number to map it to Gradescope :)\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIf the top face is rotated then the bottom face is the only face that is certainly not affected. The top face itself may not be affected (for example, when all stickers on the top face have the same color), however, this is not guaranteed.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWhile the index of the location in the linked list can be calculated in constant time, since we do not have direct access, the linked list approach will require more steps in the worst case.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe answer is 32 by direct inspection.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe cubie approach requires employing a total of 40 units of memory, which is less than the 54 units we needed in the other two approaches.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four corner cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four edge cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFirst, let us argue that Z is a matching. Suppose not: this means that some woman appears in more than one pair. Suppose there are two men p and q who are both matched to a woman b. Then p and q both prefer b over their matched partners in the matching where they are not matched to b. Now:\n\nIf b prefers p over q, and p was matched to b in the matching X, then observe that b must have been matched to q in Y and (p,b) is a blocking pair for Y.\nIf b prefers p over q, and p was matched to b in the matching Y, then observe that b must have been matched to q in X and (p,b) is a blocking pair for X.\nIf b prefers q over p, and q was matched to b in the matching X, then observe that b must have been matched to p in Y and (q,b) is a blocking pair for Y.\nIf b prefers q over p, and q was matched to b in the matching Y, then observe that b must have been matched to p in X and (q,b) is a blocking pair for X.\n\nIn all cases, we have a contradiction to the assumption that both X and Y are stable.\nSo Z is a matching. We now argue that Z is stable. Suppose not, and let (a,b) be a blocking pair in Z, with a being the man and b being the woman. Further, let the matched partner of a in Z be p and the matched partner of b in Z be q.\nNote that b was matched to q in either X or Y. Suppose b was matched to q in X. In X, a is matched either to p or someone that a prefers less to p. Since a prefers b over p (since (a,b) is a blocking pair), a prefers b over his matched partner in X. We already know that b prefers a over q for the same reason. So, (a,b) remains a blocking pair in the matching X, which contradicts our assumption that X was stable.\nA similar argument holds if b was matched to q in Y, where we contradict the stability of Y instead.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIt turns out that Z is always a stable matching, the argument is analogous to the previous question.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array A and the number of days D. Let f(A,D) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate f(A,D). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if A is the array (1,2,1,3) and D = 0 then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and D = 1, what is f(A,D)?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n34\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf A = (500) and D = 120, what is f(A,D)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and D = 10, what is f(A,D)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf A has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4. A Bit of a Graph\n\n\n\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex u is denoted by b_u; and\nan edge from u to v if the corresponding bit strings are such that the last three bits of b_u is the same as the first three bits of b_v.\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n16\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n32\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTwo\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYes"
  },
  {
    "objectID": "courses/2023/01-ES242/exams/solutions01.html",
    "href": "courses/2023/01-ES242/exams/solutions01.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 01 - Solutions",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nRemark\n\n\n\nThe question indices may be different from what you see on Gradescope because of the extra confidence rating questions. Multiply by two and subtract one from the question number to map it to Gradescope :)\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIf the top face is rotated then the bottom face is the only face that is certainly not affected. The top face itself may not be affected (for example, when all stickers on the top face have the same color), however, this is not guaranteed.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWhile the index of the location in the linked list can be calculated in constant time, since we do not have direct access, the linked list approach will require more steps in the worst case.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe answer is 32 by direct inspection.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe cubie approach requires employing a total of 40 units of memory, which is less than the 54 units we needed in the other two approaches.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four corner cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four edge cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFirst, let us argue that Z is a matching. Suppose not: this means that some woman appears in more than one pair. Suppose there are two men p and q who are both matched to a woman b. Then p and q both prefer b over their matched partners in the matching where they are not matched to b. Now:\n\nIf b prefers p over q, and p was matched to b in the matching X, then observe that b must have been matched to q in Y and (p,b) is a blocking pair for Y.\nIf b prefers p over q, and p was matched to b in the matching Y, then observe that b must have been matched to q in X and (p,b) is a blocking pair for X.\nIf b prefers q over p, and q was matched to b in the matching X, then observe that b must have been matched to p in Y and (q,b) is a blocking pair for Y.\nIf b prefers q over p, and q was matched to b in the matching Y, then observe that b must have been matched to p in X and (q,b) is a blocking pair for X.\n\nIn all cases, we have a contradiction to the assumption that both X and Y are stable.\nSo Z is a matching. We now argue that Z is stable. Suppose not, and let (a,b) be a blocking pair in Z, with a being the man and b being the woman. Further, let the matched partner of a in Z be p and the matched partner of b in Z be q.\nNote that b was matched to q in either X or Y. Suppose b was matched to q in X. In X, a is matched either to p or someone that a prefers less to p. Since a prefers b over p (since (a,b) is a blocking pair), a prefers b over his matched partner in X. We already know that b prefers a over q for the same reason. So, (a,b) remains a blocking pair in the matching X, which contradicts our assumption that X was stable.\nA similar argument holds if b was matched to q in Y, where we contradict the stability of Y instead.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIt turns out that Z is always a stable matching, the argument is analogous to the previous question.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array A and the number of days D. Let f(A,D) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate f(A,D). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if A is the array (1,2,1,3) and D = 0 then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and D = 1, what is f(A,D)?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n34\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf A = (500) and D = 120, what is f(A,D)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and D = 10, what is f(A,D)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf A has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4. A Bit of a Graph\n\n\n\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex u is denoted by b_u; and\nan edge from u to v if the corresponding bit strings are such that the last three bits of b_u is the same as the first three bits of b_v.\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n16\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n32\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTwo\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYes"
  },
  {
    "objectID": "courses/2023/01-CS614/exams/E01.html",
    "href": "courses/2023/01-CS614/exams/E01.html",
    "title": "CS614. Advanced Algorithms. Exam 1.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nRemarks\n\n\n\nProblem indices on Gradescope for Problem 1 are off-by-one. Add one to the index here to match to Gradescope.\nErrata based on feedback from the class (thanks!) — these changes have been made in the questions below:\n\nQ5: it should have been v \\in S and not v \\in G.\nQ1.4: assume that the cycles C and D are edge-disjoint.\nQ1.6: the last return statement is G and not G-v (the vertex v is moved to F, not removed from the graph).\n\n\n\n\n\n\n\n\n\nProblem 1. The Constrained Cycle Hitting Set (CCHS) Problem.\n\n\n\n\n\n\n\n\n\nMarks Distribution.\n\n\n\nThis problem is worth 20 points overall. All subproblems carry two points each except 1.9 (which is zero marks).\n\n\nLet G = (V,E) be a simple and undirected graph. Let F \\subseteq V be a subset of vertices that we will call a forbidden subset. An instance of CCHS is given by (G,F,k), where k \\in \\mathbb{Z}^+ is a budget. Such an instance is a YES-instance if there exists a subset of S \\subseteq V \\setminus F such that:\n\n|S| \\leqslant k, and\nG \\setminus S is a forest, i.e, there are no cycles.\n\nSuch a subset is called a constrained cycle hitting set with respect to F. In this question, we will develop a c^k algorithm for solving a CCHS instance, combining reduction and branching rules in a spirit somewhat similar to what we have done for Vertex Cover in class.\nOur goal will be to return a solution, i.e, a subset of vertices that is a constrained cycle hitting set with respect to F. In particular, an informal overview of our approach, detailed further in the questions below, is the following:\n\nWe will eliminate low-degree (vertices of degree at most one) vertices, and branch on high-degree vertices.\nFor the base case, we will find ourselves “stuck” when the graph only has vertices of degree at most two, but this can be handled in polynomial time.\n\nOur algorithm will be denoted solve-CCHS(G,F,k). We begin the following straightforward rules:\n\nIf k < 0, return NO.\nIf V(G) = \\emptyset, return \\emptyset.\n\n\n\n\n\n\n\nProblem 1.0 No Hope Rule\n\n\n\n\n\nSuppose G[F] has a cycle C. Note that all vertices of C belong to F. Then return:\n\nNO\nsolve-CCHS(G-v,F-v,k-1) where v is a maximum degree vertex from C.\nsolve-CCHS(G-v,F-v,k-1) where v is a minimum degree vertex from C.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.1 Low Degree Rule.\n\n\n\n\n\nIf a vertex v has degree zero or one, then return:\n\nsolve-CCHS(G-v,F-v,k).\nsolve-CCHS(G-v,F-v,k-1).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Forced Vertex Rule.\n\n\n\n\n\nIf a vertex v \\in G \\setminus F has two neighbors in a single connected component of G[F], then return:\n\nsolve-CCHS(G-v,F,k).\nsolve-CCHS(G-v,F,k-1).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.3 High Degree Vertex Has Low Degree - Structure I\n\n\n\n\n\nLet v be a vertex of maximum degree in G \\setminus F, and suppose G is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that d(v) = 2.\nLet C be a cycle in G. Which of the following scenarios are not feasible?\n\nC \\cap F \\neq \\emptyset and C \\cap (V \\setminus F) \\neq \\emptyset\nC \\cap F = \\emptyset and C \\cap (V \\setminus F) \\neq \\emptyset\nC \\cap F \\neq \\emptyset and C \\cap (V \\setminus F) = \\emptyset\n\nPick the correct option and justify your answer briefly.\n\n\n\n\n\n\n\n\n\nProblem 1.4 High Degree Vertex Has Low Degree - Structure II\n\n\n\n\n\nLet v be a vertex of maximum degree in G \\setminus F, and suppose G is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that d(v) = 2.\nLet C and D be two edge-disjoint cycles in G. Which of the following scenarios are not feasible?\n\nC \\cap D \\neq \\emptyset\n(C \\cap F) \\cap (D \\cap F) \\neq \\emptyset\n(C \\cap (V\\setminus F)) \\cap (D \\cap (V \\setminus F)) \\neq \\emptyset\n\nPick the correct option and justify your answer briefly.\n\n\n\n\n\n\n\n\n\nProblem 1.5 High Degree Vertex Has Low Degree - Rule\n\n\n\n\n\nLet v be a vertex of maximum degree in G \\setminus F, and suppose G is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that d(v) = 2.\nConsider the following algorithm to solve this instance:\ninit X = emptyset\nwhile G\\X has a cycle C:\n    let v be a vertex in C\\F:\n        add v to X\nif |X| > k:\n    return NO\nelse:\n    return X\nWhat can you say about the procedure above?\n\nIt correctly solves the kind of CCHS questions being considered in this problem.\nIt will not be correct if there are no vertices in C\\setminus F, as required in line 3.\nIt will not be correct if there are two overlapping cycles in the instance.\n\nPick the correct option and justify your answer briefly. If you believe this is not the right algorithm, please suggest an alternative that works. In further questions when we refer to the rule in problem 1.5, we are referring to either the algorithm above or the one in your justification.\n\n\n\n\n\n\n\n\n\nProblem 1.6 The Branching Step\n\n\n\n\n\nLet v be a vertex of maximum degree in G \\setminus F, and suppose G is an instance where the rules from Problem 1.0, 1.1, 1.2, and 1.5 do not apply. Let v be a vertex in G \\setminus F of maximum degree. Now we branch as follows:\nOption A.\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\nOption B.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k-1) // omit v\nOption C.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\nOption D.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F,k) // omit v\nPick the right branching strategy and justify your answer.\n\n\n\nWe summarize the overall algorithm below.\nIf k < 0, return NO.\nIf V(G) is empty, return the empty set.\n\nApply rules 1.0, 1.1, and 1.2.\n\nPick a vertex v in G\\F of maximum degree.\n\nIf d(v) = 2, apply rule 1.5.\nOtherwise branch according to 1.6.\nIn the next few questions, we will analyze the running time of this algorithm. Assume that the algorithm is called with F = \\emptyset, i.e, there are no forbidden vertices to begin with. Fix an execution path P in the branching tree1 of the algorithm that does not return NO. Now:\n\nWe use S(P) to denote the output: note that this would consist of the set of vertices that are removed from the instance for inclusion in the solution, i.e, vertices chosen by the first branch in Step 1.6.\nWe use F(P) to denote the set of vertices that are made forbidden along the path P, i.e, these are vertices chosen by the second branch in Step 1.6.\n\nNote that at the output node, the instance we have is (G,F(P),\\ell) for some \\ell \\leqslant k, where S(P) is a constrained cycle hitting set with respect to F(P) of size at most k - \\ell. Also the number of steps in the execution path P is given by |F(P)| + |S(P)|, since every time we branch, we either include a vertex in the solution or make it forbidden.\n\n\n\n\n\n\nProblem 1.7 Degree 3 vs Leaves in Trees\n\n\n\n\n\nLet T be a tree and let X be the set of leaves in T, and let Y be the set of vertices of degree three or more in T. Show that:\n\\sum_{v \\in Y} (d(v)-2) = |X| - 2,\nusing elementary facts about trees.\n\n\n\n\n\n\n\n\n\nProblem 1.8 Degree Evolution\n\n\n\n\n\nFix an execution path P on an instance (G,\\emptyset,k) (i.e, a path from root to leaf in the branching tree associated with the algorithm when the input is (G,\\emptyset,k)) and consider a vertex v that belongs to F(P), which is to say that the vertex v was included in the set of forbidden vertices at some point during the execution of the algorithm. Denote the instance at this stage of the algorithm by (H,F,k^\\prime). In particular, H is the graph obtained after v was included in F. Let d(v) denote the degree of the vertex v in the original instance G, and let d^\\star(v) denote its degree in the graph H. Which of the following is true?\n\n3 \\leqslant d^\\star(v) \\leqslant d(v)\n3 \\leqslant d^\\star(v) < d(v)\nd^\\star(v) \\geqslant \\min(d(v),3)\nd^\\star(v) > \\min(d(v),3)\n\n\n\n\n\n\n\n\n\n\nProblem 1.9 Successful Execution Paths are Short\n\n\n\n\n\nConsider an execution path P that does not return NO. Show that F(P) \\leqslant 3S(P).\nThis is an optional question that you can skip. It carries no points.\n\n\n\n\n\n\n\n\n\nProblem 1.10 The Final Running Time\n\n\n\n\n\nCan you use the fact from the previous question to come up with an algorithm for CCHS that runs in time O^\\star(16^k)? Note that the O^\\star(\\cdot) notation is used to hide factors that are polynomial in n and k.\nHint: Use the algorithm described previously in the question, but modify it slightly. In particular, if an execution path pushes more than 3S(P) vertices into the forbidden set F, can you terminate it prematurely? Also, what is the cost of the successful execution paths?\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. GreedyHS [2 points]\n\n\n\nLet U=\\left\\{x_1, \\ldots, x_n\\right\\} be an univere of n elements. Suppose we have a family \\mathcal{F} over U that consists of three-sized subsets of U, for example:\n\n\\mathcal{F} = \\left(x_1, x_3, x_4\\right),\\left(x_2, x_3, x_7\\right),\\left(x_1, x_5, x_6\\right)\n\nWe want to find a smallest subset X of U such that for all sets S \\in \\mathcal{F}, S \\cap X \\neq \\emptyset.\nConsider the following algorithm for this problem.\nGreedy(U,F)\n\nInit X = emptyset\nwhile F is non-empty do:\n    Take an arbitrary set S in F.\n    Let x be an element in S\n    X = X U {x}\n    Remove all sets from F that contain x\nend while\nWhat can you say about the worst-case approximation ratio of this algorithm?\n\n\n\n\n\n\n\n\nProblem 3. Knapsack [2 points]\n\n\n\nConsider the knapsack problem. Given a set X=\\left\\{x_1, \\ldots, x_n\\right\\} of n items with weights w\\left(x_i\\right) and values v\\left(x_i\\right), it asks for the highest total value of items we can put into our knapsack such that the total weight of all these items is at most W.\nDescribe a 0/1-LP that models the problem correctly.\n\n\n\n\n\n\n\n\nProblem 4. Rectangle Covering [4 Points]\n\n\n\n\n\n\nRectangle Cover Problem Example\n\n\nSuppose we have a set P=\\left\\{p_1, \\ldots, p_n\\right\\} of n points and a set R=\\left\\{r_1 \\ldots, r_m\\right\\} of m rectangles, as in the image above. Each rectangle r_i \\in R has a certain cost c_i>0 associated with it. We wish to find a subset S \\subseteq R of rectangles whose cost is minimized such that the rectangles in S together cover all points in P.\nWe wish to model this problem as a 0/1-LP. To this end we introduce a decision variable x_i for each rectangle r_i \\in R, where x_i=1 corresponds to putting rectangle r_i into S and x_i=0 corresponds to not putting r_i into S. otherwise. Furthermore, for a point p_j \\in P, define R\\left(p_j\\right)=\\left\\{r_i \\in R: p_j \\in r_i\\right\\}.\n\n\n\n\n\n\nLP for Rectangle Cover\n\n\n\n\n\nDescribe a 0/1-LP that models the problem correctly.\n\n\n\n\n\n\n\n\n\nLP-based Approximation for Rectangle Cover\n\n\n\n\n\nDescribe a 5-approximation assuming that each point is contained in at most 5 rectangles.\n\n\n\n\n\n\n\n\n\n\n\nProblem 5. Dominating Set Reduction Rule When The Graph has No Short Cycles [2 points]\n\n\n\nSuppose G is a simple, undirected graph that has no cycles of length three or four. Recall that a subset S of vertices of G is called a dominating set if every vertex v of G either belongs to S or has a neighbor in S, in other words, N[v] \\cap S \\neq \\emptyset.\nLet S be a dominating set of G of size at most k, where G is as given above (i.e, G has no triangles and no cycles of length four). Show that if the degree of v is more than k in G, then v \\in S."
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w08.html",
    "href": "courses/2023/01-ES242/labs/lab-w08.html",
    "title": "ES242. Data Structures and Algorithms I. Week 08 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nDepth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement DFS\n\n\n\n\n\nIn this exercise your goal is to output a DFS traversal of a given graph G starting from a given source s.\n\n\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is a sequence of vertices in the order in which they were pushed on to the stack. Assume that you always find your lexicographically smallest unvisited neighbor in your DFS implementation.\n\n\n\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0 1 5 2 3 4 \nThere is a trailing whitespace at the end of the line in the output.\nNote. This was a worked out example and the code is here. Please note that there some very minor changes from the version discussed in class to account for proper ordering of vertices. In particular, in the stack implementation, to make sure that you are visiting the lowest-indexed neighbor, the vertices need to be added to the adjacency list in reverse sorted order.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Is it a DAG?\n\n\n\n\n\nRecall that a path in a directed graph is a sequence of edges having the property that the ending vertex of each edge in the sequence is the same as the starting vertex of the next edge in the sequence; a path forms a cycle if the starting vertex of its first edge equals the ending vertex of its last edge. A directed acyclic graph (also known as a DAG) is a directed graph that has no cycles.\nYou are given a directed graph G. Your task is to determine whether the input graph is a DAG.\nNote that the vertices are 0-indexed. That is, the vertices are numbered as 0 \\ldots n-1.\nYour code should output YES if G is a DAG, else NO\n\n\nThe first line contains an integer n, the number of nodes in the graph.  The next line contains an integer m, denoting the number of edges in the graph.  The next m input lines contain two space-separated integers u,v denoting a directed edge from u to v (u->v).\n\n\n\nOutput YES if G is a DAG, else NO\nSample Input 1\n6\n6\n5 0\n5 2\n4 0\n4 1\n2 3\n3 1\nSample Output 1\nYES\nSample Input 2\n4\n4\n0 1\n1 2\n2 3\n3 0\nSample Output 2\nNO"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L08.html",
    "href": "courses/2023/01-CS614/quizzes/L08.html",
    "title": "CS614. Advanced Algorithms. L08 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Better Approximation given a k-coloring\n\n\n\nGiven a k-coloring of a graph G, show that we can find a vertex cover which is a 2\\bigl(1−\\frac{1}{k}\\bigr) approximation.\nHint: use the k-coloring on the vertices of V_{1/2}.\n\n\n\n\n\n\n\n\nProblem 2. Point Line Cover\n\n\n\nIn the Point Line Cover problem, we are given a set of n points in the plane and an integer k, and the goal is to check if there exists a set of k lines on the plane that contain all the input points.\nShow a kernel for this problem with \\mathcal{O}\\left(k^2\\right) points."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L09.html",
    "href": "courses/2023/01-CS614/quizzes/L09.html",
    "title": "CS614. Advanced Algorithms. L09 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Dominating Set\n\n\n\nA dominating set of a graph G is a subset of vertices S such that every vertex in G either belongs to S or has a neighbor in S.\nSuppose you have an instance of dominating set given by (G,k), which is a YES-instance if and only if G has a dominating set of size at most k.\nIs the following reduction rule safe?\nRR. If d(v) > k, then return (G-v,k-1).\n( ) Yes (X) No\nBriefly justify your answer:\n|____|\n\n\n\n\n\n\n\n\nProblem 2. Connected Vertex Cover\n\n\n\nA connected vertex cover of a graph G is a subset of vertices S such that: (a) S is a vertex cover of G, and (b) G[S] is a connected subgraph of G.\nSuppose you have an instance of connected vertex cover given by (G,k), which is a YES-instance if and only if G has a connected vertex cover of size at most k.\n\n\n\n\n\n\nProblem 2.1 Connected Vertex Cover I.\n\n\n\nDesign a \\mathcal{O}(2^k) vertex kernel for Connected Vertex Cover.\nHint: What can you say about high degree vertices? How many can G have?\nFollow up hint: What can you say about two vertices that have the same neighbourhood among the high-degree vertices?\n\n\n\n\n\n\n\n\nProblem 2.2 Connected Vertex Cover II.\n\n\n\nObserve that the kernelization argument that we made for Vertex Cover does not work as-is for connected vertex cover. Recall that the reduction rules were the following:\n\nR0. If k \\leqslant 0 and E is non-empty, return a trivial no-instance.\nR1. If k \\geqslant 0 and E is empty, return a trivial yes-instance.\nR2. If v is a degree zero vertex, return (G\\setminus \\{v\\},k), i.e, delete v from G and keep the budget the same.\nR3. If v is vertex whose degree is more than k, return (G\\setminus \\{v\\},k-1), i.e, delete v from G and reduce the budget by one.\n\nWhere does it fail? Justify, if possible, with an example."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L10.html",
    "href": "courses/2023/01-CS614/quizzes/L10.html",
    "title": "CS614. Advanced Algorithms. L10 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Set Cover: The Greedy Bound is Tight\n\n\n\nWe argued in class that the greedy approach to solving the unweighted Set Cover problem achieves an approximation ratio of O(H_n). Argue that this bound is tight, i.e, come up with examples where the algorithm picks sets in a manner that the cost of the solution is roughly H_n worse than optimal.\n\n\n\n\n\n\n\n\nProblem 2. Set Cover and Related Problems\n\n\n\n\nShow that Vertex Cover is a special case of Set Cover.\nAlso show that Dominating Set and Set Cover are equivalent (i.e, Set Cover can be reduced to Dominating Set and vice versa)."
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html",
    "href": "materials/dsanotes/dfs/index.html",
    "title": "Navigating Graphs",
    "section": "",
    "text": "So far, we have been exploring graphs with an emphasis on visiting all the edges: we want to cross all our bridges, draw every line that there is, and so on. Now we will switch gears and obsess over visiting vertices instead. While the language in our conversation will implicitly assume that the graphs in question are undirected, everything we say here can be easily adapted to directed graphs as well. The pseudocode presented here is for graphs on n vertices with vertex labels ranging between 0 and n-1 (inclusive).\nTo illustrate, let us go way back in time to when Facebook was a thing. You start off by making your Facebook account, and making friends with everyone you know. Now, as a part of your preparations for the apocalypse1, you want to make a list of everyone who you believe is accessible to you: these are people who are your friends, of course, but also friends of your friends, because you trust your friends to put you in touch with their friends if you need it; but now we can extend this confidence to friends of those who are friends of your friends, and so on. To make the “and so on” bit explicit, let us define the set of people you can access as follows:1 Who knows what — and who — may come in handy.\n\nyour friends on Facebook are accessible;\nif person A is accessible and person B is a Facebook friend of A, then A is also accessible.\n\nSo: how do you go about making this list? This is a good time to take a pause and work it out.\n\n\nWell, one natural way — at the risk of looking like a stalker — is the following. Let us call people on Facebook new if they are not yet on our list. To begin with, everyone is new and our list is empty. Also assume that all names are distinct2. Our list will spawn several notebooks, and we will build it up as follows.2 In practice, every profile has an unique ID, so the actual names do not matter: what is important is that we can easily verify, when we are exploring a profile, if it is new or not.\n\non day 1, make a list of all your friends on Facebook in a notebook called Volume 1.\non day 2, go to the profiles of everyone you have listed in Volume 1. For each person, go through their friends list, and make a list of everyone who is new to you in Volume 2.\non day 3, go to the profiles of everyone you have listed in Volume 2. For each person, go through their friends list, and make a list of everyone who is new to you in Volume 3.\n\non day t, go to the profiles of everyone you have listed in Volume t-1. For each person, go through their friends list, and make a list of everyone who is new to you to Volume t. Stop if the new volume is empty.\n\n\n\n\n\n\n\nNew People Only!\n\n\n\nNotice that it is crucial that you only list people who are new to you. Consider an example where all of Facebook is three people: you and your friends Akash and Babita, who are friends with each other as well. Now Akash and Babita make it to Volume 1, but on day 2, if you are not careful about listing only new people, you will:\n\nadd Babita to Volume 2 based on Akash’s list, and\nadd Akash to Volume 2 based on Babita’s list.\n\nNow, since Volume 2 is the same as Volume 1, it will spawn an identical Volume 3, and this will go on ad infinitum, which is not what we want!\n\n\n\n\n\n\n\n\nFood For Thought\n\n\n\nHow long does it take to build up the whole list of accessible people, if all of Facebook has N people and everyone has at most D friends? Assume that you can figure out — when looking at a profile — whether it is new or not. This is not terribly unrealistic: for example, your browser typically tells you if you have visited a page before or not by coloring the links purple instead of blue, at least in the early days of Facebook.\n\n\nYou should convince yourself that the process above indeed:\n\nlists everyone who is accessible,\ndoes not list anyone who is not accessible, and\nterminates pre-apocalypse assuming that Facebook is finite.\n\n\n\n\nNow, suppose that you are going to attend a hypothetical Facebook party: all the first 1729 users will be there, and in particular, you will get to meet your seven friends as well. Now you want to say hi to everyone who’s accessible, and maybe get them to sign your slam book too: but you haven’t finished building your list yet!\nSo how do you go about discovering all the accessible people? Well, you do what people do at networking events3 — you ask to be introduced to someone you have not met already. Start by approaching a friend, who will introduce you to one of their friends, who may or may not be a mutual: but you move on to said friend regardless, who will in turn introduce you to someone else, etc.3 Or at least what the author thinks people do at networking events.\nIn particular, let us proceed4 as follows:4 Don’t try this at an actual party.\nGo to an arbitrary friend `X`.\n\nRepeatedly do the following:\n    Declare under your breath that you have met `X`.\n    Ask X to introduce you to a friend of theirs \n    (whom you have not yet met).\n    \n    if X introduces you to Y:\n        Y is the new X.\n    \n    else X has nothing new to offer:\n        EXIT PARTY.\nClearly, everyone you meet this way is accessible, but do you get to meet everyone who is accessible?\n\n\n\n\n\n\nMisses\n\n\n\nSuppose you have a friend Ravi who knows both Seeta and Geeta, but Seeta and Geeta do not know each other. To begin with, you meet Ravi and say Ravi introduces you to Seeta. Seeta knows nobody whom you have not yet met, so you leave without meeting Geeta, but she was accessible! Had Ravi introduced you to Geeta instead, then you would have missed meeting Seeta with the approach above.\nPause and think about how you can fix your procedure so that you meet everyone who is accessible.\n\n\nOne way to expand the scope of people we meet at the party is by not giving up so early: specifically, if you meet someone who observes that you have already met all their friends, then you have a dead end, but for all you know you are just stuck in a local minima. You need to pull yourself up and keep looking — and there are a few different possibilities that you could experiment with here:\n\nfind another OG friend you have not met at the party and restart the process above\nfind a random person at the party to restart the process above\ngo back to the last person you were speaking with and continue the process above\n\nNote that with approach (1), you would still miss meeting either Seeta or Geeta in the example above, so while it’s a perfectly valid approach it may still fail to be comprehensive.\nThe issue with approach (2) — apart from the fact that it may not be well-suited to introverts — is that you might end up meeting and listing people who are not, in fact, accessible.\nSo let’s try approach (3), which you can think of as retracing your steps backward whenever you are stuck:\nGo to an arbitrary friend X.\nRepeatedly do the following:\n    Ask X to introduce you to a friend of theirs \n    (whom you have not yet met).\n\n    if X introduces you to Y:\n        Remember that X introduced you to Y.\n        Declare that you have met Y.\n        Y is the new X.\n\n    else X has nothing new to offer:\n        Who introduced you to X?\n            Nobody: EXIT PARTY.\n            It was Z: Z is the new X.\nAs before, you should convince yourself that the process above indeed:\n\nensures you meet everyone who is accessible,\ndoes not have you meet anyone who is not accessible.\n\nFurther, you can also show that you exit the party before the party exits you: in other words, the process above does not go on forever. Why is this?\nWell, notice that you never meet someone for the first time more than once, so the if block inside Repeatedly triggers at most 1728 times.\nNow lets talk about the else block inside Repeatedly. Let us say that you get “stuck at someone” if they have nothing new to offer. Now we claim that you never get stuck at someone more than once. To see this, lets put ourselves in the shoes of someone — say 💃 — attending this party and largely minding their own business. From their perspective, a novice networker — say 🕺 — keeps approaching them to meet new people. They meet this person some k times: perhaps they hope that k is zero, but if they are not so lucky, then the meetings pan out as follows.\n\nThe first meeting is when someone introduces 🕺 to 💃.\n\nNow 💃 introduces 🕺 to P_1, a new person.\n\nThe second meeting is when 🕺 backtracks from P_1 back to 💃.\n\nNow 💃 introduces 🕺 to P_2, a new person.\n\nThe second meeting is when 🕺 backtracks from P_2 back to 💃.\n\nNow 💃 introduces 🕺 to P_3, a new person. \\vdots\n\nThe k^{th} meeting is when 🕺 backtracks from P_{k-1} back to 💃.\n\nNow 💃 has nobody left to introduce 🕺 to.\n\n\nNote how all meetings but one are fruitful in that they lead to further progress, and it is only the last meeting where one gets stuck and backtracks from 💃. In other words, you never get stuck at the same person more than once, so the else block inside Repeatedly triggers at most 1728 times. So given a sufficiently long party, we will indeed build our lists in time.\n\n\n\nSo we have evidently figured out two ways of exploring the part of the graph accessible from a particular location. These belong to a family of graph traversal algorithms, dubbed Whatever-First-Search by Erickson, and can be generically described as follows:\nWhatever-First-Search(s):\n    put s into the bag\n    while the bag is not empty:\n        take v out of the bag\n        if v is unmarked\n            mark v\n                for each edge vw\n                    put w into the bag\nRecall that the notion of accessibility is recursively defined, so for many people it is most natural to think of the algorithms also as being recursive. In particular, it’s either:\n\nping all your friends, rinse, repeat, or\ngo to a friend, rinse, repeat;\n\nkeeping in mind that — in the spirit of recursion — when you are rinsing and repeating, you re-identify yourself as whoever you are working with currently, and also take care to ensure that you don’t end up going in circles forever by remembering what you have already seen and making good use of that intel.\n\n\n\nImagine that you open up Wikipedia’s featured article today, and it happens to be about Operation Flavius. Call this page P, and let’s say that another page Q on Wikipedia is reachable from P if you can arrive at Q by starting at P and following links that are visible on whatever the current page is. To make a list of all pages reachable from P, you can start with P as the current page and then either:\n\nopen up all blue links visible on the current page in background tabs, close the current page, and process the next tab similarly; or,\nopen the first blue link you see on the current page, and keep doing this, hitting the back button when you hit a page with no blue links.\n\nThe background tab hoarder is browsing breadth-first, while the distracted clicker is browsing depth-first :) With all this intuition collected, let us now describe professional-looking implementations for these algorithms and argue their correctness."
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html#breadth-first",
    "href": "materials/dsanotes/dfs/index.html#breadth-first",
    "title": "Navigating Graphs",
    "section": "Breadth-First",
    "text": "Breadth-First\nWell, one natural way — at the risk of coming across as a stalker — is the following. Let us call people on Facebook new if they are not yet on our list. To begin with, everyone is new and our list is empty. Also assume that all names are distinct2. Our list will spawn several notebooks, and we will build it up as follows.2 In practice, every profile has an unique ID, so the actual names do not matter: what is important is that we can easily verify, when we are exploring a profile, if it is new or not.\n\non day 1, make a list of all your friends on Facebook in a notebook called Volume 1.\non day 2, go to the profiles of everyone you have listed in Volume 1. For each person, go through their friends list, and make a list of everyone who is new to you in Volume 2.\non day 3, go to the profiles of everyone you have listed in Volume 2. For each person, go through their friends list, and make a list of everyone who is new to you in Volume 3.\n\n\n\n…and go on\n\n\non day t, go to the profiles of everyone you have listed in Volume t-1. For each person, go through their friends list, and make a list of everyone who is new to you to Volume t. Stop if the new volume is empty.\n\n\n\n\n\n\n\nNew People Only!\n\n\n\nNotice that it is crucial that you only list people who are new to you. Consider an example where all of Facebook is three people: you and your friends Akash and Babita, who are friends with each other as well. Now Akash and Babita make it to Volume 1, but on day 2, if you are not careful about listing only new people, you will:\n\nadd Babita to Volume 2 based on Akash’s list, and\nadd Akash to Volume 2 based on Babita’s list.\n\nNow, since Volume 2 is the same as Volume 1, it will spawn an identical Volume 3, and this will go on ad infinitum, which is not what we want!\n\n\n\n\n\n\n\n\nFood For Thought\n\n\n\nHow long does it take to build up the whole list of accessible people, if all of Facebook has N people and everyone has at most D friends? Assume that you can figure out — when looking at a profile — whether it is new or not. This is not terribly unrealistic: for example, your browser typically tells you if you have visited a page before or not by coloring the links purple instead of blue, at least in the early days of Facebook.\n\n\nYou should convince yourself that the process above indeed:\n\nlists everyone who is accessible,\ndoes not list anyone who is not accessible, and\nterminates pre-apocalypse assuming that Facebook is finite."
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html#depth-first",
    "href": "materials/dsanotes/dfs/index.html#depth-first",
    "title": "Navigating Graphs",
    "section": "Depth-First",
    "text": "Depth-First\nNow, suppose that you are going to attend a hypothetical Facebook party: all the first 1729 users will be there, and in particular, you will get to meet your seven friends as well. Now you want to say hi to everyone who’s accessible, and maybe get them to sign your slam book too: but you haven’t finished building your list yet!\nSo how do you go about discovering all the accessible people? Well, you do what people do at networking events3 — you ask to be introduced to someone you have not met already. Start by approaching a friend, who will introduce you to one of their friends, who may or may not be a mutual: but you move on to said friend regardless, who will in turn introduce you to someone else, etc.3 Or at least what the author thinks people do at networking events.\nIn particular, let us proceed4 as follows:4 Don’t try this at an actual party.\nGo to an arbitrary friend `X`.\n\nRepeatedly do the following:\n    Declare under your breath that you have met `X`.\n    Ask X to introduce you to a friend of theirs \n    (whom you have not yet met).\n    \n    if X introduces you to Y:\n        Y is the new X.\n    \n    else X has nothing new to offer:\n        EXIT PARTY.\nClearly, everyone you meet this way is accessible, but do you get to meet everyone who is accessible?\n\n\n\n\n\n\nMisses\n\n\n\nSuppose you have a friend Ravi who knows both Seeta and Geeta, but Seeta and Geeta do not know each other. To begin with, you meet Ravi and say Ravi introduces you to Seeta. Seeta knows nobody whom you have not yet met, so you leave without meeting Geeta, but she was accessible! Had Ravi introduced you to Geeta instead, then you would have missed meeting Seeta with the approach above.\nPause and think about how you can fix your procedure so that you meet everyone who is accessible.\n\n\nOne way to expand the scope of people we meet at the party is by not giving up so early: specifically, if you meet someone who observes that you have already met all their friends, then you have a dead end, but for all you know you are just stuck in a local minima. You need to pull yourself up and keep looking — and there are a few different possibilities that you could experiment with here:\n\nfind another OG friend you have not met at the party and restart the process above\nfind a random person at the party to restart the process above\ngo back to the last person you were speaking with and continue the process above\n\nNote that with approach (1), you would still miss meeting either Seeta or Geeta in the example above, so while it’s a perfectly valid approach it may still fail to be comprehensive.\nThe issue with approach (2) — apart from the fact that it may not be well-suited to introverts — is that you might end up meeting and listing people who are not, in fact, accessible.\nSo let’s try approach (3), which you can think of as retracing your steps backward whenever you are stuck:\nGo to an arbitrary friend X.\nRepeatedly do the following:\n    Ask X to introduce you to a friend of theirs \n    (whom you have not yet met).\n\n    if X introduces you to Y:\n        Remember that X introduced you to Y.\n        Declare that you have met Y.\n        Y is the new X.\n\n    else X has nothing new to offer:\n        Who introduced you to X?\n            Nobody: EXIT PARTY.\n            It was Z: Z is the new X.\nAs before, you should convince yourself that the process above indeed:\n\nensures you meet everyone who is accessible,\ndoes not have you meet anyone who is not accessible.\n\nFurther, you can also show that you exit the party before the party exits you: in other words, the process above does not go on forever. Why is this?\nWell, notice that you never meet someone for the first time more than once, so the if block inside Repeatedly triggers at most 1728 times.\nNow lets talk about the else block inside Repeatedly. Let us say that you get “stuck at someone” if they have nothing new to offer. Now we claim that you never get stuck at someone more than once. To see this, lets put ourselves in the shoes of someone — say 💃 — attending this party and largely minding their own business. From their perspective, a novice networker — say 🕺 — keeps approaching them to meet new people. They meet this person some k times: perhaps they hope that k is zero, but if they are not so lucky, then the meetings pan out as follows:\n\nthe first meeting when someone introduces 🕺 to 💃\n\nnow 💃 introduces 🕺 to a new person, say P_1.\n\nthe second meeting when 🕺 backtracks from P_1 back to 💃\n\nnow 💃 introduces 🕺 to a new person, say P_2.\n\nthe second meeting when 🕺 backtracks from P_2 back to 💃\n\nnow 💃 introduces 🕺 to a new person, say P_3.\n\nyada yada\nthe k^{th} meeting is when 🕺 backtracks from P_{k-1} back to 💃\n\nnow 💃 has nobody left to introduce 🕺 to.\n\n\nNote how all meetings but one are fruitful in that they lead to further progress, and it is only the last meeting where one gets stuck and backtracks from 💃. In other words, you never get stuck at the same person more than once, so the else block inside Repeatedly triggers at most 1728 times. So given a sufficiently long party, we will indeed build our lists in time."
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html#paths-and-connectivity",
    "href": "materials/dsanotes/dfs/index.html#paths-and-connectivity",
    "title": "Navigating Graphs",
    "section": "Paths and Connectivity",
    "text": "Paths and Connectivity\nWe now turn to some definitions that are standard in graph theory. A path is a non-empty graph P=(V, E) of the form\n\nV=\\left\\{x_0, x_1, \\ldots, x_k\\right\\} \\quad E=\\left\\{x_0 x_1, x_1 x_2, \\ldots, x_{k-1} x_k\\right\\},\nwhere the x_i’s are all distinct.\nThe vertices x_0 and x_k are linked by P and are called its ends; the vertices x_1, \\ldots, x_{k-1} are the inner vertices of P.\nThe number of edges of a path is its length, and the path of length k is denoted by P^k.\nIf P=x_0 \\ldots x_{k-1} is a path and k \\geqslant 3, then the graph C:= P+x_{k-1} x_0 is called a cycle.\nThe distance d_G(x, y) in G of two vertices x, y is the length of a shortest x-y path in G; if no such path exists, we set d(x, y):=\\infty.\nThe greatest distance between any two vertices in G is the diameter of G, denoted by \\operatorname{d}(G).\nA non-empty graph G is called connected if any two of its vertices are linked by a path in G. If U \\subseteq V(G) and G[U] is connected, we also call U itself connected in G. A maximal connected subgraph of G is a connected component of G.\nGiven a vertex s in a graph G, we may want to know:\n\nthe size of the connected component that s belongs to;\nthe set of all vertices in the connected component that s belongs to;\nthe distance between s and t for some vertex t \\neq s;\nif s belongs to a cycle in G.\n\nIt turns out that navigation algorithms can help us address all these questions and then some."
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html#breadth-first-search",
    "href": "materials/dsanotes/dfs/index.html#breadth-first-search",
    "title": "Navigating Graphs",
    "section": "Breadth-First Search",
    "text": "Breadth-First Search\nBreadth-first search maintains an evolving state of visited vertices. A vertex that is not yet upgrades itself to visited status if it is adjacent to a visited vertex. So we iteratively update the set of visited vertices — starting with just s as per tradition — by having the current set of visited vertices pull in their neighbors, and stop when there is nothing new to see.\nLetting visited denote a set of vertices in the global scope, one round of this process might look like this:\nexecute_one_round():\n    marked = {}\n    for all v in visited:\n        for all u in N(v):\n            if u is not in visited:\n                add u to marked\n    visited = visited U marked\nand now we keep going until we have nothing new to see:\nvisited = {s}\nwhile true:\n    prev = visited\n    execute_one_round()\n    if prev == visited:\n        exit\nNote that if working with a graph on n vertices as input, the while loop will run at most n times, and execute_one_round takes at most O(n^2) time, so overall we have an implementation that is straightforward but suffers a running time of O(n^3) overall.\n\nA Faster Implementation\nNotice that we are wasting time by pinging all visited vertices in every round: notice that only the new inductees are going to help with discovery — so we can save time by only focusing on them. This is what we did with the notebooks earlier: we only scanned volume t-1 in round t to develop volume t.\nThe most natural way of tracking the volumes efficiently is to use a queue: we begin by adding the starting point, and in general, pop elements off the queue. As we do that, we add any unvisited neighbors offered by the popped element back at the end:\nvisited[v] = -1 for all v\nvisited[s] = 0\nadd s to head of Q\nwhile Q is non-empty:\n    v = pop(Q) //remove the head of Q\n    for u in N(v):\n        if visited[u] is -1:\n            visited[u] = visited[v] + 1\n            push (Q,u)\nNow you might figure this to be an O(n^2) algorithm based on the fact that the while loop and the inner for loop run at most n times each, but you can in fact argue that the running time is bounded by O(n+m).\nTo see this, notice that the line u in N(v) is executed twice for every edge (p,q): once when p is at the head of the queue and once when q is at the head of the queue. Also notice that every vertex gets pushed on the queue at most once, so the line v = pop(Q) is executed at most n times. This gives us a tighter and neater upper bound of O(n+m). 🎉\nWe now argue that the procedure above sees exactly what it is supposed to see: nothing more and nothing less. Not only that: the visited array that we sneaked in tracks the “volume numbers” from the notebooks analogy, and in fact records distances from the starting point.\n\n\n\n\n\n\nLemma. For finite d, any vertex u is at a distance of d from s if and only if visited[u] = d.\n\n\n\nConsider the case of finite d. For both statements, we argue by induction on d. We omit the base cases because they are easy to verify.\nFirst, suppose visited[u] = d. Then:\n\nby the mechanics of the algorithm, there is a vertex v such that:\n\nu in N(v) and\nvisited[v] = d-1, and\n\nby the induction hypothesis, the distance of v from s is d-1.\n\nThe claim follows by adding u to the (d-1)-length path from s to v guaranteed by the induction hypothesis.\nNow, suppose u is at a distance of d from s. Then there is a path P of length d from s to u, and this is a shortest path. Let u’s neighbor on this path be v. Notice that the sub-path P that starts at s and ends at v is a shortest path between s and v — if not, then we could plug the edge (v,u) at the end of a hypothetical shorter path, say Q, to contradict the assumption that u is at a distance of d from s.\nApply the induction hypothesis on v to see that visited[v] = d-1. Notice that when v is popped from the queue, the visited array has values between -1 and d (inclusive). At this point, it must be the case that visited[u] = -1 or visited[u] = d: if not, then by previous claim, we again contradict our assumption about the distance of u from s. Now:\n\nif visited[u] = d, we are done, and\nif visited[u] = -1, then v pulls u into the queue and visited[u] = d after this step, so we are done again.\n\nNote that this implies that vertices unreachable from s are not visited.\n\n\n\n\n\n\nCorollary. We have that d(s,u) = \\infty if and only if visited[u] = -1."
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html#depth-first-search",
    "href": "materials/dsanotes/dfs/index.html#depth-first-search",
    "title": "Navigating Graphs",
    "section": "Depth-First Search",
    "text": "Depth-First Search\nA Depth-First Search mainly involves:\n\na way of discovering new univisted neighbors so we can go forward\na way of remembering where we came from to be able to backtrack\n\nThe first is easily achieved by the use of a visited array again, and for the second, we introduce a prev array that can help us find our way back to where we came from. Here is an implementation that closely follows the description of the algorithm we discussed earlier. We throw in a clock variable and birth and death arrays for some extra bookkeeping that will help us remember the timing of our first and final encounters with the vertices that we meet as we go along.\nfor all v: prev[v] = -1 \n//prev[v] = -1 iff v is unvisited\n\ncurrent = s\nprev[s] = s\n\nclock = 0\n\nwhile true:\n    clock = clock + 1\n\n    X = unvisited_neighbor(current)\n    // this returns -1 if X has no univisited neighbors\n    // and an arbitrary unvisited neighbor otherwise\n\n    If X is not -1:\n    // we have discovered a new thing\n    \n        // lets remember where we came from:    \n        prev[X] = current\n        \n        // record the time of discovery:\n        birth[X] = clock\n        \n        // and then go to this new place:    \n        current = X\n    \n    \n\n    Else: \n    // i.e, X has no new neighbors to offer\n\n        If X == s:\n            // we are back where we started        \n            // and we are done:\n            break\n        \n        Else:\n            // we know where to go        \n            // step back to make progress:\n            set current to prev[current]\n            \n            // note that we are done with X:\n            set death[v] = clock\nTo analyze the running time here, we need to know how unvisited_neighbor() is implemented. Let us work with the adjacency list representation, and let’s say that for every vertex v, we have a pointer pv that initially points to the head of the adjacency list of v. Now consider the following implementation of unvisited_neighbor(), where we are using pv.vertex to denote the neighbor of v that pv is pointing to:\nunvisited_neighbor(v):\n    while prev[pv.vertex] != -1:\n        if pv->next is NULL:\n            return -1\n        else:\n            pv = pv->next\n    return pv.vertex\nNotice that the number of times the line:\nX = unvisited_neighbor(current)\nis executed is bounded by the total amount of “movement” experienced the pointers pv, where the totaling is being done over all vertices v. This is at most twice the number of edges.\nAlso observe that the if and else blocks can be triggered at most n times each since they correpsond to our first and last visits to a vertex, respectively.\nTherefore, the overall running time of the algorithm is O(m+n), just like it was with breadth-first search.\nAlso, as with breadth-first search, we can see that we visit exactly the vertices we are supposed to: the set of visited vertices coincides with the set of vertices reachable from s. First, we make note of the following invariant:\n\n\n\n\n\n\nLemma. For every vertex u, if prev[u] > -1 and v is a neighbor of u, then prev[v] > -1.\n\n\n\nThe intuition for this invariant is the following: once a vertex is “born”, we do not let it “die” until all its neighbors are visited. A visited vertex keeps feeding the algorithm its unvisited neighbors, thereby prolonging its own lifespan, until it runs out.\nSomewhat more formally, suppose prev[u] > -1 and, for the sake of contradiction, say prev[v] = -1 for some neighbor of u. Since prev[u] > -1, the line:\nX = unvisited_neighbor(current)\nis executed with current being u at least once.\nSince prev[v] = -1 at the end of the algorithm, note that prev[v] = -1 throughout the algorithm. However, none of the calls to unvisited_neighbor(u) could have possibly output v, since this would immediately lead to prev[v] being overwritten with u.\nFrom this we can only conclude that unvisited_neighbor(u) was dysfunctional: u had an unvisited neighbor v that was not returned by any of the calls to unvisited_neighbor(u), which is the desired contradiction.\n\n\n\n\n\n\nLemma. For every vertex u, d(s,u) = \\infty if and only if prev[u] = -1.\n\n\n\nWe first show that if prev[u] = -1 then d(s,u) = \\infty, the contrapositive of which is that everything reachable is visited.\nSuppose prev[u] = -1 but d(s,u) = d for some finite d. Then there is a path P from s to u of length d. Let v be the first vertex on this path for which prev[v] = -1, and let w be the previous vertex on the path; in other words, w is the nieghbor of v in P whose distance from s is the smallest.\nBy assumption, prev[w] is not -1, implying that w was in fact visited by the algorithm. However, if w is visited, then the mechanics of the algorithm ensures that all neighbors of w are visited as well (see above), and in particular, so is v. However, this contradicts our assumption that prev[v] = -1.\nWe now show that if d(s,u) = \\infty then prev[u] = -1, the contrapositive of which is that everything visited is reachable.\nLet us, in fact, establish the contrapositive: prev[u] > -1 implies that there exists a finite d for which d(s,u) \\leqslant d. The intuition here is that we can climb our way back to s from u following the previous pointers. We need to be sure that the previous pointers always exist and don’t send us around in cycles.\nIn particular, consider the following sequence of previous pointers:\nprev[u], prev[prev[u]], prev[prev[prev[u]]], …\nConsider the value of the clock when prev[u] is set: this coincides with birth[u]. Let us associate with prev[u] the time birth[u].\nNow, suppose prev[u] is v. Note that prev[u] = v implies that u is an unvsited neighbor of v, where v itself is a visited vertex. Therefore, prev[v] is also well-defined and associated with birth[v]. We can repeat this argument for every step of the sequence, noting that the clock value strictly decreases at every step: and hence the sequence must reach s, at which point we can truncate it.\nIt is also easy to check that the vertices in the sequence are distinct: if not, we will have to contend with time travel! For instance, say:\n\nprev[a] = b and birth[a] = p\nprev[b] = c and birth[b] = q\nprev[c] = a and birth[c] = r\n\nNote that p > q > r, so c was introduced by a at a time when a was not even visited, which is impossible. This argument is easily complicated completed with generic subscripts, an exercise we leave to the reader.\nFollowing the sequence backwards gives us the desired path, and its length is (loosely) upper bounded by birth[u], and we are done. 🎉\n\n\n\n\n\n\nFood For Thought\n\n\n\nShow that for any two vertices u and v, the intervals (birth[u],death[u]) and (birth[v],death[v]) are either such that one is strictly contained in another, or are fully disjoint.\n\n\n\n\n\n\n\n\nFood For Thought\n\n\n\nLet us say that a vertex v is alive when the clock value is T if:\n\nT > birth[v] and\nT < death[v].\n\nSuppose further that you were working with a directed graph. Show that if, when you visit a vertex u for the first time, there is an edge from u to some vertex v that is alive then, there is a cycle that contains u and v. Is it true that if a directed graph has a cycle, then you will have an edge of this form: one from a vertex newly visited to one that is alive?\nProtip: Google for backedges if you are trying to look this up!"
  },
  {
    "objectID": "materials/dsanotes/dfs/index.html#references",
    "href": "materials/dsanotes/dfs/index.html#references",
    "title": "Navigating Graphs",
    "section": "References",
    "text": "References\n\nHere are nice animated explanations, including actual implementations, for BFS and DFS.\nPlay around with examples of your own with visualgo implementations of graph traversals.\nThe following writeups emphasize recursive approaches to DFS:\n\nDFS on DAGs\nJeff Erickson on DFS"
  },
  {
    "objectID": "materials/dsanotes/traversals/index.html",
    "href": "materials/dsanotes/traversals/index.html",
    "title": "Navigating Graphs",
    "section": "",
    "text": "So far, we have been exploring graphs with an emphasis on visiting all the edges: we want to cross all our bridges, draw every line that there is, and so on. Now we will switch gears and obsess over visiting vertices instead. While the language in our conversation will implicitly assume that the graphs in question are undirected, everything we say here can be easily adapted to directed graphs as well. The pseudocode presented here is for graphs on n vertices with vertex labels ranging between 0 and n-1 (inclusive).\nTo illustrate, let us go way back in time to when Facebook was a thing. You start off by making your Facebook account, and making friends with everyone you know. Now, as a part of your preparations for the apocalypse1, you want to make a list of everyone who you believe is accessible to you: these are people who are your friends, of course, but also friends of your friends, because you trust your friends to put you in touch with their friends if you need it; but now we can extend this confidence to friends of those who are friends of your friends, and so on. To make the “and so on” bit explicit, let us define the set of people you can access as follows:\n\nyour friends on Facebook are accessible;\nif person A is accessible and person B is a Facebook friend of A, then A is also accessible.\n\nSo: how do you go about making this list? This is a good time to take a pause and work it out.\n\n\nWell, one natural way — at the risk of looking like a stalker — is the following. Let us call people on Facebook new if they are not yet on our list. To begin with, everyone is new and our list is empty. Also assume that all names are distinct2. Our list will spawn several notebooks, and we will build it up as follows.\n\non day 1, make a list of all your friends on Facebook in a notebook called Volume 1.\non day 2, go to the profiles of everyone you have listed in Volume 1. For each person, go through their friends list, and make a list of everyone who is new to you in Volume 2.\non day 3, go to the profiles of everyone you have listed in Volume 2. For each person, go through their friends list, and make a list of everyone who is new to you in Volume 3.\n\non day t, go to the profiles of everyone you have listed in Volume t-1. For each person, go through their friends list, and make a list of everyone who is new to you to Volume t. Stop if the new volume is empty.\n\n\n\n\n\n\n\nNew People Only!\n\n\n\nNotice that it is crucial that you only list people who are new to you. Consider an example where all of Facebook is three people: you and your friends Akash and Babita, who are friends with each other as well. Now Akash and Babita make it to Volume 1, but on day 2, if you are not careful about listing only new people, you will:\n\nadd Babita to Volume 2 based on Akash’s list, and\nadd Akash to Volume 2 based on Babita’s list.\n\nNow, since Volume 2 is the same as Volume 1, it will spawn an identical Volume 3, and this will go on ad infinitum, which is not what we want!\n\n\n\n\n\n\n\n\nFood For Thought\n\n\n\nHow long does it take to build up the whole list of accessible people, if all of Facebook has N people and everyone has at most D friends? Assume that you can figure out — when looking at a profile — whether it is new or not. This is not terribly unrealistic: for example, your browser typically tells you if you have visited a page before or not by coloring the links purple instead of blue, at least in the early days of Facebook.\n\n\nYou should convince yourself that the process above indeed:\n\nlists everyone who is accessible,\ndoes not list anyone who is not accessible, and\nterminates pre-apocalypse assuming that Facebook is finite.\n\n\n\n\nNow, suppose that you are going to attend a hypothetical Facebook party: all the first 1729 users will be there, and in particular, you will get to meet your seven friends as well. Now you want to say hi to everyone who’s accessible, and maybe get them to sign your slam book too: but you haven’t finished building your list yet!\nSo how do you go about discovering all the accessible people? Well, you do what people do at networking events3 — you ask to be introduced to someone you have not met already. Start by approaching a friend, who will introduce you to one of their friends, who may or may not be a mutual: but you move on to said friend regardless, who will in turn introduce you to someone else, etc.\nIn particular, let us proceed4 as follows:\nGo to an arbitrary friend `X`.\n\nRepeatedly do the following:\n    Declare under your breath that you have met `X`.\n    Ask X to introduce you to a friend of theirs \n    (whom you have not yet met).\n    \n    if X introduces you to Y:\n        Y is the new X.\n    \n    else X has nothing new to offer:\n        EXIT PARTY.\nClearly, everyone you meet this way is accessible, but do you get to meet everyone who is accessible?\n\n\n\n\n\n\nMisses\n\n\n\nSuppose you have a friend Ravi who knows both Seeta and Geeta, but Seeta and Geeta do not know each other. To begin with, you meet Ravi and say Ravi introduces you to Seeta. Seeta knows nobody whom you have not yet met, so you leave without meeting Geeta, but she was accessible! Had Ravi introduced you to Geeta instead, then you would have missed meeting Seeta with the approach above.\nPause and think about how you can fix your procedure so that you meet everyone who is accessible.\n\n\nOne way to expand the scope of people we meet at the party is by not giving up so early: specifically, if you meet someone who observes that you have already met all their friends, then you have a dead end, but for all you know you are just stuck in a local minima. You need to pull yourself up and keep looking — and there are a few different possibilities that you could experiment with here:\n\nfind another OG friend you have not met at the party and restart the process above\nfind a random person at the party to restart the process above\ngo back to the last person you were speaking with and continue the process above\n\nNote that with approach (1), you would still miss meeting either Seeta or Geeta in the example above, so while it’s a perfectly valid approach it may still fail to be comprehensive.\nThe issue with approach (2) — apart from the fact that it may not be well-suited to introverts — is that you might end up meeting and listing people who are not, in fact, accessible.\nSo let’s try approach (3), which you can think of as retracing your steps backward whenever you are stuck:\nGo to an arbitrary friend X.\nRepeatedly do the following:\n    Ask X to introduce you to a friend of theirs \n    (whom you have not yet met).\n\n    if X introduces you to Y:\n        Remember that X introduced you to Y.\n        Declare that you have met Y.\n        Y is the new X.\n\n    else X has nothing new to offer:\n        Who introduced you to X?\n            Nobody: EXIT PARTY.\n            It was Z: Z is the new X.\nAs before, you should convince yourself that the process above indeed:\n\nensures you meet everyone who is accessible,\ndoes not have you meet anyone who is not accessible.\n\nFurther, you can also show that you exit the party before the party exits you: in other words, the process above does not go on forever. Why is this?\nWell, notice that you never meet someone for the first time more than once, so the if block inside Repeatedly triggers at most 1728 times.\nNow lets talk about the else block inside Repeatedly. Let us say that you get “stuck at someone” if they have nothing new to offer. Now we claim that you never get stuck at someone more than once. To see this, lets put ourselves in the shoes of someone — say 💃 — attending this party and largely minding their own business. From their perspective, a novice networker — say 🕺 — keeps approaching them to meet new people. They meet this person some k times: perhaps they hope that k is zero, but if they are not so lucky, then the meetings pan out as follows.\n\nThe first meeting is when someone introduces 🕺 to 💃.\n\nNow 💃 introduces 🕺 to P_1, a new person.\n\nThe second meeting is when 🕺 backtracks from P_1 back to 💃.\n\nNow 💃 introduces 🕺 to P_2, a new person.\n\nThe third meeting is when 🕺 backtracks from P_2 back to 💃.\n\nNow 💃 introduces 🕺 to P_3, a new person. \\vdots\n\nThe k^{th} meeting is when 🕺 backtracks from P_{k-1} back to 💃.\n\nNow 💃 has nobody left to introduce 🕺 to.\n\n\nNote how all meetings but one are fruitful in that they lead to further progress, and it is only the last meeting where one gets stuck and backtracks from 💃. In other words, you never get stuck at the same person more than once, so the else block inside Repeatedly triggers at most 1728 times. So given a sufficiently long party, we will indeed build our lists in time.\n\n\n\nSo we have evidently figured out two ways of exploring the part of the graph accessible from a particular location. These belong to a family of graph traversal algorithms, dubbed Whatever-First-Search by Erickson, and can be generically described as follows:\nWhatever-First-Search(s):\n    put s into the bag\n    while the bag is not empty:\n        take v out of the bag\n        if v is unmarked\n            mark v\n                for each edge vw\n                    put w into the bag\n\n\n\nBread-first search, courtsey XKCD\n\n\nRecall that the notion of accessibility is recursively defined, so for many people it is most natural to think of the algorithms also as being recursive. In particular, it’s either:\n\nping all your friends, rinse, repeat, or\ngo to a friend, rinse, repeat;\n\nkeeping in mind that — in the spirit of recursion — when you are rinsing and repeating, you re-identify yourself as whoever you are working with currently, and also take care to ensure that you don’t end up going in circles forever by remembering what you have already seen and making good use of that intel.\n\n\n\nImagine that you open up Wikipedia’s featured article today, and it happens to be about Operation Flavius. Call this page P, and let’s say that another page Q on Wikipedia is reachable from P if you can arrive at Q by starting at P and following links that are visible on whatever the current page is. To make a list of all pages reachable from P, you can start with P as the current page and then either:\n\nopen up all blue links visible on the current page in background tabs, close the current page, and process the next tab similarly; or,\nopen the first blue link you see on the current page, and keep doing this, hitting the back button when you hit a page with no blue links.\n\nThe background tab hoarder is browsing breadth-first, while the distracted clicker is browsing depth-first :) With all this intuition collected, let us now describe professional-looking implementations for these algorithms and argue their correctness.\n\n\n\nThe problem with Wikipedia, as observed by XKCD"
  },
  {
    "objectID": "materials/dsanotes/traversals/index.html#paths-and-connectivity",
    "href": "materials/dsanotes/traversals/index.html#paths-and-connectivity",
    "title": "Navigating Graphs",
    "section": "Paths and Connectivity",
    "text": "Paths and Connectivity\nWe now turn to some definitions that are standard in graph theory. A path is a non-empty graph P=(V, E) of the form\n\nV=\\left\\{x_0, x_1, \\ldots, x_k\\right\\} \\quad E=\\left\\{x_0 x_1, x_1 x_2, \\ldots, x_{k-1} x_k\\right\\},\nwhere the x_i’s are all distinct.\nThe vertices x_0 and x_k are linked by P and are called its ends; the vertices x_1, \\ldots, x_{k-1} are the inner vertices of P.\nThe number of edges of a path is its length, and the path of length k is denoted by P^k.\nIf P=x_0 \\ldots x_{k-1} is a path and k \\geqslant 3, then the graph C:= P+x_{k-1} x_0 is called a cycle.\nThe distance d_G(x, y) in G of two vertices x, y is the length of a shortest x-y path in G; if no such path exists, we set d(x, y):=\\infty.\nThe greatest distance between any two vertices in G is the diameter of G, denoted by \\operatorname{d}(G).\nA non-empty graph G is called connected if any two of its vertices are linked by a path in G. If U \\subseteq V(G) and G[U] is connected, we also call U itself connected in G. A maximal connected subgraph of G is a connected component of G.\nGiven a vertex s in a graph G, we may want to know:\n\nthe size of the connected component that s belongs to;\nthe set of all vertices in the connected component that s belongs to;\nthe distance between s and t for some vertex t \\neq s;\nif s belongs to a cycle in G.\n\nIt turns out that navigation algorithms can help us address all these questions and then some."
  },
  {
    "objectID": "materials/dsanotes/traversals/index.html#breadth-first-search",
    "href": "materials/dsanotes/traversals/index.html#breadth-first-search",
    "title": "Navigating Graphs",
    "section": "Breadth-First Search",
    "text": "Breadth-First Search\nBreadth-first search maintains an evolving state of visited vertices. A vertex that is not yet upgrades itself to visited status if it is adjacent to a visited vertex. So we iteratively update the set of visited vertices — starting with just s as per tradition — by having the current set of visited vertices pull in their neighbors, and stop when there is nothing new to see.\nLetting visited denote a set of vertices in the global scope, one round of this process might look like this:\nexecute_one_round():\n    marked = {}\n    for all v in visited:\n        for all u in N(v):\n            if u is not in visited:\n                add u to marked\n    visited = visited U marked\nand now we keep going until we have nothing new to see:\nvisited = {s}\nwhile true:\n    prev = visited\n    execute_one_round()\n    if prev == visited:\n        exit\nNote that if working with a graph on n vertices as input, the while loop will run at most n times, and execute_one_round takes at most O(n^2) time, so overall we have an implementation that is straightforward but suffers a running time of O(n^3) overall.\n\nA Faster Implementation\nNotice that we are wasting time by pinging all visited vertices in every round: notice that only the new inductees are going to help with discovery — so we can save time by only focusing on them. This is what we did with the notebooks earlier: we only scanned volume t-1 in round t to develop volume t.\nThe most natural way of tracking the volumes efficiently is to use a queue: we begin by adding the starting point, and in general, pop elements off the queue. As we do that, we add any unvisited neighbors offered by the popped element back at the end:\nvisited[v] = -1 for all v\nvisited[s] = 0\nadd s to head of Q\nwhile Q is non-empty:\n    v = pop(Q) //remove the head of Q\n    for u in N(v):\n        if visited[u] is -1:\n            visited[u] = visited[v] + 1\n            push (Q,u)\nNow you might figure this to be an O(n^2) algorithm based on the fact that the while loop and the inner for loop run at most n times each, but you can in fact argue that the running time is bounded by O(n+m).\nTo see this, notice that the line u in N(v) is executed twice for every edge (p,q): once when p is at the head of the queue and once when q is at the head of the queue. Also notice that every vertex gets pushed on the queue at most once, so the line v = pop(Q) is executed at most n times. This gives us a tighter and neater upper bound of O(n+m). 🎉\nWe now argue that the procedure above sees exactly what it is supposed to see: nothing more and nothing less. Not only that: the visited array that we sneaked in tracks the “volume numbers” from the notebooks analogy, and in fact records distances from the starting point.\n\n\n\n\n\n\nLemma. For finite d, any vertex u is at a distance of d from s if and only if visited[u] = d.\n\n\n\nConsider the case of finite d. For both statements, we argue by induction on d. We omit the base cases because they are easy to verify.\nFirst, suppose visited[u] = d. Then:\n\nby the mechanics of the algorithm, there is a vertex v such that:\n\nu in N(v) and\nvisited[v] = d-1, and\n\nby the induction hypothesis, the distance of v from s is d-1.\n\nThe claim follows by adding u to the (d-1)-length path from s to v guaranteed by the induction hypothesis.\nNow, suppose u is at a distance of d from s. Then there is a path P of length d from s to u, and this is a shortest path. Let u’s neighbor on this path be v. Notice that the sub-path P that starts at s and ends at v is a shortest path between s and v — if not, then we could plug the edge (v,u) at the end of a hypothetical shorter path, say Q, to contradict the assumption that u is at a distance of d from s.\nApply the induction hypothesis on v to see that visited[v] = d-1. Notice that when v is popped from the queue, the visited array has values between -1 and d (inclusive). At this point, it must be the case that visited[u] = -1 or visited[u] = d: if not, then by previous claim, we again contradict our assumption about the distance of u from s. Now:\n\nif visited[u] = d, we are done, and\nif visited[u] = -1, then v pulls u into the queue and visited[u] = d after this step, so we are done again.\n\nNote that this implies that vertices unreachable from s are not visited.\n\n\n\n\n\n\nCorollary. We have that d(s,u) = \\infty if and only if visited[u] = -1."
  },
  {
    "objectID": "materials/dsanotes/traversals/index.html#depth-first-search",
    "href": "materials/dsanotes/traversals/index.html#depth-first-search",
    "title": "Navigating Graphs",
    "section": "Depth-First Search",
    "text": "Depth-First Search\nA Depth-First Search mainly involves:\n\na way of discovering new univisted neighbors so we can go forward\na way of remembering where we came from to be able to backtrack\n\nThe first is easily achieved by the use of a visited array again, and for the second, we introduce a prev array that can help us find our way back to where we came from. Here is an implementation that closely follows the description of the algorithm we discussed earlier. We throw in a clock variable and birth and death arrays for some extra bookkeeping that will help us remember the timing of our first and final encounters with the vertices that we meet as we go along.\nfor all v: prev[v] = -1 \n//prev[v] = -1 iff v is unvisited\n\ncurrent = s\nprev[s] = s\n\nclock = 0\n\nwhile true:\n    clock = clock + 1\n\n    X = unvisited_neighbor(current)\n    // this returns -1 if X has no univisited neighbors\n    // and an arbitrary unvisited neighbor otherwise\n\n    If X is not -1:\n    // we have discovered a new thing\n    \n        // lets remember where we came from:    \n        prev[X] = current\n        \n        // record the time of discovery:\n        birth[X] = clock\n        \n        // and then go to this new place:    \n        current = X\n    \n    \n\n    Else: \n    // i.e, X has no new neighbors to offer\n\n        If X == s:\n            // we are back where we started        \n            // and we are done:\n            break\n        \n        Else:\n            // we know where to go        \n            // step back to make progress:\n            set current to prev[current]\n            \n            // note that we are done with X:\n            set death[X] = clock\nTo analyze the running time here, we need to know how unvisited_neighbor() is implemented. Let us work with the adjacency list representation, and let’s say that for every vertex v, we have a pointer pv that initially points to the head of the adjacency list of v. Now consider the following implementation of unvisited_neighbor(), where we are using pv.vertex to denote the neighbor of v that pv is pointing to:\nunvisited_neighbor(v):\n    while prev[pv.vertex] != -1:\n        if pv->next is NULL:\n            return -1\n        else:\n            pv = pv->next\n    return pv.vertex\nConsider the number of times the line:\nX = unvisited_neighbor(current)\nis executed. Observe that this is bounded by the total amount of “movement” experienced the pointers pv, where the totaling is being done over all vertices v. Since the pointers always shift further along the adjacency lists, and the total length of all the adjacency lists put together is the sum of the degrees of all the vertices, we can bound the total amount of work by twice the number of edges.\nAlso observe that the if and else blocks can be triggered at most n times each since they correpsond to our first and last visits to a vertex, respectively.\nTherefore, the overall running time of the algorithm is O(m+n), just like it was with breadth-first search.\nAlso, as with breadth-first search, we can see that we visit exactly the vertices we are supposed to: the set of visited vertices coincides with the set of vertices reachable from s. First, we make note of the following invariant:\n\n\n\n\n\n\nLemma. For every vertex u, if prev[u] > -1 and v is a neighbor of u, then prev[v] > -1.\n\n\n\nThe intuition for this invariant is the following: once a vertex is “born”, we do not let it “die” until all its neighbors are visited. A visited vertex keeps feeding the algorithm its unvisited neighbors, thereby prolonging its own lifespan, until it runs out.\nSomewhat more formally, suppose prev[u] > -1 and, for the sake of contradiction, say prev[v] = -1 for some neighbor of u. Since prev[u] > -1, the line:\nX = unvisited_neighbor(current)\nis executed with current being u at least once.\nSince prev[v] = -1 at the end of the algorithm, note that prev[v] = -1 throughout the algorithm. However, none of the calls to unvisited_neighbor(u) could have possibly output v, since this would immediately lead to prev[v] being overwritten with u.\nFrom this we can only conclude that unvisited_neighbor(u) was dysfunctional: u had an unvisited neighbor v that was not returned by any of the calls to unvisited_neighbor(u), which is the desired contradiction.\n\n\n\n\n\n\nLemma. For every vertex u, d(s,u) = \\infty if and only if prev[u] = -1.\n\n\n\nWe first show that if prev[u] = -1 then d(s,u) = \\infty, the contrapositive of which is that everything reachable is visited.\nSuppose prev[u] = -1 but d(s,u) = d for some finite d. Then there is a path P from s to u of length d. Let v be the first vertex on this path for which prev[v] = -1, and let w be the previous vertex on the path; in other words, w is the nieghbor of v in P whose distance from s is the smallest.\nBy assumption, prev[w] is not -1, implying that w was in fact visited by the algorithm. However, if w is visited, then the mechanics of the algorithm ensures that all neighbors of w are visited as well (see above), and in particular, so is v. However, this contradicts our assumption that prev[v] = -1.\nWe now show that if d(s,u) = \\infty then prev[u] = -1, the contrapositive of which is that everything visited is reachable.\nLet us, in fact, establish the contrapositive: prev[u] > -1 implies that there exists a finite d for which d(s,u) \\leqslant d. The intuition here is that we can climb our way back to s from u following the previous pointers. We need to be sure that the previous pointers always exist and don’t send us around in cycles.\nIn particular, consider the following sequence of previous pointers:\nprev[u], prev[prev[u]], prev[prev[prev[u]]], …\nConsider the value of the clock when prev[u] is set: this coincides with birth[u]. Let us associate with prev[u] the time birth[u].\nNow, suppose prev[u] is v. Note that prev[u] = v implies that u is an unvsited neighbor of v, where v itself is a visited vertex. Therefore, prev[v] is also well-defined and associated with birth[v]. We can repeat this argument for every step of the sequence, noting that the clock value strictly decreases at every step: and hence the sequence must reach s, at which point we can truncate it.\nIt is also easy to check that the vertices in the sequence are distinct: if not, we will have to contend with time travel! For instance, say:\n\nprev[a] = b and birth[a] = p\nprev[b] = c and birth[b] = q\nprev[c] = a and birth[c] = r\n\nNote that p > q > r, so c was introduced by a at a time when a was not even visited, which is impossible. This argument is easily complicated completed with generic subscripts, an exercise we leave to the reader.\nFollowing the sequence backwards gives us the desired path, and its length is (loosely) upper bounded by birth[u], and we are done. 🎉\n\n\n\nCareful what you wish for with DFS (thanks again, XKCD)…\n\n\n\n\n\n\n\n\nFood For Thought\n\n\n\nShow that for any two vertices u and v, the intervals (birth[u],death[u]) and (birth[v],death[v]) are either such that one is strictly contained in another, or are fully disjoint.\n\n\n\n\n\n\n\n\nFood For Thought\n\n\n\nLet us say that a vertex v is alive when the clock value is T if:\n\nT > birth[v] and\nT < death[v].\n\nSuppose further that you were working with a directed graph. Show that if, when you visit a vertex u for the first time, there is an edge from u to some vertex v that is alive then, there is a cycle that contains u and v. Is it true that if a directed graph has a cycle, then you will have an edge of this form: one from a vertex newly visited to one that is alive?\nProtip: Google for backedges if you are trying to look this up!"
  },
  {
    "objectID": "materials/dsanotes/traversals/index.html#references",
    "href": "materials/dsanotes/traversals/index.html#references",
    "title": "Navigating Graphs",
    "section": "References",
    "text": "References\n\nHere are nice animated explanations, including actual implementations, for BFS and DFS.\nPlay around with examples of your own with visualgo implementations of graph traversals.\nThe following writeups emphasize recursive approaches to DFS:\n\nDFS on DAGs\nJeff Erickson on DFS"
  },
  {
    "objectID": "courses/2023/01-ES242/labs/lab-w10.html",
    "href": "courses/2023/01-ES242/labs/lab-w10.html",
    "title": "ES242. Data Structures and Algorithms I. Week 10 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nBFS and DFS Puzzles\n\n\n\n\n\n\n\n\n\nProblem 1. Make It Happen\n\n\n\n\n\nYou are playing a game on a coordinate grid that has n special locations that we call magical. If you are at a magical location L at (p,q), you can teleport to any other magical location that shares either the x-coordinate or the y-coordinate of L. These teleports are your only way of moving in the landscape of the game.\nYou want to ensure that if you start at any magical location, you should be able to reach any other magical location. This may not be possible with the original set of magical locations. You can open up new magical locations anywhere you like, but opening a new location is expensive. Therefore, you want to open as few new ones as possible.\nThe goal in this problem is to determine the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\nThe first line of input contains a single integer n (1 \\leqslant n \\leqslant 100) — the number of magical locations. Each of the following n lines contains two integers x_i and y_i (1 \\leqslant x_i, y_i \\leqslant 1000) — the coordinates of the i-th location.\nThe magical locations are all distinct.\n\n\n\nOutput the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\n\nSample Input\n2\n2 1\n1 2\nSample Output\n1\nSample Input\n2\n2 1\n4 1\nSample Output\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Switching Lines\n\n\n\n\n\nYou are trying to navigate the Ahmedabad Metro, which consists of N stations and M railway lines.\nThe stations are numbered 1 through N.\nEach line is operated by a company. Each company has an identification number.\nThe i-th (1 \\leqslant i \\leqslant M) line connects station p_i and q_i bidirectionally. There is no intermediate station. This line is operated by company c_i.\nYou can change trains at a station where multiple lines are available.\nThe fare system used in this subway system works as follows.\n\nAs long as you only use lines that are operated by the same company, the fare remains 10 rupees.\nWhenever you change to a line that is operated by a different company from the current line, you will be charged an additional fare of 10 rupees.\nIn a case where you changed from some company A’s line to another company’s line, and then you change back to company A’s line, the additional fare is incurred again.\n\nYou begin at station 1 and you want to travel to station N using the metro. Find the minimum required fare.\n\n\nThe input is given in the following format. The first line consists of two space-separated integers, N and M. Then, M lines follow. The i-th line consists of three space-separated numbers p_i, q_i and c_i.\nN M\np1 q1 c1\n.\n.\n.\npM qM cM\n\n\n\nPrint the minimum required fare. If it is impossible to get to station N by subway, print -1 instead.\nSample Input 1\n3 3\n1 2 1\n2 3 1\n3 1 2\nSample Output 1\n10\nUse only company 1’s lines.\nSample Input 2\n8 11\n1 3 1\n1 4 2\n2 3 1\n2 5 1\n3 4 3\n3 6 3\n3 7 3\n4 8 4\n5 6 1\n6 7 5\n7 8 5\nSample Output 2\n20\nFirst, use company 1’s lines: 1 → 3 → 2 → 5 → 6. Then, use company 5’s lines: 6 → 7 → 8.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Prolonged Vacation\n\n\n\n\n\nYou have won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, you want to max out on the prize and make the trip as long as possible.\nIn particular, you want to fly from Ahmedabad to Mumbai while visiting the maximum number of cities. You are given the list of possible flights, and you are also given that there are no directed cycles in the flight network.\n\n\nThe first input line has two integers n and m: the number of cities and flights.\nThe cities are numbered 1,2,\\ldots,n.\nCity 1 is Ahmedabad, and City n is Mumbai.\nAfter this, there are m lines describing the flights. Each line has two integers a and b: there is a flight from city a to city b.\nNote that each flight is a one-way flight.\n\n\n\nFirst print the maximum number of cities on the route. If there are no solutions, print “IMPOSSIBLE”.\n(While this is not required for the lab submission, as a bonus problem, try to modify your code so that it also prints the cities in the order they will be visited.)\nSample Input\n5 5\n1 2\n2 5\n1 3\n3 4\n4 5\nSample Output\n4\nNote that 1 3 4 5 is a valid route."
  },
  {
    "objectID": "blog/13-sheep/index.html",
    "href": "blog/13-sheep/index.html",
    "title": "13 Sheep",
    "section": "",
    "text": "So 13 Sheep is cute roll-and-write game that involves protecting a bunch of sheep on a grid by placing small fences that have pre-defined shapes. The initial position of a certain number — typically 13, as the name suggests — of sheep over a 7x7 grid is given. Some grid edges are not available because there happen to be bushes: so you cannot fence them. The bushes do not protect the sheep either, the wolf can slide under them.\nYour goal is to enclose as many sheep as possible: the ones that are not fully protected by fences may, alas, be at considerable risk when the inevitable wolf attack happens.\nThere are three main constrianing factors in this game:\n\nThe shape of the fences that you can draw are determined by the roll of a die;\nYou cannot overwrite lines that are already drawn, you cannot also draw over bushes;\nYou have ~11 chances to place your randomly gifted fence shapes.\n\nYou can find out more about the game here, where you can generate board layouts to print and play as well.\nI found this game a lot of fun to play, and I thought it would be lovely to be able to play it on a computer, where the user can decide how many rounds, sheep, and bushes they want to play with. Given also that chatGPT has been apparently remarkably adept at coding games, I figured I’d give it a shot.\nMy first prompt was just a polite inquiry about whether chatGPT would be willing to participate in this exercise:\n\n\n\n\n\n\nWe want to code a game called 13 Sheep using HTML, CSS, and Javascript. Ready?\n\n\n\nAnd well, it immediately made this, based on the prompt above: a game where you get to count to 13 sheep. Huh. Promising.\nIn my next few prompts, I steered it away from the default game. The first few steps just involved setting up the UI:\n\n\n\n\n\n\nGreat start! Please make the main canvas a square and draw a 7 x 7 grid in it. I want all the corners of the cells to look like small + signs. Do not draw any grid borders yet.\n\n\n\n\n\n\n\n\n\nNice, how can I make the grid background mediumseagreen?\n\n\n\n\n\n\n\n\n\nOn load, I want 13 grid cells to be identified at random, and the image sheep.png to be placed at their centers, appropriately scaled to fit.\n\n\n\nAt this point I already had a nice-looking grid with 13 sheep on it (thanks to Flaticon for the cute sheep icon). The plus signs drawn on the boundary were oddly cropped out, so we fixed that next:\n\n\n\n\n\n\nOk this looks great. Can you update the drawcross function so that crosses are also drawn on the grid boundary? And make the canvas a little bigger if needed so the entire cross is visible?\n\n\n\nThis didn’t immediately work but some nudging fixed it:\n\n\n\n\n\n\nThe crosses at the bottom are getting cut off and now the sheep are off center. Please fix?\n\n\n\nNow we draw the bushes:\n\n\n\n\n\n\nVery nice. Can you randomly select 7 cells now and for each such cell make one of the cell boundaries colored indianred?\n\n\n\nNext we get the dice roll UI up:\n\n\n\n\n\n\nExcellent. Now please add six divs below the canvas, centered, evenly spaced, and with a light grey circular background, with the text 1, 2, 3, 4, 5, and 6 written inside them. Note that the first div should have the text 1, the second should have 2, and so on. Make sure the divs have at least 10px spacing between them.\nBelow these divs, please add a large button in the shape of a rounded rectangle, with the text “Roll Dice” written on it. The background color for this button should be indianred with a transparency of 0.42.\n\n\n\nThis actually worked out of the box, the next step was to make the roll dice functional:\n\n\n\n\n\n\nSuper nice!\nNow can you make it so that when the user clicks on the button labeled “Roll Dice”, we generate a number between 1 and 6 at random, and highlight the corresponding circular div by changing its background to Lavendar, while also resetting any previous highlight?\n\n\n\nSo far, so good. Now all that was left was to get the fences drawn depending on what dice was rolled out.\n\n\n\n\n\n\nFence Shapes Based on Dice Rolls\n\n\n\n\n\n\n\n\nDice Roll 1\n\n\n\n\n\n\nDice Roll 2\n\n\n\n\n\n\nDice Roll 3\n\n\n\n\n\n\nDice Roll 4\n\n\n\n\n\n\nDice Roll 5\n\n\n\n\n\n\nDice Roll 6\n\n\n\n\n\nThis was perhaps the trickiest bit. My first attempt was this prompt here:\n\n\n\n\n\n\nGreat! Now can you update it so that:\nif the outcome of the dice roll is a 1, the cursor should change to a shape that looks like a U, and nothing outside the grid should be clickable. If the user clicks on a grid cell, then the left, bottom, and right borders of the cell should change color and become a thick line colored in olivedrab. Once the user has clicked on a grid cell the cursor should change back to normal.\nif the outcome of the dice roll is a 2, the cursor should change to a shape that looks like a long line, and nothing outside the grid should be clickable, and none of the cells in the last column should be clickable either. If the user clicks on a grid cell, then the bottom border of the cell should change color and become a thick line colored in olivedrab, and the the bottom border of the horizontally adjacent cell should change color and become a thick line colored in olivedrab. Once the user has clicked on a grid cell the cursor should change back to normal.\n\n\n\nMy hope was that the change of cursor would be a good way for the player to register that they need to move on the grid now. At this point, I was not thinking about the different orientations of the fences, because I was not sure about how to incorporate that into the UI (my first thought was to have the fences rotate on subsequent clicks until the player clicks on a confirm button, but that seemed too messy). I also did not give all six scenarios in one go since — from recent experience — the interface dies out on longer requests. You can prod it to continue from where it left off, but it’s typically messy.\nIn any case, we could not get the change of cursor to work. At this point, note that the code is also not tracking what borders are colored, so even as we got things to mildly work, we were often overwriting fences and bushes. So anyway, at some point I gave up and it was back to square one, but smaller steps. First, instead of a change of cursor, I just requested a canvas background color change to subtly communicate a change of game state:\n\n\n\n\n\n\nOnce the dice roll button is clicked, can you change the background of the canvas to dodgerblue with transparency 0.42, and disable the roll dice button until the user clicks on a grid cell?\n\n\n\nThen we added a round tracker:\n\n\n\n\n\n\nAdd the following text just below the “Roll Dice” button: “Roll a dice now, 11 rounds left”. Every time the user clicks on “Roll Dice”, change the text to “Place a fence now.” Once the user clicks on a grid cell, change the text back to “Roll a dice now, 11 rounds left”, but decrease the number of rounds by one each time. Can you do this?\n\n\n\nThis took some back and forth to get working, since it was getting some details mixed up, but it was finally alright. I had to prompt more to take care of some edge cases and minor details, for instance:\n\n\n\n\n\n\nAnyway, can you make it so that when there are 0 rounds left, the text simply says “Game Over”?\nAlso when the roll dice button is not active, can it have a grey background? Only when it is not active.\n\n\n\nNow we are back to actually trying to get the fences to be drawn. With some nervousness, I go:\n\n\n\n\n\n\nVery nice. Now, if the dice roll is a 1 and the user clicks on a grid cell, can you do the following?\n\nlet us say that a cell is valid if the top, left, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its top, left, and bottom borders colored olivedrab.\n\n\n\n\nAt this point the code generated starts tracking what borders are visible: I had to prompt it explicitly to update the function that generated the bushes to feed into the visibility states, but this went off pretty smoothly. For quite some time the fences drawn were not the ones I wanted, but after a few nudges it got it about right.\nNow it occured to me that I could actually show the orientations after the dice is rolled and the user can select one of them, and we can draw the appropriate fence after this selection is made.\n\n\n\n\n\n\nGreat. This works. Now below the instruction-text element, please add another div with ID “orientation-select” that begins with the text: “Pick an orientation”. Below this, add four circular divs with a light grey backgorund with the content: “0”, “90”, “180”, “270”. This div should only be visible when the gamestate is “chooseFenceOrientation” or “placeFence”.\nOnce a dice is rolled, the game state should change to chooseFenceOrientation and the user should be allowed to click any of these four divs. Once the user clicks one of the four divs, highlight it with the color burntorange and change the gamestate to placeFence. Store the choice of which div the user clicked on in a variable called fenceorientation and change the game state to placeFence.\nOnce the user clicks on a grid cell, clear the burntorange highlight and hide the “orientation-select” div, as it should not be visible any more.\n\n\n\nOf course in the UI at the moment we just have these four numbers so it does not make a lot of sense to the player, so I whipped some images to show the user what fences would be drawn depending on what grid cell was clicked.\nNow we come back to the fence drawing thing to account for the orientations as well:\n\n\n\n\n\n\nIn the handleGridClick() function, we want to implement the following functionality.\nIf the outcome is 1 and the orientation is 0, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the top, left, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its top, left, and bottom borders colored olivedrab.\n\nIf the outcome is 1 and the orientation is 90, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the right, left, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its right, left, and bottom borders colored olivedrab.\n\nIf the outcome is 1 and the orientation is 180, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the right, top, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its right, top, and bottom borders colored olivedrab.\n\nIf the outcome is 1 and the orientation is 270, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the right, left, and top borders of the grid have no visible borders.\nif the cell is valid, then make its right, left, and top borders colored olivedrab.\n\nPlease remember to use the drawBorder function from before as you work out these cases. Also remember to update the grid visibility values, for the two relevant cells per border drawn. Thanks.\n\n\n\nGetting this going for all the 20 different cases was really the bulk of the back and forth. While it got the overall functionality right, there would be small and frequent bugs in the details. For instance, if a cell’s top border is being fenced, then the cell above it should have its bottom border’s visibility updated: it knows this, but frequently got combinations wrong, and so I did have to read the code generated carefully. I either fixed it manually when the bugs were minor, or went back to requesting corrections by explaining the issue when it was off by a whole lot.\nYou can see that some of the prompts are longer than the corresponding code :D\n\n\n\n\n\n\nLooks great! Lets continue with our updates. Please remember to account for all the cases when updating the grid visibility values.\nIf the outcome is 4 and the orientation is 0, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its bottom and left borders are not visible and the horizontally adjacent cell (i.e, the cell to the right of it) also does not have a bottom border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its bottom and left borders colored olivedrab. Also make the bottom border of the horizontally adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\nIf the outcome is 4 and the orientation is 180, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its top border is not visible and the horizontally adjacent cell (i.e, the cell to the right of it) also does not have a top border and the horizontally adjacent cell (i.e, the cell to the right of it) also does not have a right border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its top border colored olivedrab. Also make the top border of the horizontally adjacent cell colored olivedrab. Also make the right border of the horizontally adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\nIf the outcome is 4 and the orientation is 90, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its top and left borders are not visible and the vertically adjacent cell (i.e, the cell below it) also does not have a left border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its top and left borders colored olivedrab. Also make the left border of the vertically adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\nIf the outcome is 4 and the orientation is 270, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its bottom and right borders are not visible and the vertically adjacent cell (i.e, the cell to the top of it) also does not have a right border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its bottom and right borders colored olivedrab. Also make the right border of the vertically adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\n\n\n\nMaybe it’ll soon be possible to just upload a picture of the game instruction booklet and let chatGPT do the rest of the heavy lifting. Until then, this was the best I could think of: maybe there’s a shorter way? I did try using generic shape descriptions, but no luck on those.\nNow the basic game was done, and there were three main features I’d have really liked to add at this point:\n\nAllow the user undo the previous fence placement.\nCount the number of protected sheep at the end.\nMake a version of this game where instead of rolling a dice, we let the user pick the fences they want: this can be useful for a multiplayer setting where we want the random choices to be the same for all players: so one player can roll the dice and the others can follow along.\n\nI did try some of this: it’s impressive that chatGPT gets the main ideas right the first two requirements (the use of an action stack for implementing undo, and recognizing that we need some kind of flood fill algorithm for the score). However, all the implementations ended up being somewhat buggy and after some wrestling I decided to push these extras to the roadmap. The deterministic version of the game should not be hard to make, even manually at this point, so I hope to come back to it soon.\nAfter this I mainly asked for chatGPT to let the user customize the parameters of the game:\n\n\n\n\n\n\nCan you make it so that when the page loads we ask the user (via an alert) for a number between 7 and 32 and set the number of rounds to the number specified by the user?\n\n\n\nIt got this immediately right, and I wanted some styling:\n\n\n\n\n\n\nCan you add some css styling so that this prompt looks nice?\n\n\n\nand it’s response was:\n\n\n\n\n\n\nUnfortunately, you cannot directly style the default JavaScript prompt function. Instead, you can create a custom modal using HTML, CSS, and JavaScript to achieve a more visually appealing and flexible solution.\nHere’s an example of how you can create a custom modal to ask for the number of rounds:\n…\n\n\n\nGood to know! The modals worked out of the box, and it was easy to extend them so they asked for the number of sheep and bushes as well. The last thing I wanted to add was a sharing feature:\n\n\n\n\n\n\nCan you add code so that the user can share a screenshot of just the canvas once the game is over? So once the game is over, I want to show a link called “Share My Game!” The screenshot and options to share on social media should show up in a modal when the user clicks this link.\n\n\n\nNow this it did remarkably well, except that when it tried to pass the entire image as a URL parameter, that didn’t work out. When I conveyed this, the response was:\n\n\n\n\n\n\nI apologize for the inconvenience. The reason for this issue is that sharing an image directly using a URL is not possible due to security reasons. To share your game image on social media platforms like Facebook and Twitter, you’ll need to use their respective APIs.\nHere’s a modified approach for sharing the image on Facebook and Twitter. You’ll need to create Facebook and Twitter developer accounts and register your app to get the API keys.\n\n\n\nWhoa… so ok, I don’t have developer accounts and I was not going to follow through, but this was definitely interesting!\nI did interleave responses from chatGPT with help from Ghostwriter, which is the intelligence built into repl.it out of the box. Ghostwriter’s responses were usually not as sophisticated on comparable prompts, but on a couple of occassions chatGPT was completely lost on why something wasn’t working, but Ghostwriter would figure it out when asked pointed questions about an error.\nAnyway, I cleaned up a little further with some styling, and the game is here, while the source is here."
  },
  {
    "objectID": "blog/13sheep/index.html",
    "href": "blog/13sheep/index.html",
    "title": "13 Sheep",
    "section": "",
    "text": "13 Sheep happens to be a cute roll-and-write game designed by Moritz Dressler that involves protecting a bunch of sheep on a grid by placing small fences that have pre-defined shapes.\n\n\n\nThe Roll and Write Game\n\n\nThe initial position of a certain number — typically 13, as the name suggests — of sheep over a 7x7 grid is given. Some grid edges are not available because there happen to be bushes: so you cannot fence them. The bushes do not protect the sheep either, the wolf can slide under them.\nYour goal is to enclose as many sheep as possible: the ones that are not fully protected by fences may, alas, be at considerable risk when the inevitable wolf attack happens.\nThere are three main constrianing factors in this game:\n\nThe shape of the fences that you can draw are determined by the roll of a die;\nYou cannot overwrite lines that are already drawn, you cannot also draw over bushes;\nYou have ~11 chances to place your randomly gifted fence shapes.\n\nYou can find out more about the game here, where you can generate board layouts to print and play as well.\nI found this game a lot of fun to play, and I thought it would be lovely to be able to play it on a computer, where the user can decide how many rounds, sheep, and bushes they want to play with. Given also that chatGPT has been apparently remarkably adept at coding games, I figured I’d give it a shot1.\nI describe my conversation with chatGPT below, but if you just want to cut to the case and check the game out, you can find the playable version here and the source here.\nHere’s what we finally built:\n\n\n\nThe 13 Sheep UI\n\n\nAnd once you’ve finished playing you can share your accomplishment like so:\n\n\n\nOne of my completed games… where we protect five sheep, can you figure out how many rounds?\n\n\n\nSo, back to chatGPT. My first prompt was just a polite inquiry about willingness to participate in this exercise:\n\n\n\n\n\n\nWe want to code a game called 13 Sheep using HTML, CSS, and Javascript. Ready?\n\n\n\nAnd well, it immediately made this, based on the prompt above: a game where you get to count to 13 sheep. Huh. Promising.\nIn my next few prompts, I steered it away from the default game. The first few steps just involved setting up the UI:\n\n\n\n\n\n\nGreat start! Please make the main canvas a square and draw a 7 x 7 grid in it. I want all the corners of the cells to look like small + signs. Do not draw any grid borders yet.\n\n\n\n\n\n\n\n\n\nNice, how can I make the grid background mediumseagreen?\n\n\n\n\n\n\n\n\n\nOn load, I want 13 grid cells to be identified at random, and the image sheep.png to be placed at their centers, appropriately scaled to fit.\n\n\n\nAt this point I already had a nice-looking grid with 13 sheep on it (thanks to Flaticon for the cute sheep icon). The plus signs drawn on the boundary were oddly cropped out, so we fixed that next:\n\n\n\n\n\n\nOk this looks great. Can you update the drawcross function so that crosses are also drawn on the grid boundary? And make the canvas a little bigger if needed so the entire cross is visible?\n\n\n\nThis didn’t immediately work but some nudging fixed it:\n\n\n\n\n\n\nThe crosses at the bottom are getting cut off and now the sheep are off center. Please fix?\n\n\n\nThat worked — phew! Now we draw the bushes:\n\n\n\n\n\n\nVery nice. Can you randomly select 7 cells now and for each such cell make one of the cell boundaries colored indianred?\n\n\n\nNext we get the dice roll UI up:\n\n\n\n\n\n\nExcellent. Now please add six divs below the canvas, centered, evenly spaced, and with a light grey circular background, with the text 1, 2, 3, 4, 5, and 6 written inside them. Note that the first div should have the text 1, the second should have 2, and so on. Make sure the divs have at least 10px spacing between them.\nBelow these divs, please add a large button in the shape of a rounded rectangle, with the text “Roll Dice” written on it. The background color for this button should be indianred with a transparency of 0.42.\n\n\n\nThis actually worked out of the box, the next step was to make the roll dice functional:\n\n\n\n\n\n\nSuper nice!\nNow can you make it so that when the user clicks on the button labeled “Roll Dice”, we generate a number between 1 and 6 at random, and highlight the corresponding circular div by changing its background to Lavendar, while also resetting any previous highlight?\n\n\n\nSo far, so good. Now all that was left was to get the fences drawn depending on what dice was rolled out.\n\n\n\n\n\n\nFence Shapes Based on Dice Rolls\n\n\n\n\n\n\n\n\nDice Roll 1\n\n\n\n\n\n\nDice Roll 2\n\n\n\n\n\n\nDice Roll 3\n\n\n\n\n\n\nDice Roll 4\n\n\n\n\n\n\nDice Roll 5\n\n\n\n\n\n\nDice Roll 6\n\n\n\n\n\nThis was perhaps the trickiest bit. My first attempt was this prompt here:\n\n\n\n\n\n\nGreat! Now can you update it so that:\nif the outcome of the dice roll is a 1, the cursor should change to a shape that looks like a U, and nothing outside the grid should be clickable. If the user clicks on a grid cell, then the left, bottom, and right borders of the cell should change color and become a thick line colored in olivedrab. Once the user has clicked on a grid cell the cursor should change back to normal.\nif the outcome of the dice roll is a 2, the cursor should change to a shape that looks like a long line, and nothing outside the grid should be clickable, and none of the cells in the last column should be clickable either. If the user clicks on a grid cell, then the bottom border of the cell should change color and become a thick line colored in olivedrab, and the the bottom border of the horizontally adjacent cell should change color and become a thick line colored in olivedrab. Once the user has clicked on a grid cell the cursor should change back to normal.\n\n\n\nMy hope was that the change of cursor would be a good way for the player to register that they need to move on the grid now. At this point, I was not thinking about the different orientations of the fences, because I was not sure about how to incorporate that into the UI (my first thought was to have the fences rotate on subsequent clicks until the player clicks on a confirm button, but that seemed too messy). I also did not give all six scenarios in one go since — from recent experience — the interface dies out on longer requests. You can prod it to continue from where it left off, but it’s typically messy.\nIn any case, we could not get the change of cursor to work. At this point, note that the code is also not tracking what borders are colored, so even as we got things to mildly work, we were often overwriting fences and bushes. So anyway, at some point I gave up and it was back to square one, but smaller steps. First, instead of a change of cursor, I just requested a canvas background color change to subtly communicate a change of game state:\n\n\n\n\n\n\nOnce the dice roll button is clicked, can you change the background of the canvas to dodgerblue with transparency 0.42, and disable the roll dice button until the user clicks on a grid cell?\n\n\n\nThen we added a round tracker:\n\n\n\n\n\n\nAdd the following text just below the “Roll Dice” button: “Roll a dice now, 11 rounds left”. Every time the user clicks on “Roll Dice”, change the text to “Place a fence now.” Once the user clicks on a grid cell, change the text back to “Roll a dice now, 11 rounds left”, but decrease the number of rounds by one each time. Can you do this?\n\n\n\nThis took some back and forth to get working, since it was getting some details mixed up, but it was finally alright. I had to prompt more to take care of some edge cases and minor details, for instance:\n\n\n\n\n\n\nAnyway, can you make it so that when there are 0 rounds left, the text simply says “Game Over”?\nAlso when the roll dice button is not active, can it have a grey background? Only when it is not active.\n\n\n\nNow we are back to actually trying to get the fences to be drawn. With some nervousness, I go:\n\n\n\n\n\n\nVery nice. Now, if the dice roll is a 1 and the user clicks on a grid cell, can you do the following?\n\nlet us say that a cell is valid if the top, left, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its top, left, and bottom borders colored olivedrab.\n\n\n\n\nAt this point the code generated starts tracking what borders are visible. I did have to prompt it explicitly to update the earlier function that generated the bushes to feed into the visibility states. However, this went off pretty smoothly overall. For quite some time the fences drawn when the user clicked a grid cell were not the ones I wanted, but after a few nudges it got it about right.\nNow it occured to me that I could actually show the orientations after the dice is rolled and the user can select one of them, and we can draw the appropriate fence after this selection is made.\n\n\n\n\n\n\nGreat. This works. Now below the instruction-text element, please add another div with ID “orientation-select” that begins with the text: “Pick an orientation”. Below this, add four circular divs with a light grey backgorund with the content: “0”, “90”, “180”, “270”. This div should only be visible when the gamestate is “chooseFenceOrientation” or “placeFence”.\nOnce a dice is rolled, the game state should change to chooseFenceOrientation and the user should be allowed to click any of these four divs. Once the user clicks one of the four divs, highlight it with the color burntorange and change the gamestate to placeFence. Store the choice of which div the user clicked on in a variable called fenceorientation and change the game state to placeFence.\nOnce the user clicks on a grid cell, clear the burntorange highlight and hide the “orientation-select” div, as it should not be visible any more.\n\n\n\nOf course in the UI at the moment we just have these four numbers so it does not make a lot of sense to the player, so I whipped some images to show the user what fences would be drawn depending on what grid cell was clicked.\nNow we come back to the fence drawing thing to account for the orientations as well:\n\n\n\n\n\n\nIn the handleGridClick() function, we want to implement the following functionality.\nIf the outcome is 1 and the orientation is 0, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the top, left, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its top, left, and bottom borders colored olivedrab.\n\nIf the outcome is 1 and the orientation is 90, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the right, left, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its right, left, and bottom borders colored olivedrab.\n\nIf the outcome is 1 and the orientation is 180, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the right, top, and bottom borders of the grid have no visible borders.\nif the cell is valid, then make its right, top, and bottom borders colored olivedrab.\n\nIf the outcome is 1 and the orientation is 270, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if the right, left, and top borders of the grid have no visible borders.\nif the cell is valid, then make its right, left, and top borders colored olivedrab.\n\nPlease remember to use the drawBorder function from before as you work out these cases. Also remember to update the grid visibility values, for the two relevant cells per border drawn. Thanks.\n\n\n\nGetting this going for all the 20 different cases was really the bulk of the back and forth. While it got the overall functionality right, there would be small and frequent bugs in the details. For instance, if a cell’s top border is being fenced, then the cell above it should have its bottom border’s visibility updated: it knows this, but frequently got combinations wrong, and so I did have to read the code generated carefully. I either fixed it manually when the bugs were minor, or went back to requesting corrections by explaining the issue when it was off by a whole lot.\nYou can see that some of the prompts are longer than the corresponding code :D\n\n\n\n\n\n\nLooks great! Lets continue with our updates. Please remember to account for all the cases when updating the grid visibility values.\nIf the outcome is 4 and the orientation is 0, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its bottom and left borders are not visible and the horizontally adjacent cell (i.e, the cell to the right of it) also does not have a bottom border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its bottom and left borders colored olivedrab. Also make the bottom border of the horizontally adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\nIf the outcome is 4 and the orientation is 180, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its top border is not visible and the horizontally adjacent cell (i.e, the cell to the right of it) also does not have a top border and the horizontally adjacent cell (i.e, the cell to the right of it) also does not have a right border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its top border colored olivedrab. Also make the top border of the horizontally adjacent cell colored olivedrab. Also make the right border of the horizontally adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\nIf the outcome is 4 and the orientation is 90, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its top and left borders are not visible and the vertically adjacent cell (i.e, the cell below it) also does not have a left border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its top and left borders colored olivedrab. Also make the left border of the vertically adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\nIf the outcome is 4 and the orientation is 270, then do the following when the user clicks on a grid cell.\n\nlet us say that a cell is valid if its bottom and right borders are not visible and the vertically adjacent cell (i.e, the cell to the top of it) also does not have a right border. if a cell is on the right-most column, it is automatically not valid.\nif the cell is valid, then make its bottom and right borders colored olivedrab. Also make the right border of the vertically adjacent cell colored olivedrab. Update the grid visibility values as appropriate.\n\n\n\n\nMaybe it’ll soon be possible to just upload a picture of the game instruction booklet and let chatGPT do the rest of the heavy lifting. Until then, this was the best I could think of: maybe there’s a shorter way? I did try using generic shape descriptions, but no luck on those.\nNow the basic game was done, and there were three main features I’d have really liked to add at this point:\n\nAllow the user undo the previous fence placement.\nCount the number of protected sheep at the end.\nMake a version of this game where instead of rolling a dice, we let the user pick the fences they want: this can be useful for a multiplayer setting where we want the random choices to be the same for all players: so one player can roll the dice and the others can follow along.\n\nI did try some of this: it’s impressive that chatGPT gets the main ideas right the first two requirements (the use of an action stack for implementing undo, and recognizing that we need some kind of flood fill algorithm for the score). However, all the implementations ended up being somewhat buggy and after some wrestling I decided to push these extras to the roadmap. The deterministic version of the game should not be hard to make, even manually at this point, so I hope to come back to it soon.\nAfter this I mainly asked for chatGPT to let the user customize the parameters of the game:\n\n\n\n\n\n\nCan you make it so that when the page loads we ask the user (via an alert) for a number between 7 and 32 and set the number of rounds to the number specified by the user?\n\n\n\nIt got this immediately right, and I wanted some styling:\n\n\n\n\n\n\nCan you add some css styling so that this prompt looks nice?\n\n\n\nand it’s response was:\n\n\n\n\n\n\nUnfortunately, you cannot directly style the default JavaScript prompt function. Instead, you can create a custom modal using HTML, CSS, and JavaScript to achieve a more visually appealing and flexible solution.\nHere’s an example of how you can create a custom modal to ask for the number of rounds:\n…\n\n\n\nGood to know! The modals worked out of the box, and it was easy to extend them so they asked for the number of sheep and bushes as well. The last thing I wanted to add was a sharing feature:\n\n\n\n\n\n\nCan you add code so that the user can share a screenshot of just the canvas once the game is over? So once the game is over, I want to show a link called “Share My Game!” The screenshot and options to share on social media should show up in a modal when the user clicks this link.\n\n\n\nNow this it did remarkably well, except that when it tried to pass the entire image as a URL parameter, that didn’t work out. When I conveyed this, the response was:\n\n\n\n\n\n\nI apologize for the inconvenience. The reason for this issue is that sharing an image directly using a URL is not possible due to security reasons. To share your game image on social media platforms like Facebook and Twitter, you’ll need to use their respective APIs.\nHere’s a modified approach for sharing the image on Facebook and Twitter. You’ll need to create Facebook and Twitter developer accounts and register your app to get the API keys.\n\n\n\nWhoa… so ok, I don’t have developer accounts and I was not going to follow through, but this was definitely interesting!\nI did interleave responses from chatGPT with help from Ghostwriter, which is the intelligence built into repl.it out of the box. Ghostwriter’s responses were usually not as sophisticated on comparable prompts, but on a couple of occassions chatGPT was completely lost on why something wasn’t working, but Ghostwriter would figure it out when asked pointed questions about an error. There seems to be some potential that they will be a good team — possibly also alongside Copilot, which I did not use at all here.\n\n\n\n\n\n\nThe Final Product\n\n\n\nAnyway, long story short, I cleaned up a little further on my own, and finally: the game is here, the source is here.\n\n\nMy experience with chatGPT and Ghostwriter as pair programmers was — I daresay — rewarding overall. When I first thought of doing this, perhaps partially intoxicated by all the hype, I figured I could get this done in a couple of hours at the most: I estimated twenty minutes for functional code, and about a 100 minutes for making up my mind about colors and fonts. This was a vast underestimate: I think I spent close to a good twelve hours (including a couple of early throw-away prototypes, and all the failed attempts on the flood filling) altogether2… at some point it did get a little addictive, and perhaps there was a sunk cost argument for not letting go halfway through.\nAs someone who does not know javascript, I found this to be a part empowering, part learning, and mostly amusing experience. It felt like picking up a natural language by directly talking to mostly fluent speakers who made random and small mistakes. My overall sentiments were very similar to the process described in this thread, where Ammaar Reshi uses GPT-4, Replit, MidJourney, and Claude to create a 3D space runner from scratch with ZERO [sic] knowledge of Javascript or 3D game programming: you should check this out if you are interested in a much more sophisticated demonstration for deploying AI tools to make games!\nIn its current form I think this also has interesting implications for how programming is taught: I hesitate to elaborate any further on this given how likely it is that any commentary will be obsolete by tomorrow. But in the very near term, I can imagine that reading, analyzing, and even learning alongside chatGPT could make for interesting experiences in the classroom.\n\n\n\n\nFootnotes\n\n\nIncidentally, I couldn’t find a playable version like this one online. If you know of one please let me know and I’ll be sure to add a pointer!↩︎\nAt least I’m not the only one spending hours in the plural.↩︎"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L14.html",
    "href": "courses/2023/01-CS614/quizzes/L14.html",
    "title": "CS614. Advanced Algorithms. L14 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 2. High-Degree Branching for FVS\n\n\n\nApply the same preprocessing steps as in the previous problem.\nLet \\left(v_1, v_2, \\ldots, v_n\\right) be a descending ordering of V(G) according to vertex degrees, i.e., d\\left(v_1\\right) \\geq d\\left(v_2\\right) \\geq \\ldots \\geq d\\left(v_n\\right). Let V_{3 k}=\\left\\{v_1, \\ldots, v_{3 k}\\right\\}.\nRecall that the minimum vertex degree of G is at least 3. Show that every feedback vertex set in G of size at most k contains at least one vertex of V_{3 k}."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L13.html",
    "href": "courses/2023/01-CS614/quizzes/L13.html",
    "title": "CS614. Advanced Algorithms. L13 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. FVS: is this FPT?\n\n\n\nRecall the following branching algorithm for Feedback Vertex Set (FVS) discussed in class:\n\nPreprocess to eliminate vertices of degree at most two, resulting in an equivlaent multigraph.\nPreprocess to force vertices with self-loops in the solution and adjust the budget as appropriate.\nIf a pair of vertices have more than two edges between them, delete all but two of these edges.\nSTOP if the graph is a forest or if we are out of budget.\nFind a shortest cycle and branch on all its vertices.\n\nSince a graph of minimum degree three that is not acyclic always has a cycle of length O(\\lg n), this algorithm has a running time of O^\\star((\\lg n)^k). Argue that this running time in fact shows that FVS is FPT in k."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L12.html",
    "href": "courses/2023/01-CS614/quizzes/L12.html",
    "title": "CS614. Advanced Algorithms. L12 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. List Coloring\n\n\n\nIn the List Coloring problem, we are given a graph G and for each vertex v \\in V(G) there is a set (also called a list) of admissible colors L(v) \\subseteq N. The goal is to verify whether it is possible to find a proper vertex coloring c: V(G) \\rightarrow \\mathbb{N} of G such that for ever y vertex v we have c(v) \\in L(v). In other words, L(v) is the set of colors allowed for v.\nShow a 2^n n^{\\mathcal{O}(1)}-time algorithm for List Coloring.\nHint. Read Theorem 10.8 from the Parameterized Algorithms text.\n\n\n\n\n\n\n\n\nProblem 2. Triangle Packing\n\n\n\nIn the Triangle Packing problem, we are given an undirected graph G and a positive integer k, and the objective is to test whether G has k-vertex disjoint triangles. Using color coding show that the problem admits an algorithm with running time 2^{O(k)} n^{O(1)}."
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L18.html",
    "href": "courses/2023/01-CS614/quizzes/L18.html",
    "title": "CS614. Advanced Algorithms. L18 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. 3-Hitting Set\n\n\n\nObtain an algorithm for 3-Hitting Set running in time 2.4656^k n^{\\mathcal{O}(1)} using iterative compression.\n\n\n\n\n\n\n\n\nProblem 2. d-Hitting Set\n\n\n\nGeneralize the algorithm from the previous problem to obtain an algorithm for d-Hitting Set running in time ((d-1)+0.4656)^k n^{\\mathcal{O}(1)}."
  },
  {
    "objectID": "courses/2023/01-CS614/exams/E02.html",
    "href": "courses/2023/01-CS614/exams/E02.html",
    "title": "CS614. Advanced Algorithms. Exam 2.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\nArturo I. Merino, Torsten Mütze, Aaron Williams: All Your bases Are Belong to Us: Listing All Bases of a Matroid by Greedy Exchanges. FUN 2022: 22:1-22:28 [PDF]\nDaniel Lokshtanov, Bernardo Subercaseaux: Wordle Is NP-Hard. FUN 2022: 19:1-19:8 [PDF]\nChristoph Brause, Ingo Schiermeyer: Kernelization of the 3-path vertex cover problem. Discret. Math. 339(7): 1935-1939 (2016) [PDF]\nRémy Belmonte, Tesshu Hanaka, Ioannis Katsikarelis, Michael Lampis, Hirotaka Ono, Yota Otachi: Parameterized Complexity of Safe Set. J. Graph Algorithms Appl. 24(3): 215-245 (2020) [PDF]\n\n\n\n\n\n\n\nNote for Paper #4\n\n\n\n\n\nFocus on Sections 5 and 7 for the presentation.\n\n\n\n\nRadovan Cervený, Ondrej Suchý: Faster FPT Algorithm for 5-Path Vertex Cover. MFCS 2019: 32:1-32:13 [PDF]\n\n\n\n\n\n\n\nNote for Paper #5\n\n\n\n\n\nSince there are several cases to the branching algorithm, there is no need to comprehensively cover them in the presentation\n\n\n\n\nFedor V. Fomin, Torstein J. F. Strømme: Vertex Cover Structural Parameterization Revisited. WG 2016: 171-182 [PDF]\n\n\n\n\n\n\n\nNote for Paper #6\n\n\n\n\n\nFocus on Section 3 for the presentation.\n\n\n\n\nA Note on Max k-Vertex Cover: Faster FPT-AS, Smaller Approximate Kernel and Improved Approximation. SOSA 2019: 15:1-15:21 [PDF]\n\n\n\n\n\n\n\nNote for Paper #7\n\n\n\n\n\nChoose an appropriate subset of results to present.\n\n\n\n\nDan Hefetz, Orna Kupferman, Amir Lellouche, Gal Vardi: Spanning-Tree Games. MFCS 2018: 35:1-35:16 [PDF]\nMichael Lampis, Valia Mitsou: The Computational Complexity of the Game of Set and Its Theoretical Applications. LATIN 2014: 24-34 [PDF]\n\n\n\n\n\n\n\nNote for Paper #7\n\n\n\n\n\nFocus on the NP-completeness and FPT results here.\n\n\n\n\nJulián Mestre: A Primal-Dual Approximation Algorithm for Partial Vertex Cover: Making Educated Guesses. APPROX-RANDOM 2005: 182-191 [PDF]"
  },
  {
    "objectID": "courses/2023/01-CS614/exams/E02.html#cs614.-advanced-algorithms.",
    "href": "courses/2023/01-CS614/exams/E02.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. Exam 2.",
    "section": "CS614. Advanced Algorithms.",
    "text": "CS614. Advanced Algorithms.\n\nExam 2\nBack to the course page\n\n\n\n\n\n\nList of Papers\n\n\n\n\nArturo I. Merino, Torsten Mütze, Aaron Williams: All Your bases Are Belong to Us: Listing All Bases of a Matroid by Greedy Exchanges. FUN 2022: 22:1-22:28 a service of Schloss Dagstuhl - Leibniz Center for Informatics PDF\nDaniel Lokshtanov, Bernardo Subercaseaux: Wordle Is NP-Hard. FUN 2022: 19:1-19:8 PDF\nChristoph Brause, Ingo Schiermeyer: Kernelization of the 3-path vertex cover problem. Discret. Math. 339(7): 1935-1939 (2016) PDF\nRémy Belmonte, Tesshu Hanaka, Ioannis Katsikarelis, Michael Lampis, Hirotaka Ono, Yota Otachi: Parameterized Complexity of Safe Set. J. Graph Algorithms Appl. 24(3): 215-245 (2020)\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nFocus on Sections 5 and 7 for the presentation.\n\n\n\n\nRadovan Cervený, Ondrej Suchý: Faster FPT Algorithm for 5-Path Vertex Cover. MFCS 2019: 32:1-32:13 PDF\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nSince there are several cases to the branching algorithm, there is no need to comprehensively cover them in the presentation\n\n\n\n\nFedor V. Fomin, Torstein J. F. Strømme: Vertex Cover Structural Parameterization Revisited. WG 2016: 171-182 PDF\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nFocus on Section 3 for the presentation.\n\n\n\n\nA Note on Max k-Vertex Cover: Faster FPT-AS, Smaller Approximate Kernel and Improved Approximation. SOSA 2019: 15:1-15:21 PDF"
  },
  {
    "objectID": "courses/2023/01-CS614/quizzes/L19.html",
    "href": "courses/2023/01-CS614/quizzes/L19.html",
    "title": "CS614. Advanced Algorithms. L19 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Bin Packing\n\n\n\nConsider the bin-packing problem:\nInput: n items with sizes a_1 \\cdots a_n respectively, a positive integer B (bin capacity) and a positive integer k (number of bins). Question: Is there a partition of the set \\{1 \\cdots n\\} into sets S_1, \\ldots, S_k such that for each i \\in\\{1 \\cdots k\\} we have that \\sum_{j \\in S_i} a_j \\leq B?\nShow that Bin Packing is NP-complete.\n\n\n\n\n\n\n\n\nProblem 2. BOX-DEPTH\n\n\n\nConsider the following problem, called BOX-DEPTH: Given a set of n axisaligned rectangles in the plane, how big is the largest subset of these rectangles that contain a common point?\n\nDescribe a polynomial-time reduction from BOX-DEPTH to MAXCLIQUE.\nDescribe and analyze a polynomial-time algorithm for BOX-DEPTH. [Hint: O\\left(n^3\\right) time should be easy, but O(n \\log n) time is possible.]\nWhy don’t these two results imply that \\mathrm{P}=\\mathrm{NP}?"
  },
  {
    "objectID": "courses/2023/01-ES242/exams/exam02.html",
    "href": "courses/2023/01-ES242/exams/exam02.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 02",
    "section": "",
    "text": "Issued: 31 Mar, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 2 at the usual classroom venue. The exam will be released on Gradescope by 9PM, and will be available until 10:30PM.\nPart 1 consists of 5 multiple choice questions, worth 2 points each and is available directly on Gradescope.\nPart 2 consists of 3 programming assignments. Attempt one of problems 1 and 2; and attempt problem 3. The problems are worth 5 points each.\nTotal marks are capped at 20, there is no partial grading or negative marking.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\nUseful resources that you can access during the exam:\n\nBFS/DFS lecture notes\nBFS implementation with sorted neighbors\nDFS implementation with reverse sorted neighbors (so that they are visited in the sorted order)\n\n\n\n\n\n\n\n\n\nProblem 1. Shortest Distance\n\n\n\nGiven an undirected graph G = (V,E) and two specified vertices s and t, determine the length of the shortest path between s and t, where the length of a path is defined as the number of edges on the path.\nHint: start a BFS at s. The BFS layer number of t is the answer, where the layer number of vertex s is 0. If t does not appear in the BFS traversal starting from s, then there no path from s to t.\n\n\nThe first line of input is three space-separated integers n, m, s and t, denoting the number of vertices and edges of G, and the id of the source vertex and the target vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is formatted as follows: print a single integer d, the length of the shortest path between s and t.\n\n\n\nSample Input\n6 8 0 5\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n2\n\n\n\n\n\n\n\n\n\nProblem 2. Bags of Pebbles\n\n\n\nMahi and Brishti are playing with bags of pebbles. They have a row a of n bags of pebbles. The i-th bag has a_i pebbles. The bags are given to the players in the order from the first bag to the n-th bag.\nIf a bag has an even number of pebbles, Mahi grabs the bag. Otherwise, Brishti grabs the bag. Once a bag is grabbed, the number of pebbles in it gets added to the total number of pebbles of the player that took it.\nMahi wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no pebbles), Mahi will have strictly more pebbles than Brishti. Help Mahi find out if such a reordering exists.\n\n\n\nThe first line of the input contains an integer t(1 \\leq t \\leq 1000)- the number of test cases.\nThe first line of each test case contains a single integer n(1 \\leq n \\leq 100) - the number of bags in the array.\nThe second line of each test case contains n space-separated integers a_i\\left(1 \\leq a_i \\leq 100\\right) - the number of pebbles in each bag.\n\n\n\n\nFor each test case, output “YES” (without quotes) if such a reordering exists, and “NO” (without quotes) otherwise.\n\n\n\nSample Input\n3\n4\n1 2 3 4\n4\n1 1 1 2\n3\n1 4 3\nSample Output\nYES\nNO\nNO\nNote In the first test case, Mahi can reorder the array as follows: [4,1,2,3]. Then the process proceeds as follows: - the first bag has 4 pebbles, which is even, so Mahi takes it - Mahi has 4 pebbles, and Brishti has 0 . - the second bag has 1 pebbles, which is odd, so Brishti takes it - Mahi has 4 pebbles, and Brishti has 1. - the third bag has 2 pebbles, which is even, so Mahi takes it - Mahi has 6 pebbles, and Brishti has 1 . - the fourth bag has 3 pebbles, which is odd, so Brishti takes it - Mahi has 6 pebbles, and Brishti has 4. Since Mahi always has more pebbles than Brishti, this reordering works.\n\n\n\n\n\n\n\n\n\nProblem 3. Learning Languages\n\n\n\nIITGN has n students. These students can use m languages for correspondence. The languages are numbered with integers from 1 to m. For each student we have the list of languages, which s/he knows. This list could be empty, i. e. a student may know no languages. But the students are willing to learn any number of languages, as long as the IITGN pays for their lessons. A study course in one language for one student costs 5000 rupees.\nFind the minimum sum of money the IITGN needs to spend so as any student could talk to any other one (their correspondence can be indirect, i. e. other students can help out translating).\nHint. Translate this into a graph where you have n vertices representing the students and m vertices representing languages. If this graph is fully connected then no money needs to be spent. Otherwise think of how much it costs to connect all the connected components of the graph. Which components do you need to worry about? Think about the special case when all students know no languages.\n\n\nThe first line contains two integers n and m (2 \\leqslant n, m \\leqslant 100) — the number of students and the number of languages.\nThen n lines follow — each student’s language list. At the beginning of the i-th line is integer ki (0 \\leqslant k_i \\leqslant m) — the number of languages the i-th student knows. Next, the i-th line contains k_i integers — a_{ij} (1 \\leqslant aij \\leqslant m) — the identifiers of languages the i-th student knows. It is guaranteed that all the identifiers in one list are distinct. Note that an student may know zero languages.\nThe numbers in the lines are separated by single spaces.\n\n\n\nPrint a single integer — the minimum amount of money to pay so that in the end every student could communicate with every other one (other students can help out translating).\n\n\n\nSample Input\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\nSample Output\n0\nSample Input\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\nSample Output\n2\nSample Input\n2 2\n1 2\n0\nSample Output\n1\n\n\n\nIn the second sample the student 1 can learn language 2, and student 8 can learn language 4.\nIn the third sample student 2 must learn language 2."
  },
  {
    "objectID": "courses/2023/01-ES242/exams/exam02.html#es242.-data-structures-and-algorithms-i.",
    "href": "courses/2023/01-ES242/exams/exam02.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Exam 02",
    "section": "ES242. Data Structures and Algorithms I.",
    "text": "ES242. Data Structures and Algorithms I.\n\nExam 02\nIssued: 31 Mar, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 2 at the usual classroom venue. The exam will be released on Gradescope by 9PM, and will be available until 10:30PM.\nPart 1 consists of 5 multiple choice questions, worth 2 points each.\nPart 2 consists of 3 programming assignments, worth 3, 3, and 4 points respectively.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\nUseful resources that you can access during the exam:\n\nBFS/DFS lecture notes\nBFS implementation with sorted neighbors\nDFS implementation with reverse sorted neighbors (so that they are visited in the sorted order)\n\n\n\n\n\n\n\n\n\nProblem 1. Shortest Distance\n\n\n\nGiven an undirected graph G = (V,E) and two specified vertices s and t, determine the length of the shortest path between s and t, where the length of a path is defined as the number of edges on the path.\nHint: start a BFS at s. The BFS layer number of t is the answer, where the layer number of vertex s is 0. If t does not appear in the BFS traversal starting from s, then there no path from s to t.\n\nInput Format\nThe first line of input is three space-separated integers n, m, s and t, denoting the number of vertices and edges of G, and the id of the source vertex and the target vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\nOutput Format\nThe output is formatted as follows: if the BFS lasts for t rounds, there are t lines of output. The i-th line consists of a space-separated list of the vertices visited by BFS in the i-th round of the traversal in increasing order of labels.\n\n\nSample I/O\nSample Input\n6 8 0 5\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n2\n\n\n\n\n\n\n\n\n\nProblem 2. Learning Languages\n\n\n\nIITGN has n students. These students can use m languages for correspondence. The languages are numbered with integers from 1 to m. For each student we have the list of languages, which s/he knows. This list could be empty, i. e. an student may know no languages. But the students are willing to learn any number of languages, as long as the IITGN pays for their lessons. A study course in one language for one student costs 5000 rupees.\nFind the minimum sum of money the IITGN needs to spend so as any student could talk to any other one (their correspondence can be indirect, i. e. other students can help out translating).\n\nInput\nThe first line contains two integers n and m (2 \\leqslant n, m \\leqslant 100) — the number of students and the number of languages.\nThen n lines follow — each student’s language list. At the beginning of the i-th line is integer ki (0 \\leqslant k_i \\leqslant m) — the number of languages the i-th student knows. Next, the i-th line contains k_i integers — a_{ij} (1 \\leqslant aij \\leqslant m) — the identifiers of languages the i-th student knows. It is guaranteed that all the identifiers in one list are distinct. Note that an student may know zero languages.\nThe numbers in the lines are separated by single spaces.\n\n\nOutput\nPrint a single integer — the minimum amount of money to pay so that in the end every student could communicate with every other one (other students can help out translating).\n\n\nSample Input/Output\nSample Input\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\nSample Output\n0\nSample Input\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\nSample Output\n2\nSample Input\n2 2\n1 2\n0\nSample Output\n1\n\n\nNote\nIn the second sample the student 1 can learn language 2, and student 8 can learn language 4.\nIn the third sample student 2 must learn language 2.\n\n\nHint\nThink about the case when all students know no languages. This may require an exception from your general approach (why?)."
  }
]