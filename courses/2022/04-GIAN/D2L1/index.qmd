---
title: "191014K02 | Day 2 Lecture 1"
sidebar: false
toc: false
css: /css/teaching.css
---



:::{.column-body-outset}

## 191014K02: Day 1 Lecture 1

_[Back to the Course Page](../)_


### Vertex Cover

:::{.callout-note}

# Cute randomized algorithm
$S=\varnothing$

while $G-S$ has at least one edge:

- pick $u,v \in E(G-S)$ u.a.r. 
- pick $s \in\{u,v\}$ u.a.r
- Set $S \leftarrow S \cup\{s\}$

Output $S$
:::

### Feedback Vertex Set

Now we turn to a problem similar to vertex cover, except that we are "killing cycles" instead of "killing edges".

:::{.callout-tip}

# Feedback Vertex Set

Input: A (multi-)^[We allow for more than one edge between a fixed pair of vertices and self-loops.]graph $G = (V,E)$.

Task: Find $S \subseteq V(G)$ such that $G \setminus S$ is a forest^[A graph without cycles that is not necessarily connected.], and <span style="color:indianred;">minimize $|S|$</span>.

:::

If we try to mimic the cute algorithm from before, we might easily be in trouble: note that the driving observation --- that an edge has at least one of its endpoints in the solution with a reasonable enough probability --- can fail spectacularly for FVS:

![An example showing that _both_ endpoints of most edges need not belong to an optimal solution.](../images/fvs-badex.png){width=70%}

One thing about this example is the large number of pendant vertices sticking out prominently, and these clearly contribute to the badness of the situation. Happily, it turns out that we can get rid of these:


:::{.callout-important icon="false"}

# Lemma 1. Delete pendant and isolated vertices

Let $G$ be a multi-graph and $v$ be a vertex of degree $\leqslant 1$. Then:

- MinFVS of $G-\{v\}$ $\leqslant$ MinFVS of $G$

- $\forall S \subseteq V(G)-\{v\}$: <span style="color:#CC0000;"> $S$ is an FVS for $G$ </span> $\leftrightarrow$ <span style="color:#CC0000;">$S$ is an FVS for $G \setminus \{v\}$  </span>

:::

Consider graphs with no pendant vertices and fix an optimal FVS $S$. Is it true that every edge has one of its endpoints in $S$ with some non-zero probability? Well... not yet:

:::{.callout-note icon="false" collapse="true"}

# Spoiler

![An(other) example showing that _both_ endpoints of most edges need not belong to an optimal solution.](../images/fvs-badex-deg2.png){width=70%}

:::

However, continuing our approach of conquering-by-observing-patterns-in-counterexamples, note that the example above has an _abundance_ of vertices that have degree two. Can we get rid of them? Well, isolated and pendant vertices were relatively easy because they don't even belong to cycles, but _that_ is not quite true for vertices of degree two. Can we still hope to shake them off?

One thing about a degree two vertex $u$ is that if there is a cycle that contains $u$ it _must_ contain both its neighbors^[Except when the cycle _only_ contains $u$, i.e, $u$ has a self-loop.]. So you might suggest that we can ditch $u$ and just work with its neighbors instead. This intuition, it turns out, can indeed be formalized:


:::{.callout-important icon="false"}

# Lemma 2. Short-Circuiting Degree Two Vertices

Let:

- $G$ be a multi-graph,
- $u$ be a vertex ot degree 2 that is not a self-loop,
- $a$ and $b$ be the neighbors of $u$ ($a=b$ is possible).

Let $H$ be the grpah obtained by adding an edge $(a,b)$ to $G-\{u\}$.

Then:

- every FVS $S$ of $G$ such that $u \notin S$ is an FVS of $H$, and
- every FVS $S$ of $H$ is an FVS of $G$.

:::




### Exact Algorithms


The running time is then given by:

$\frac{{n \choose t}}{{k \choose t}} \cdot c^{k-t}$

$\min_{t \leqslant k} \frac{{n \choose t}}{{k \choose t}} \cdot c^{k-t}$

$\leqslant \max_{k \leqslant n} \min _{t \leqslant k} \frac{{n \choose t}}{k \choose t} \cdot c^{k-t}$

$\leqslant \left(2-\frac{1}{c}\right)^n \cdot \operatorname{poly}(n)$


This leads to an $O(1.5^n)$ algorithm for Vertex Cover and an $O(1.75^n)$ algorithm for Feedback Vertex Set.


:::